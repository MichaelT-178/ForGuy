{
    "MultiSet": [
        {
            "Info": [
                {
                    "title": "How to Make a Complex REST Api using React, Spring Boot and MySQL",
                    "desc": "Describes how to make a complex REST Api with React, Spring Boot, and MySQL.",
                    "ref": "complex-mysql"
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "We are going to build a full-stack web application step-by-step using React, Java, Spring Boot, and MySQL."
                },
                {
                    "id": 2,
                    "instruction": "A full video demo of this app can be found on my YouTube channel [here](FILL THIS LINK IN)."
                },
                {
                    "id": 3,
                    "instruction": "Let's get started!"
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "Technologies We'll Use",
                    "desc": "This is the tech stack we'll use to make this project"
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "<u><b>React</b></u> - The JavaScript Framework we'll use to build our user interface."
                },
                {
                    "id": 2,
                    "instruction": "<u><b>JavaScript</b></u> - The scripting language we'll use to add logic to our frontend."
                },
                {
                    "id": 3,
                    "instruction": "<u><b>TypeScript</b></u> - The programming language we'll for some parts of our frontend. It's a superset of JavaScript with types."
                },
                {
                    "id": 4,
                    "instruction": "<u><b>Spring Boot</b></u> - The Python web framework we'll use to help build our Rest Api."
                },
                {
                    "id": 5,
                    "instruction": "<u><b>Java</b></u> - The programming language we'll use to develop our Rest Api."
                },
                {
                    "id": 6,
                    "instruction": "<u><b>SQL</b></u> - The language we'll use to help build and query our database."
                },
                {
                    "id": 7,
                    "instruction": "<u><b>MySQL</b></u> - The database we'll use to store user information."
                },
                {
                    "id": 8,
                    "instruction": "<u><b>Visual Studio Code</b></u> - The code editor we'll use to help us build our project."
                },
                {
                    "id": 9,
                    "instruction": "<u><b>JUnit</b></u> - The Python testing framework we'll use to test our Rest Api."
                },
                {
                    "id": 10,
                    "instruction": "<u><b>Mockito</b></u> - A mocking framework used in unit testing to mock objects and their behaviors."
                },
                {
                    "id": 11,
                    "instruction": "<u><b>Jest</b></u> - The JavaScript testing framework we'll use to test our Vue code. I'm basically just including it to show you how to set it up with TypeScript."
                },
                {
                    "id": 12,
                    "instruction": "<u><b>Github</b></u> - The platform we'll use for version control and collaborative software development."
                },
                {
                    "id": 13,
                    "instruction": "<u><b>Git</b></u> - The distributed version control system we'll use to track changes to our projects."
                },
                {
                    "id": 14,
                    "instruction": "<u><b>Homebrew</b></u> - MacOS package manager we'll use to install software. Optional to use."
                },
                {
                    "id": 15,
                    "instruction": "<u><b>JWT</b></u> - Stands for JSON Web Token. We'll use it to securely "
                },
                {
                    "id": 16,
                    "instruction": "<u><b>openssl</b></u> - The library we'll use to generate a secure key for JWT."
                },
                {
                    "id": 17,
                    "instruction": "<u><b>jq</b></u> - Stands for \"JSON Query\". We'll use it to pretty print JSON data in our terminal."
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "Setup Technologies",
                    "desc": "Explanation of how to setup and verify all technologies."
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "Verify you have visual studio Code installed by running the following command in a terminal. If it outputs a version number you should have it installed.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "code --version",
                        "CopyCode": "code --version"
                    }
                },
                {
                    "id": 2,
                    "instruction": "If you haven't already downloaded Visual Studio Code, you can do so [here](https://code.visualstudio.com/download). Download the version that matches your operating system."
                },
                {
                    "id": 3,
                    "instruction": "Verify that you have Homebrew installed on your computer by running this command in your terminal. If it outputs a version it means you have it installed."
                },
                {
                    "id": 4,
                    "instruction": "If you don't already have homebrew installed, install it using the following command.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\nbrew --version",
                        "CopyCode": "/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\nbrew --version"
                    }
                },
                {
                    "id": 5,
                    "instruction": "Verify that you have node and npm installed by running the following commands. If they output a version you should be good.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "node -v\nnpm -v",
                        "CopyCode": "node -v\nnpm -v"
                    }
                },
                {
                    "id": 6,
                    "instruction": "If node and npm didn't output a version, download them using homebrew. It's just one command.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "brew install node",
                        "CopyCode": "brew install node"
                    }
                },
                {
                    "id": 7,
                    "instruction": "Make sure that you have Java 17 installed by running the following command. If you don't have Java 17 installed see the instruction \"How to Setup Java 17\" section below.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "java --version",
                        "CopyCode": "java --version"
                    }
                },
                {
                    "id": 8,
                    "instruction": "Verify that you have gradle installed by running the following command.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "gradle -v",
                        "CopyCode": "gradle -v"
                    }
                },
                {
                    "id": 9,
                    "instruction": "If the grade command was not found, you can install it using homebrew.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "brew install gradle\ngradle -v",
                        "CopyCode": "brew install gradle\ngradle -v"
                    }
                },
                {
                    "id": 10,
                    "instruction": "Install the jq tool using homebrew.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "brew install jq",
                        "CopyCode": "brew install jq"
                    }
                },
                {
                    "id": 11,
                    "instruction": "Verify that you have TypeScript installed.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "tsc -v",
                        "CopyCode": "tsc -v"
                    }
                },
                {
                    "id": 12,
                    "instruction": "If the command in step 11 didn't output a version, install it globally via npm.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "npm install -g typescript\ntsc -v",
                        "CopyCode": "npm install -g typescript\ntsc -v"
                    }
                },
                {
                    "id": 13,
                    "instruction": "Go to [github.com](https://github.com/) to see if you have an account. If you don't press the \"Sign Up\" button in the top-right and follow the prompts."
                },
                {
                    "id": 14,
                    "instruction": "Verify that git is installed by running the following command in a terminal. If it outputs a version you're good.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "git --version",
                        "CopyCode": "git --version"
                    }
                },
                {
                    "id": 15,
                    "instruction": "If you don't have git setup follow this instruction set (here)[/CompSci/GitHub#createGHAccount]."
                },
                {
                    "id": 16,
                    "instruction": "Install the necessary VSCode extensions using the following links. They will help us setup our Spring Boot Project. Press the green \"Install\" button, then when it takes you to VSCode press the blue \"Install\" button.<br><br>Ext 1: [Extension Pack for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack)<br>Ext 2: [Spring Initializr Java Support](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-spring-initializr)<br>Ext 3: [Spring Boot Dashboard](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-spring-boot-dashboard)<br>Ext 4: [Spring Boot Tools](https://marketplace.visualstudio.com/items?itemName=vmware.vscode-spring-boot)<br>Ext 5: [Spring Boot Extension Pack](https://marketplace.visualstudio.com/items?itemName=vmware.vscode-boot-dev-pack)<br><br>"
                },
                {
                    "id": 17,
                    "instruction": "Verify that you have MySQL installed by running the following command.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "mysql --version",
                        "CopyCode": "mysql --version"
                    }
                },
                {
                    "id": 18,
                    "instruction": "If the command in step 16 didn't output the version, see the next section below titled \"How to Setup MySQL\"."
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "How to Setup Java 17",
                    "desc": "Explains how to install and setup Java 17."
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "Download it [here](https://www.oracle.com/java/technologies/downloads/#jdk17-mac) if you don't already installed. Make sure to choose the right version for your OS and architecture. Run the following command to determine your architecture. When you're back on the site, choose the DMG installer. Then click on the download button and then follow the prompts.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "uname -m",
                        "CopyCode": "uname -m"
                    }
                },
                {
                    "id": 2,
                    "instruction": "Now go to your terminal and run the following command. We're going to set your Java version to 17. Note that this process is different for bash.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "nano ~/.zshrc",
                        "CopyCode": "nano ~/.zshrc"
                    }
                },
                {
                    "id": 3,
                    "instruction": "In your nano file paste the two following lines. You shouldn't have to modify them.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "Env Variables",
                        "FormatCode": "export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home\nexport PATH=$JAVA_HOME/bin:$PATH",
                        "CopyCode": "export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home\nexport PATH=$JAVA_HOME/bin:$PATH"
                    }
                },
                {
                    "id": 4,
                    "instruction": "To save the changes, press control + o. Then press return/enter. Then press control + x."
                },
                {
                    "id": 5,
                    "instruction": "Open a completely new terminal and run the following command. It should output Java 17.0.6 (Or 17 something)",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "java --version",
                        "CopyCode": "java --version"
                    }
                },
                {
                    "id": 6,
                    "instruction": "After you have Java 17 installed, delete the archive that contains the installation files."
                },
                {
                    "id": 7,
                    "instruction": "Congratulations! You should now have Java 17 setup on your computer."
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "How to Setup MySQL",
                    "desc": "Explains how to install and setup MySQL on MacOS."
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "The process for installing and setting up a MySQL database is very similar to setting up a PostgreSQL database."
                },
                {
                    "id": 2,
                    "instruction": "A lot of this information comes from this [video](https://youtu.be/Mq36ll3orio?si=13MWZCoNXiKzN8z-)."
                },
                {
                    "id": 3,
                    "instruction": "Verify that you have homebrew installed.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "brew --version",
                        "CopyCode": "brew --version"
                    }
                },
                {
                    "id": 4,
                    "instruction": "Search for the latest version of mysql. This will let you see the latest versions. Press \"command + k\" to clear your terminal when you're done.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "brew search mysql",
                        "CopyCode": "brew search mysql"
                    }
                },
                {
                    "id": 5,
                    "instruction": "I'm just going to install the basic mysql for this tutorial using the following command. This might take a while to install.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "brew install mysql",
                        "CopyCode": "brew install mysql"
                    }
                },
                {
                    "id": 6,
                    "instruction": "Now verify that you have it installed by checking the version.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "mysql --version",
                        "CopyCode": "mysql --version"
                    }
                },
                {
                    "id": 7,
                    "instruction": "Start running the MySQL service.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "brew services start mysql",
                        "CopyCode": "brew services start mysql"
                    }
                },
                {
                    "id": 8,
                    "instruction": "Run the following command to ensure that MySQL is running. It should say \"started\" in green under status.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "brew services list",
                        "CopyCode": "brew services list"
                    }
                },
                {
                    "id": 9,
                    "instruction": "Secure your database by running the following command. I explain how to answer the prompts in the next step.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "mysql_secure_installation",
                        "CopyCode": "mysql_secure_installation"
                    }
                },
                {
                    "id": 10,
                    "instruction": "These are the answers to the prompts for the previous steps command.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "Prompt Answers",
                        "FormatCode": "Press y|Y for Yes, any other key for No: y\n\nPlease enter 0 = LOW, 1 = MEDIUM and 2 = STRONG: 1\n\nNew Password: * Create a password thats over 8 chars long, has mixed case, and special chars *\n\nRe-enter new password: * Enter same password * \n\n* Estimated strength should be 100 *\n\nDo you wish to continue with the password provided? ... : y\n\nRemove anonymous users? ... : n\n\nDisallow root login remotely? ... : n\n\nRemove test database and access to it? ... : n\n\nReload privilege tables now? ... : y\n\n\n* Should now say \\\"All done!\\\" if successful *",
                        "CopyCode": "Press y|Y for Yes, any other key for No: y\n\nPlease enter 0 = LOW, 1 = MEDIUM and 2 = STRONG: 1\n\nNew Password: * Create a password thats over 8 chars long, has mixed case, and special chars *\n\nRe-enter new password: * Enter same password * \n\n* Estimated strength should be 100 *\n\nDo you wish to continue with the password provided? ... : y\n\nRemove anonymous users? ... : n\n\nDisallow root login remotely? ... : n\n\nRemove test database and access to it? ... : n\n\nReload privilege tables now? ... : y\n\n\n* Should now say \\\"All done!\\\" if successful *"
                    }
                },
                {
                    "id": 11,
                    "instruction": "Now run the following command to connect to your database.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "",
                        "FormatCode": "mysql -u root -p\n\n* When prompted enter the password you made in the previous step * \n\n* You should then be connected to the MySQL monitor * ",
                        "CopyCode": "mysql -u root -p\n\n* When prompted enter the password you made in the previous step * \n\n* You should then be connected to the MySQL monitor * "
                    }
                },
                {
                    "id": 12,
                    "instruction": "These are common MySQL queries you can use to see the data.",
                    "Table": [
                        {
                            "Command": "SHOW TABLES;",
                            "Description": "List all tables",
                            "Example": "SHOW TABLES;"
                        },
                        {
                            "Command": "EXIT;",
                            "Description": "Quit/exit your database",
                            "Example": "EXIT;"
                        },
                        {
                            "Command": "SELECT user, host FROM mysql.user;",
                            "Description": "List all users and roles",
                            "Example": "SELECT user, host FROM mysql.user;"
                        },
                        {
                            "Command": "SHOW TABLES;",
                            "Description": "List all tables",
                            "Example": "SHOW TABLES;"
                        }
                    ]
                },
                {
                    "id": 13,
                    "instruction": "This is the command you'll use to sign into your main MySQL server.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "mysql -u root -p",
                        "CopyCode": "mysql -u root -p"
                    }
                },
                {
                    "id": 14,
                    "instruction": "If this worked, you should have MySQL installed correctly."
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "How to Setup a Spring Boot Project",
                    "desc": "Explains how to setup a Spring Boot project in VSCode that uses Gradle."
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "If you haven't done so already, install the necessary VSCode extensions using the following links. They will help us setup our Spring Boot Project. Press the green \"Install\" button, then when it takes you to VSCode press the blue \"Install\" button.<br><br>Ext 1: [Extension Pack for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack)<br>Ext 2: [Spring Initializr Java Support](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-spring-initializr)<br>Ext 3: [Spring Boot Dashboard](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-spring-boot-dashboard)<br>Ext 4: [Spring Boot Tools](https://marketplace.visualstudio.com/items?itemName=vmware.vscode-spring-boot)<br>Ext 5: [Spring Boot Extension Pack](https://marketplace.visualstudio.com/items?itemName=vmware.vscode-boot-dev-pack)<br><br>"
                },
                {
                    "id": 2,
                    "instruction": "Go to VSCode. Then do the following steps. These steps mostly come from this [video](https://youtu.be/yCf93VaMlOw?si=UozBt-8_AwKfIsSY).",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "Steps",
                        "FormatCode": "1. command + shift + p (Opens the command pallette)\n2. Search and press on \"Spring Initializr: Create a Gradle Project...\"",
                        "CopyCode": "1. command + shift + p (Opens the command pallette)\n2. Search and press on \"Spring Initializr: Create a Gradle Project...\""
                    }
                },
                {
                    "id": 3,
                    "instruction": "For the Spring Initializr prompts search and press on the following options.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "Prompt Answers",
                        "FormatCode": "Spring Boot Version: 3.3.3 (Or First Option/Does NOT include \"Snapshot\")\nProject Language: Java\nGroup Id: com.superherobackend\nArtifact Id: superhero\nPackaging Type: Jar\nJava Version: 17\nDependencies: Spring Web, Lombok, and Spring Boot DevTools (Search separately)\n\nPress Enter/Return\nPress \"Generate into this folder\" \nPress \"Open\" in the VSCode pop-up\nSay \"Yes, I trust the authors\" if prompted",
                        "CopyCode": "Spring Boot Version: 3.3.3 (Or First Option/Does NOT include \"Snapshot\")\nProject Language: Java\nGroup Id: com.superherobackend\nArtifact Id: superhero\nPackaging Type: Jar\nJava Version: 17\nDependencies: Spring Web, Lombok, and Spring Boot DevTools (Search separately)\n\nPress Enter/Return\nPress \"Generate into this folder\" \nPress \"Open\" in the VSCode pop-up\nSay \"Yes, I trust the authors\" if prompted"
                    }
                },
                {
                    "id": 4,
                    "instruction": "Open a terminal and run the following command to change the name.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "mv superhero Superhero-Rest-Api",
                        "CopyCode": "mv superhero Superhero-Rest-Api"
                    }
                },
                {
                    "id": 5,
                    "instruction": "Now create the necessary folders.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Superhero-Rest-Api/src/main/java/com/superherobackend/superhero\n\nmkdir config\nmkdir controllers\nmkdir exceptions\nmkdir models\nmkdir repositories\nmkdir services\nmkdir utils \n\ntouch controllers/HelloWorldController.java\ncd ~",
                        "CopyCode": "cd Superhero-Rest-Api/src/main/java/com/superherobackend/superhero\n\nmkdir config\nmkdir controllers\nmkdir exceptions\nmkdir models\nmkdir repositories\nmkdir services\nmkdir utils \n\ntouch controllers/HelloWorldController.java\ncd ~"
                    }
                },
                {
                    "id": 6,
                    "instruction": "In the future, instead of using \"touch\" commands to create your files, I'd recommend clicking the folder name in VSCode and selecting \"New File...\" in the menu. This will generate the boilerplate code for you. I just thought the touch commands would be easier to use for this project."
                },
                {
                    "id": 7,
                    "instruction": "Open your \"Superhero-Rest-Api\" in VSCode. Go to src -> main -> java -> com -> superherobackend -> controllers. Open the \"HelloWorldController.java\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Java",
                        "FormatCode": "package com.superherobackend.superhero.controllers;\n\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@RestController\npublic class HelloWorldController {\n\n    @RequestMapping(\"/\")\n    public String hello() {\n        return \"Hello World from Api\";\n    }\n}",
                        "CopyCode": "package com.superherobackend.superhero.controllers;\n\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@RestController\npublic class HelloWorldController {\n\n    @RequestMapping(\"/\")\n    public String hello() {\n        return \"Hello World from Api\";\n    }\n}"
                    }
                },
                {
                    "id": 8,
                    "instruction": "Go to src -> main -> resources and open the \"application.properties\" file. Delete it's contents and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customproperties",
                        "DisplayLang": "Properties",
                        "FormatCode": "spring.application.name=superhero\nserver.port=8080\nlogging.level.root=OFF\nlogging.level.org.springframework.boot=ERROR\nlogging.level.org.springframework.web=DEBUG\nspring.main.banner-mode=OFF\nspring.jpa.show-sql=true\nspring.jpa.hibernate.ddl-auto=update",
                        "CopyCode": "spring.application.name=superhero\nserver.port=8080\nlogging.level.root=OFF\nlogging.level.org.springframework.boot=ERROR\nlogging.level.org.springframework.web=DEBUG\nspring.main.banner-mode=OFF\nspring.jpa.show-sql=true\nspring.jpa.hibernate.ddl-auto=update"
                    }
                },
                {
                    "id": 9,
                    "instruction": "Now open a terminal and run the following commands to create a new file in the root directory called \"start.sh\".",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Superhero-Rest-Api\ntouch start.sh",
                        "CopyCode": "cd Superhero-Rest-Api\ntouch start.sh"
                    }
                },
                {
                    "id": 10,
                    "instruction": "Open the \"start.sh\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "sh",
                        "DisplayLang": "Shell Script",
                        "FormatCode": "#!/bin/sh\nYELLOW='\\033[0;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\nkill_port_8080() {\n  PID=$(lsof -t -i:8080)\n\n  if [ -n \"$PID\" ]; then\n    echo \"\\n${BLUE}Port 8080 is in use by PID $PID. Stopping the process...${NC}\"\n    kill -9 $PID\n    echo \"${BLUE}Process $PID has been stopped.${NC}\"\n  fi\n}\n\n\nstop_spring_boot() {\n  echo \"\\n\\n${YELLOW}Spring Boot application finished successfully! Stopping Spring Boot...${NC}\"\n  kill \"$SPRING_BOOT_PID\" 2>/dev/null\n\n  kill_port_8080\n}\n\n# Handles control + c (SIGINT)/termination (SIGTERM)\ntrap stop_spring_boot INT TERM\n\nkill_port_8080\n\n# Runs the Gradle bootRun task in the background\n./gradlew --quiet bootRun &\nSPRING_BOOT_PID=$!\n\nsleep 0.1\n\necho \"\\n* Running on ${BLUE}http://localhost:8080${NC}\\n\"\n\n# Wait for the Spring Boot process to finish\nwait \"$SPRING_BOOT_PID\"",
                        "CopyCode": "#!/bin/sh\nYELLOW='\\033[0;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\nkill_port_8080() {\n  PID=$(lsof -t -i:8080)\n\n  if [ -n \"$PID\" ]; then\n    echo \"\\n${BLUE}Port 8080 is in use by PID $PID. Stopping the process...${NC}\"\n    kill -9 $PID\n    echo \"${BLUE}Process $PID has been stopped.${NC}\"\n  fi\n}\n\n\nstop_spring_boot() {\n  echo \"\\n\\n${YELLOW}Spring Boot application finished successfully! Stopping Spring Boot...${NC}\"\n  kill \"$SPRING_BOOT_PID\" 2>/dev/null\n\n  kill_port_8080\n}\n\n# Handles control + c (SIGINT)/termination (SIGTERM)\ntrap stop_spring_boot INT TERM\n\nkill_port_8080\n\n# Runs the Gradle bootRun task in the background\n./gradlew --quiet bootRun &\nSPRING_BOOT_PID=$!\n\nsleep 0.1\n\necho \"\\n* Running on ${BLUE}http://localhost:8080${NC}\\n\"\n\n# Wait for the Spring Boot process to finish\nwait \"$SPRING_BOOT_PID\""
                    }
                },
                {
                    "id": 11,
                    "instruction": "Now go to your terminal and run the following command.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "nano ~/.zshrc",
                        "CopyCode": "nano ~/.zshrc"
                    }
                },
                {
                    "id": 12,
                    "instruction": "Paste the following shell code at the bottom of the file. Note that \"gradle\" is just a variable, it's not associated with the actual gradle tool.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "sh",
                        "DisplayLang": "Shell Script",
                        "FormatCode": "gradle() {\n    RED='\\033[0;31m'\n    NC='\\033[0m'\n\n    if [ \"$1\" = \"run\" ]; then\n        if [ -f \"./start.sh\" ]; then\n            ./start.sh\n        else\n            echo -e \"${RED}Error: ./start.sh not found. Change into your Rest Api folder.${NC}\"\n        fi\n    fi\n}",
                        "CopyCode": "gradle() {\n    RED='\\033[0;31m'\n    NC='\\033[0m'\n\n    if [ \"$1\" = \"run\" ]; then\n        if [ -f \"./start.sh\" ]; then\n            ./start.sh\n        else\n            echo -e \"${RED}Error: ./start.sh not found. Change into your Rest Api folder.${NC}\"\n        fi\n    fi\n}"
                    }
                },
                {
                    "id": 13,
                    "instruction": "After you paste in the shell code, save your changes by doing control + o, then press return, then control + x."
                },
                {
                    "id": 14,
                    "instruction": "Reloads Your Zsh Configuration to apply the changes by running the following command.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "source ~/.zshrc",
                        "CopyCode": "source ~/.zshrc"
                    }
                },
                {
                    "id": 15,
                    "instruction": "We did this because gradle doesn't have a way to detect SIGTERM exit signals. We just made the terminal command \"gradle run\" which will allow us to run the shell script completely separated from the gradle process."
                },
                {
                    "id": 16,
                    "instruction": "Now try to run your Rest API. You should only have to source the zshrc file and run the \"chmod\" command once.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Superhero-Rest-Api\nsource ~/.zshrc\nchmod +x start.sh\ngradle run",
                        "CopyCode": "cd Superhero-Rest-Api\nsource ~/.zshrc\nchmod +x start.sh\ngradle run"
                    }
                },
                {
                    "id": 17,
                    "instruction": "Open this link in your browser to see the value returned from your \"Hello\" endpoint. You should see \"Hello World from Api\" text. Press \"control + c\" to stop your rest api.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "http://localhost:8080",
                        "CopyCode": "http://localhost:8080"
                    }
                },
                {
                    "id": 18,
                    "instruction": "Run the following command to make sure it's no longer running on port 8080. This command should NOT print anything (other than a blank newline).",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "lsof -i :8080",
                        "CopyCode": "lsof -i :8080"
                    }
                },
                {
                    "id": 19,
                    "instruction": "In the future to run your Rest Api use the following commands.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Superhero-Rest-Api\ngradle run",
                        "CopyCode": "cd Superhero-Rest-Api\ngradle run"
                    }
                },
                {
                    "id": 20,
                    "instruction": "If I wasn't using the shell script you would run the application using the following commands. I just thought \"gradle run\" was easier and it outputs the localhost link.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Superhero-Rest-Api\n./gradlew bootRun",
                        "CopyCode": "cd Superhero-Rest-Api\n./gradlew bootRun"
                    }
                },
                {
                    "id": 21,
                    "instruction": "You can also run it using the \"gradle run\" command.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "gradle run",
                        "CopyCode": "gradle run"
                    }
                },
                {
                    "id": 22,
                    "instruction": "I'll explain how to use environment variables and connect to the MySQL database in the \"Create your Spring Boot Rest API\" section."
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "How to Setup a React Project",
                    "desc": "Explains how to setup a React Project with TypeScript and Jest."
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "Now we'll create our frontend. Run the following command to initialize our project.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "npm create vite@latest Superhero-Frontend -- --template react-ts\n\n* When prompted for \"Package Name\" just press \"return\" *",
                        "CopyCode": "npm create vite@latest Superhero-Frontend -- --template react-ts\n\n* When prompted for \"Package Name\" just press \"return\" *"
                    }
                },
                {
                    "id": 2,
                    "instruction": "Run the following commands to install node. Open the link thats output in your browser. Press \"control + c\" to stop running it.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Superhero-Frontend\nnpm install\nnpm run dev",
                        "CopyCode": "cd Superhero-Frontend\nnpm install\nnpm run dev"
                    }
                },
                {
                    "id": 3,
                    "instruction": "Create your folder structure using the following commands.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Superhero-Frontend\nrm src/assets/react.svg\n\nmkdir src/api\nmkdir src/components\nmkdir src/lib\nmkdir src/router\nmkdir src/services\nmkdir src/states\nmkdir src/tests\nmkdir src/utils\nmkdir src/views\nmkdir styles\nmkdir styles/components\nmkdir styles/views\n\n\ntouch src/router/index.jsx\n\n\ntouch src/views/HomePage.jsx\ntouch src/styles/components/HomePage.module.css\n\n\nmv src/App.tsx src/App.jsx\n\nrm src/index.css\n\nclear",
                        "CopyCode": "cd Superhero-Frontend\nrm src/assets/react.svg\n\nmkdir src/api\nmkdir src/components\nmkdir src/lib\nmkdir src/router\nmkdir src/services\nmkdir src/states\nmkdir src/tests\nmkdir src/utils\nmkdir src/views\nmkdir styles\nmkdir styles/components\nmkdir styles/views\n\n\ntouch src/router/index.jsx\n\n\ntouch src/views/HomePage.jsx\ntouch src/styles/components/HomePage.module.css\n\n\nmv src/App.tsx src/App.jsx\n\nrm src/index.css\n\nclear"
                    }
                },
                {
                    "id": 4,
                    "instruction": "Download the following dependencies.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "npm install react-router-dom",
                        "CopyCode": "npm install react-router-dom"
                    }
                },
                {
                    "id": 5,
                    "instruction": "Open \"Superhero-Frontend\" in VSCode. Go to src -> main.tsx. Delete it's contents and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "TypeScript",
                        "FormatCode": "import { StrictMode } from 'react'\nimport { createRoot } from 'react-dom/client'\n\n// @ts-ignore\nimport App from './App.jsx'\n\ncreateRoot(document.getElementById('root')!).render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n)",
                        "CopyCode": "import { StrictMode } from 'react'\nimport { createRoot } from 'react-dom/client'\n\n// @ts-ignore\nimport App from './App.jsx'\n\ncreateRoot(document.getElementById('root')!).render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n)"
                    }
                },
                {
                    "id": 6,
                    "instruction": "Go to the src -> app.css file. Open it and comment out its contents. Then paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Javascript",
                        "DisplayLang": "CSS",
                        "FormatCode": "* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n",
                        "CopyCode": "* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n"
                    }
                },
                {
                    "id": 7,
                    "instruction": "Now go to src -> views and open the \"HomePage.jsx\" file. Paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Javascript",
                        "DisplayLang": "React",
                        "FormatCode": "import styles from '../styles/components/HomePage.module.css';\n\nfunction HomePage() {\n  return (\n    <div>\n      <h1>Homepage</h1>\n      <p>Welcome to the homepage!</p>\n      <div className={styles[\"red-line\"]}></div>\n    </div>\n  );\n}\n\nexport default HomePage;",
                        "CopyCode": "import styles from '../styles/components/HomePage.module.css';\n\nfunction HomePage() {\n  return (\n    <div>\n      <h1>Homepage</h1>\n      <p>Welcome to the homepage!</p>\n      <div className={styles[\"red-line\"]}></div>\n    </div>\n  );\n}\n\nexport default HomePage;"
                    }
                },
                {
                    "id": 8,
                    "instruction": "Now go to src -> router and open the \"index.jsx\" file. Paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Javascript",
                        "DisplayLang": "React",
                        "FormatCode": "import React from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport HomePage from '../views/HomePage.jsx';\n\nfunction AppRouter() {\n  return (\n    <Routes>\n      <Route path=\"/\" element={<HomePage />} />\n    </Routes>\n  );\n}\n\nexport default AppRouter;",
                        "CopyCode": "import React from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport HomePage from '../views/HomePage.jsx';\n\nfunction AppRouter() {\n  return (\n    <Routes>\n      <Route path=\"/\" element={<HomePage />} />\n    </Routes>\n  );\n}\n\nexport default AppRouter;"
                    }
                },
                {
                    "id": 9,
                    "instruction": "Now go to src -> styles -> views and open the \"HomePage.module.css\" file. Paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "fxml",
                        "DisplayLang": "CSS",
                        "FormatCode": ".red-line {\n  width: 100%;\n  height: 4px;\n  background-color: red;\n  margin: 20px 0;\n}",
                        "CopyCode": ".red-line {\n  width: 100%;\n  height: 4px;\n  background-color: red;\n  margin: 20px 0;\n}"
                    }
                },
                {
                    "id": 10,
                    "instruction": "Now go to src and open the \"App.jsx\" file. Delete its contents and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Javascript",
                        "DisplayLang": "React",
                        "FormatCode": "import AppRouter from './router'\nimport './App.css'\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router>\n      <>\n        <AppRouter />\n      </>\n    </Router>\n  );\n}\n\nexport default App;",
                        "CopyCode": "import AppRouter from './router'\nimport './App.css'\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router>\n      <>\n        <AppRouter />\n      </>\n    </Router>\n  );\n}\n\nexport default App;"
                    }
                },
                {
                    "id": 11,
                    "instruction": "Now we'll add the Jest testing framework to our project. Open a terminal and run the following commands.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Superhero-Frontend\ntouch jest.config.cjs\ntouch babel.config.cjs\n\nnpm install --save-dev jest-environment-jsdom\nnpm install --save-dev jest-html-reporter\nnpm install --save-dev @babel/preset-env\nnpm install --save-dev @babel/preset-react\nnpm install --save-dev @babel/preset-typescript\nnpm install --save-dev @testing-library\nnpm install --save-dev @testing-library/jest-dom\nnpm install --save-dev @testing-library/react\nnpm install --save-dev identity-obj-proxy\n\nnvm install 20.10.0\nnvm use 20.10.0",
                        "CopyCode": "cd Superhero-Frontend\ntouch jest.config.cjs\ntouch babel.config.cjs\n\nnpm install --save-dev jest-environment-jsdom\nnpm install --save-dev jest-html-reporter\nnpm install --save-dev @babel/preset-env\nnpm install --save-dev @babel/preset-react\nnpm install --save-dev @babel/preset-typescript\nnpm install --save-dev @testing-library\nnpm install --save-dev @testing-library/jest-dom\nnpm install --save-dev @testing-library/react\nnpm install --save-dev identity-obj-proxy\n\nnvm install 20.10.0\nnvm use 20.10.0"
                    }
                },
                {
                    "id": 12,
                    "instruction": "In src open \"jest.config.cjs\" paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "CommonJS",
                        "FormatCode": "module.exports = {\n  moduleFileExtensions: ['js', 'json', 'tsx', 'jsx'],\n  transform: {\n    '^.+\\\\.(js|jsx|ts|tsx)$': 'babel-jest',\n  },\n  testMatch: [\n    '**/tests/**/*.spec.(js|jsx|ts|tsx)',\n    '**/?(*.)+(spec|test).[jt]s?(x)',\n  ],\n  testEnvironment: 'jsdom',\n  transformIgnorePatterns: [\n    '/node_modules/',\n  ],\n  testEnvironmentOptions: {\n    customExportConditions: [\"node\", \"node-addons\"],\n },\n moduleNameMapper: {\n  '\\\\.(css|less|sass|scss)$': 'identity-obj-proxy',\n },\n reporters: [\n  \"default\", \n  [\"jest-html-reporter\", {\n    pageTitle: \"Test Report\",\n    outputPath: \"test-report.html\",\n    includeFailureMsg: true,\n    }]\n  ]\n};",
                        "CopyCode": "module.exports = {\n  moduleFileExtensions: ['js', 'json', 'tsx', 'jsx'],\n  transform: {\n    '^.+\\\\.(js|jsx|ts|tsx)$': 'babel-jest',\n  },\n  testMatch: [\n    '**/tests/**/*.spec.(js|jsx|ts|tsx)',\n    '**/?(*.)+(spec|test).[jt]s?(x)',\n  ],\n  testEnvironment: 'jsdom',\n  transformIgnorePatterns: [\n    '/node_modules/',\n  ],\n  testEnvironmentOptions: {\n    customExportConditions: [\"node\", \"node-addons\"],\n },\n moduleNameMapper: {\n  '\\\\.(css|less|sass|scss)$': 'identity-obj-proxy',\n },\n reporters: [\n  \"default\", \n  [\"jest-html-reporter\", {\n    pageTitle: \"Test Report\",\n    outputPath: \"test-report.html\",\n    includeFailureMsg: true,\n    }]\n  ]\n};"
                    }
                },
                {
                    "id": 13,
                    "instruction": "In src open \"babel.config.cjs\" paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "CommonJS",
                        "FormatCode": "module.exports = {\n  presets: [\n    ['@babel/preset-env', { targets: { node: 'current' } }],\n    \"@babel/preset-react\",\n    \"@babel/preset-typescript\"\n  ],\n};",
                        "CopyCode": "module.exports = {\n  presets: [\n    ['@babel/preset-env', { targets: { node: 'current' } }],\n    \"@babel/preset-react\",\n    \"@babel/preset-typescript\"\n  ],\n};"
                    }
                },
                {
                    "id": 14,
                    "instruction": "In src open your \"Package.json\" file. Add the following \"test\" attribute to the \"scripts\" array.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JSON",
                        "FormatCode": "\"test\": \"jest\"",
                        "CopyCode": "\"test\": \"jest\""
                    }
                },
                {
                    "id": 15,
                    "instruction": "Now run your project. Open the link in a browser.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Superhero-Frontend\nnpm run dev",
                        "CopyCode": "cd Superhero-Frontend\nnpm run dev"
                    }
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "Upload Your Project Structures to Github",
                    "desc": "Explains how to setup your remote repositories for this project."
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "Go to [github.com](https://github.com/)."
                },
                {
                    "id": 2,
                    "instruction": "Press the green \"New\" button."
                },
                {
                    "id": 3,
                    "instruction": "In the \"Create a new repository\" just input the following values. Leave everything else default.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "Repository name: Superhero-Rest-Api\nDescription (optional): The Spring Boot Rest-Api backend for the Superhero-Frontend\n\n* Do NOT check Add a README file *\n\n* Scroll down and press the green \\\"Create repository\\\" button *",
                        "CopyCode": "Repository name: Superhero-Rest-Api\nDescription (optional): The Spring Boot Rest-Api backend for the Superhero-Frontend\n\n* Do NOT check Add a README file *\n\n* Scroll down and press the green \\\"Create repository\\\" button *"
                    }
                },
                {
                    "id": 4,
                    "instruction": "Now copy and record the SSH link under \"Quick setup — if you've done this kind of thing before\"."
                },
                {
                    "id": 5,
                    "instruction": "Now go to your terminal and run the following commands. Change \"SSH-LINK\" to the link you copied in step 4.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Superhero-Rest-Api\ngit init\ngit add .\ngit commit -m \"Initial Commit\"\ngit branch -M main\ngit remote add origin SSH-LINK\ngit push -u origin main",
                        "CopyCode": "cd Superhero-Rest-Api\ngit init\ngit add .\ngit commit -m \"Initial Commit\"\ngit branch -M main\ngit remote add origin SSH-LINK\ngit push -u origin main"
                    }
                },
                {
                    "id": 6,
                    "instruction": "Do steps 1 - 5 again for the frontend code. In step 3 use the following values. In step 5 cd into \"Superhero-Frontend\" instead of \"Superhero-Rest-Api\".",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "Values",
                        "FormatCode": "Repository name: Superhero-Frontend\nDescription (optional): This is the frontend React code for the Superhero-Rest-Api",
                        "CopyCode": "Repository name: Superhero-Frontend\nDescription (optional): This is the frontend React code for the Superhero-Rest-Api"
                    }
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "Design Your Database Schema",
                    "desc": "The first thing we'll do is design our database ER and Schema diagrams."
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "We'll be creating a Superhero app. We'll have users that each have their own set of superheros. Each Superhero will have their own individual powers."
                },
                {
                    "id": 2,
                    "instruction": "To make our diagrams we'll use [drawsql.app](https://drawsql.app/). If you don't already have an account, you can register using this [link](https://drawsql.app/register). When prompted to enter a team just write whatever you want."
                },
                {
                    "id": 3,
                    "instruction": "A cool feature of drawsql.app is that you convert SQL to a schema diagram and a schema diagram to SQL."
                },
                {
                    "id": 4,
                    "instruction": "You download the Schema diagram &here&(/download/SuperheroSchema.png) for future reference."
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "Create the Tables in MySQL",
                    "desc": "Explains how to create your databases in MySQL"
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "First login to MySQL by opening your terminal and running the following command. Enter your password when prompted.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "mysql -u root -p",
                        "CopyCode": "mysql -u root -p"
                    }
                },
                {
                    "id": 2,
                    "instruction": "Create your regular database and your test base with these SQL queries",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customsql",
                        "DisplayLang": "SQL",
                        "FormatCode": "CREATE DATABASE superhero_db;\nCREATE DATABASE superhero_test_db;",
                        "CopyCode": "CREATE DATABASE superhero_db;\nCREATE DATABASE superhero_test_db;"
                    }
                },
                {
                    "id": 3,
                    "instruction": "Create your users with the following SQL commands. Replace the values of the strings at the end with your actual passwords. Choose any password you want. I'd recommend keeping them simple and recording them somewhere. However make sure they are over 8 chars long, have mixed case, and special chars.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customsql",
                        "DisplayLang": "SQL",
                        "FormatCode": "CREATE USER 'superhero_user'@'%' IDENTIFIED BY 'your_password_here';\nCREATE USER 'superhero_test_user'@'%' IDENTIFIED BY 'your_password_here';",
                        "CopyCode": "CREATE USER 'superhero_user'@'%' IDENTIFIED BY 'your_password_here';\nCREATE USER 'superhero_test_user'@'%' IDENTIFIED BY 'your_password_here';"
                    }
                },
                {
                    "id": 4,
                    "instruction": "Grant privileges to those users.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customsql",
                        "DisplayLang": "SQL",
                        "FormatCode": "GRANT ALL PRIVILEGES ON superhero_db.* TO 'superhero_user'@'%';\nGRANT ALL PRIVILEGES ON superhero_test_db.* TO 'superhero_test_user'@'%';",
                        "CopyCode": "GRANT ALL PRIVILEGES ON superhero_db.* TO 'superhero_user'@'%';\nGRANT ALL PRIVILEGES ON superhero_test_db.* TO 'superhero_test_user'@'%';"
                    }
                },
                {
                    "id": 5,
                    "instruction": "Apply the privileges after you're done.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customsql",
                        "DisplayLang": "SQL",
                        "FormatCode": "FLUSH PRIVILEGES;",
                        "CopyCode": "FLUSH PRIVILEGES;"
                    }
                },
                {
                    "id": 6,
                    "instruction": "Exit the session using the following command.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "EXIT;",
                        "CopyCode": "EXIT;"
                    }
                },
                {
                    "id": 7,
                    "instruction": "Now we're going to create our tables First we'll sign in as the main \"superhero_user\" and populate superhero_db. Enter your password when prompted.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "mysql -u superhero_user -p superhero_db",
                        "CopyCode": "mysql -u superhero_user -p superhero_db"
                    }
                },
                {
                    "id": 8,
                    "instruction": "Run the following SQL query to create the tables.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customsql",
                        "DisplayLang": "SQL",
                        "FormatCode": "CREATE TABLE users (\n    user_id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    role VARCHAR(50) NOT NULL,\n    username VARCHAR(50) NOT NULL UNIQUE,\n    hashed_password VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE superheroes (\n    super_id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    real_name VARCHAR(100),\n    universe VARCHAR(100),\n    year_created INT,\n    can_delete BOOL\n);\n\n\n-- One-to-One relationship with superhero \nCREATE TABLE images (\n    image_id INT AUTO_INCREMENT PRIMARY KEY,\n    original_filename VARCHAR(255) NOT NULL,\n    stored_filename VARCHAR(255),\n    super_id INT UNIQUE,\n    FOREIGN KEY (super_id) REFERENCES superheroes(super_id) ON DELETE CASCADE\n);\n\n\nCREATE TABLE powers (\n    power_id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(100) NOT NULL\n);\n\n-- Many-to-Many Relationship Between superhero and power\nCREATE TABLE superhero_powers (\n    super_id INT,\n    power_id INT,\n    PRIMARY KEY (super_id, power_id),\n    FOREIGN KEY (super_id) REFERENCES superheroes(super_id) ON DELETE CASCADE,\n    FOREIGN KEY (power_id) REFERENCES powers(power_id) ON DELETE CASCADE\n);\n\n-- Many-to-Many Relationship Between user and superhero\nCREATE TABLE user_superheroes (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    user_id INT,\n    super_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (super_id) REFERENCES superheroes(super_id)\n);",
                        "CopyCode": "CREATE TABLE users (\n    user_id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    role VARCHAR(50) NOT NULL,\n    username VARCHAR(50) NOT NULL UNIQUE,\n    hashed_password VARCHAR(255) NOT NULL\n);\n\n\nCREATE TABLE superheroes (\n    super_id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    real_name VARCHAR(100),\n    universe VARCHAR(100),\n    year_created INT,\n    can_delete BOOL\n);\n\n\n-- One-to-One relationship with superhero \nCREATE TABLE images (\n    image_id INT AUTO_INCREMENT PRIMARY KEY,\n    original_filename VARCHAR(255) NOT NULL,\n    stored_filename VARCHAR(255),\n    super_id INT UNIQUE,\n    FOREIGN KEY (super_id) REFERENCES superheroes(super_id) ON DELETE CASCADE\n);\n\n\nCREATE TABLE powers (\n    power_id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(100) NOT NULL\n);\n\n-- Many-to-Many Relationship Between superhero and power\nCREATE TABLE superhero_powers (\n    super_id INT,\n    power_id INT,\n    PRIMARY KEY (super_id, power_id),\n    FOREIGN KEY (super_id) REFERENCES superheroes(super_id) ON DELETE CASCADE,\n    FOREIGN KEY (power_id) REFERENCES powers(power_id) ON DELETE CASCADE\n);\n\n-- Many-to-Many Relationship Between user and superhero\nCREATE TABLE user_superheroes (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    user_id INT,\n    super_id INT,\n    FOREIGN KEY (user_id) REFERENCES users(user_id),\n    FOREIGN KEY (super_id) REFERENCES superheroes(super_id)\n);\n"
                    }
                },
                {
                    "id": 9,
                    "instruction": "Confirm they were created correctly using the following query. All 4 tables should show in the results.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customsql",
                        "DisplayLang": "SQL",
                        "FormatCode": "SHOW TABLES;",
                        "CopyCode": "SHOW TABLES;"
                    }
                },
                {
                    "id": 10,
                    "instruction": "Now populate the tables. First populate the users table using the following command.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customsql",
                        "DisplayLang": "SQL",
                        "FormatCode": "INSERT INTO users (name, username, role, hashed_password)\nVALUES\n('Admin Guy', 'admin_guy', 'Admin', '$2a$12$rxj5.cEScsyAeUUnU6upyeRcj1CwsSXP42l0gdb.h/v4/KXAnnz/m'),\n('John Doe', 'john_doe', 'User', '$2a$12$DWHkAo3ytuj8hlstojRXruYTA02KAAftr6xoqYH2pdwcF1eFmy2Mm'),\n('Jane Smith', 'jane_smith', 'User', '$2a$12$dL43L1RjnqbcneragmkUNuqIi6gC6fTzg5qYwDoRo8y6lqM3CKS1q'),\n('Michael Jones', 'michael_jones', 'User', '$2a$12$F0n6dy.3jy2sxfcLd5Yb/.loB84RV81nM4K0nI9i1H7cvjRBj31.i'),\n('Emily Clark', 'emily_clark', 'User', '$2a$12$1J7.OsYZumAy5mcQX4vicuEHlUhbVqX3gbkgdIrCWGq0oWwJvleWi'),\n('David Brown', 'david_brown', 'User', '$2a$12$1/EPkc9NBTWXgO4g5cxTOuKD//YC6Tt9BlWTBLODaTAkG4dYSE4Ha'),\n('Sarah Davis', 'sarah_davis', 'User', '$2a$12$AycUkVdwbf9YnGi3MwkDeu2ZLe4hK7LcgiV5u42JzcUr8l8e/gnOm'),\n('Chris Wilson', 'chris_wilson', 'User', '$2a$12$8n2964bU2TGWZMD3rf8N5eE9Tmzo8qTHt6hb2Sznq0IOZnPjgurv.'),\n('Lisa Martin', 'lisa_martin', 'User', '$2a$12$mJx0fLrjia1vTvJMIMc2me4/QPtUwIc4SlPg/irQeQlSQznC7Wqve'),\n('Daniel Moore', 'daniel_moore', 'User', '$2a$12$ltbfdxcPs49HHlb70.vcaOBwyxwT8w9JJSzJKG0JfnjQl8zpqr2BK'),\n('Laura Taylor', 'laura_taylor', 'User', '$2a$12$X5V.05dQN7ZNMhjK8/tHde5q3162IAGpqsrHe9WPbJmDqiejc/aDW');",
                        "CopyCode": "INSERT INTO users (name, username, role, hashed_password)\nVALUES\n('Admin Guy', 'admin_guy', 'Admin', '$2a$12$rxj5.cEScsyAeUUnU6upyeRcj1CwsSXP42l0gdb.h/v4/KXAnnz/m'),\n('John Doe', 'john_doe', 'User', '$2a$12$DWHkAo3ytuj8hlstojRXruYTA02KAAftr6xoqYH2pdwcF1eFmy2Mm'),\n('Jane Smith', 'jane_smith', 'User', '$2a$12$dL43L1RjnqbcneragmkUNuqIi6gC6fTzg5qYwDoRo8y6lqM3CKS1q'),\n('Michael Jones', 'michael_jones', 'User', '$2a$12$F0n6dy.3jy2sxfcLd5Yb/.loB84RV81nM4K0nI9i1H7cvjRBj31.i'),\n('Emily Clark', 'emily_clark', 'User', '$2a$12$1J7.OsYZumAy5mcQX4vicuEHlUhbVqX3gbkgdIrCWGq0oWwJvleWi'),\n('David Brown', 'david_brown', 'User', '$2a$12$1/EPkc9NBTWXgO4g5cxTOuKD//YC6Tt9BlWTBLODaTAkG4dYSE4Ha'),\n('Sarah Davis', 'sarah_davis', 'User', '$2a$12$AycUkVdwbf9YnGi3MwkDeu2ZLe4hK7LcgiV5u42JzcUr8l8e/gnOm'),\n('Chris Wilson', 'chris_wilson', 'User', '$2a$12$8n2964bU2TGWZMD3rf8N5eE9Tmzo8qTHt6hb2Sznq0IOZnPjgurv.'),\n('Lisa Martin', 'lisa_martin', 'User', '$2a$12$mJx0fLrjia1vTvJMIMc2me4/QPtUwIc4SlPg/irQeQlSQznC7Wqve'),\n('Daniel Moore', 'daniel_moore', 'User', '$2a$12$ltbfdxcPs49HHlb70.vcaOBwyxwT8w9JJSzJKG0JfnjQl8zpqr2BK'),\n('Laura Taylor', 'laura_taylor', 'User', '$2a$12$X5V.05dQN7ZNMhjK8/tHde5q3162IAGpqsrHe9WPbJmDqiejc/aDW');\n"
                    }
                },
                {
                    "id": 11,
                    "instruction": "Now the superheroes table.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customsql",
                        "DisplayLang": "SQL",
                        "FormatCode": "INSERT INTO superheroes (name, real_name, universe, year_created, can_delete)\nVALUES\n    ('Hulk', 'Bruce Banner', 'Marvel', 1962, false),\n    ('Iron Man', 'Tony Stark', 'Marvel', 1963, false),\n    ('Thor', 'Thor Odinson', 'Marvel', 1962, false),\n    ('Wolverine', 'Logan', 'Marvel', 1974, false),\n    ('Spider-Man', 'Peter Parker', 'Marvel', 1962, false),\n    ('Quicksilver', 'Pietro Maximoff', 'Marvel', 1964, false),\n    ('Batman', 'Bruce Wayne', 'DC', 1939, false),\n    ('Flash', 'Barry Allen', 'DC', 1956, false),\n    ('Green Lantern', 'Hal Jordan', 'DC', 1959, false),\n    ('Darkseid', 'Uxas', 'DC', 1970, false);",
                        "CopyCode": "INSERT INTO superheroes (name, real_name, universe, year_created, can_delete)\nVALUES\n    ('Hulk', 'Bruce Banner', 'Marvel', 1962, false),\n    ('Iron Man', 'Tony Stark', 'Marvel', 1963, false),\n    ('Thor', 'Thor Odinson', 'Marvel', 1962, false),\n    ('Wolverine', 'Logan', 'Marvel', 1974, false),\n    ('Spider-Man', 'Peter Parker', 'Marvel', 1962, false),\n    ('Quicksilver', 'Pietro Maximoff', 'Marvel', 1964, false),\n    ('Batman', 'Bruce Wayne', 'DC', 1939, false),\n    ('Flash', 'Barry Allen', 'DC', 1956, false),\n    ('Green Lantern', 'Hal Jordan', 'DC', 1959, false),\n    ('Darkseid', 'Uxas', 'DC', 1970, false);\n"
                    }
                },
                {
                    "id": 12,
                    "instruction": "Populate the images table. The stored filenames are currently null, but we'll upload them later and update the table.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customsql",
                        "DisplayLang": "SQL",
                        "FormatCode": "INSERT INTO images (original_filename, stored_filename, super_id)\nVALUES\n    ('Hulk.jpg', NULL, (SELECT super_id FROM superheroes WHERE name = 'Hulk')),\n    ('IronMan.jpg', NULL, (SELECT super_id FROM superheroes WHERE name = 'Iron Man')),\n    ('Thor.jpg', NULL, (SELECT super_id FROM superheroes WHERE name = 'Thor')),\n    ('Wolverine.jpg', NULL, (SELECT super_id FROM superheroes WHERE name = 'Wolverine')),\n    ('Spiderman.jpg', NULL, (SELECT super_id FROM superheroes WHERE name = 'Spider-Man')),\n    ('Quicksilver.jpg', NULL, (SELECT super_id FROM superheroes WHERE name = 'Quicksilver')),\n    ('Batman.jpg', NULL, (SELECT super_id FROM superheroes WHERE name = 'Batman')),\n    ('Flash.jpg', NULL, (SELECT super_id FROM superheroes WHERE name = 'Flash')),\n    ('GreenLantern.jpg', NULL, (SELECT super_id FROM superheroes WHERE name = 'Green Lantern')),\n    ('Darkseid.jpg', NULL, (SELECT super_id FROM superheroes WHERE name = 'Darkseid'));",
                        "CopyCode": "INSERT INTO images (original_filename, stored_filename, super_id)\nVALUES\n    ('Hulk.jpg', NULL, (SELECT super_id FROM superheroes WHERE name = 'Hulk')),\n    ('IronMan.jpg', NULL, (SELECT super_id FROM superheroes WHERE name = 'Iron Man')),\n    ('Thor.jpg', NULL, (SELECT super_id FROM superheroes WHERE name = 'Thor')),\n    ('Wolverine.jpg', NULL, (SELECT super_id FROM superheroes WHERE name = 'Wolverine')),\n    ('Spiderman.jpg', NULL, (SELECT super_id FROM superheroes WHERE name = 'Spider-Man')),\n    ('Quicksilver.jpg', NULL, (SELECT super_id FROM superheroes WHERE name = 'Quicksilver')),\n    ('Batman.jpg', NULL, (SELECT super_id FROM superheroes WHERE name = 'Batman')),\n    ('Flash.jpg', NULL, (SELECT super_id FROM superheroes WHERE name = 'Flash')),\n    ('GreenLantern.jpg', NULL, (SELECT super_id FROM superheroes WHERE name = 'Green Lantern')),\n    ('Darkseid.jpg', NULL, (SELECT super_id FROM superheroes WHERE name = 'Darkseid'));\n"
                    }
                },
                {
                    "id": 13,
                    "instruction": "Populate the powers table.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customsql",
                        "DisplayLang": "SQL",
                        "FormatCode": "INSERT INTO powers (name)\nVALUES\n('Fly'),\n('Speed'),\n('Healing'),\n('Strength'),\n('Human')\nON DUPLICATE KEY UPDATE name=name;",
                        "CopyCode": "INSERT INTO powers (name)\nVALUES\n('Fly'),\n('Speed'),\n('Healing'),\n('Strength'),\n('Human')\nON DUPLICATE KEY UPDATE name=name;\n"
                    }
                },
                {
                    "id": 14,
                    "instruction": "Populate the superhero_powers table.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customsql",
                        "DisplayLang": "SQL",
                        "FormatCode": "-- Hulk\nINSERT INTO superhero_powers (super_id, power_id)\nSELECT s.super_id, p.power_id FROM superheroes s, powers p\nWHERE s.name = 'Hulk' AND p.name IN ('Healing', 'Speed', 'Strength');\n\n-- Iron Man\nINSERT INTO superhero_powers (super_id, power_id)\nSELECT s.super_id, p.power_id FROM superheroes s, powers p\nWHERE s.name = 'Iron Man' AND p.name IN ('Fly', 'Human');\n\n-- Thor\nINSERT INTO superhero_powers (super_id, power_id)\nSELECT s.super_id, p.power_id FROM superheroes s, powers p\nWHERE s.name = 'Thor' AND p.name IN ('Fly', 'Strength');\n\n-- Wolverine\nINSERT INTO superhero_powers (super_id, power_id)\nSELECT s.super_id, p.power_id FROM superheroes s, powers p\nWHERE s.name = 'Wolverine' AND p.name IN ('Human', 'Healing');\n\n-- Spider-Man\nINSERT INTO superhero_powers (super_id, power_id)\nSELECT s.super_id, p.power_id FROM superheroes s, powers p\nWHERE s.name = 'Spider-Man' AND p.name IN ('Fly', 'Human', 'Strength');\n\n-- Quicksilver\nINSERT INTO superhero_powers (super_id, power_id)\nSELECT s.super_id, p.power_id FROM superheroes s, powers p\nWHERE s.name = 'Quicksilver' AND p.name = 'Speed';\n\n-- Batman\nINSERT INTO superhero_powers (super_id, power_id)\nSELECT s.super_id, p.power_id FROM superheroes s, powers p\nWHERE s.name = 'Batman' AND p.name IN ('Strength', 'Human');\n\n-- Flash\nINSERT INTO superhero_powers (super_id, power_id)\nSELECT s.super_id, p.power_id FROM superheroes s, powers p\nWHERE s.name = 'Flash' AND p.name IN ('Speed', 'Human');\n\n-- Green Lantern\nINSERT INTO superhero_powers (super_id, power_id)\nSELECT s.super_id, p.power_id FROM superheroes s, powers p\nWHERE s.name = 'Green Lantern' AND p.name IN ('Fly', 'Human');\n\n-- Darkseid\nINSERT INTO superhero_powers (super_id, power_id)\nSELECT s.super_id, p.power_id FROM superheroes s, powers p\nWHERE s.name = 'Darkseid' AND p.name IN ('Healing', 'Speed', 'Strength');",
                        "CopyCode": "-- Hulk\nINSERT INTO superhero_powers (super_id, power_id)\nSELECT s.super_id, p.power_id FROM superheroes s, powers p\nWHERE s.name = 'Hulk' AND p.name IN ('Healing', 'Speed', 'Strength');\n\n-- Iron Man\nINSERT INTO superhero_powers (super_id, power_id)\nSELECT s.super_id, p.power_id FROM superheroes s, powers p\nWHERE s.name = 'Iron Man' AND p.name IN ('Fly', 'Human');\n\n-- Thor\nINSERT INTO superhero_powers (super_id, power_id)\nSELECT s.super_id, p.power_id FROM superheroes s, powers p\nWHERE s.name = 'Thor' AND p.name IN ('Fly', 'Strength');\n\n-- Wolverine\nINSERT INTO superhero_powers (super_id, power_id)\nSELECT s.super_id, p.power_id FROM superheroes s, powers p\nWHERE s.name = 'Wolverine' AND p.name IN ('Human', 'Healing');\n\n-- Spider-Man\nINSERT INTO superhero_powers (super_id, power_id)\nSELECT s.super_id, p.power_id FROM superheroes s, powers p\nWHERE s.name = 'Spider-Man' AND p.name IN ('Fly', 'Human', 'Strength');\n\n-- Quicksilver\nINSERT INTO superhero_powers (super_id, power_id)\nSELECT s.super_id, p.power_id FROM superheroes s, powers p\nWHERE s.name = 'Quicksilver' AND p.name = 'Speed';\n\n-- Batman\nINSERT INTO superhero_powers (super_id, power_id)\nSELECT s.super_id, p.power_id FROM superheroes s, powers p\nWHERE s.name = 'Batman' AND p.name IN ('Strength', 'Human');\n\n-- Flash\nINSERT INTO superhero_powers (super_id, power_id)\nSELECT s.super_id, p.power_id FROM superheroes s, powers p\nWHERE s.name = 'Flash' AND p.name IN ('Speed', 'Human');\n\n-- Green Lantern\nINSERT INTO superhero_powers (super_id, power_id)\nSELECT s.super_id, p.power_id FROM superheroes s, powers p\nWHERE s.name = 'Green Lantern' AND p.name IN ('Fly', 'Human');\n\n-- Darkseid\nINSERT INTO superhero_powers (super_id, power_id)\nSELECT s.super_id, p.power_id FROM superheroes s, powers p\nWHERE s.name = 'Darkseid' AND p.name IN ('Healing', 'Speed', 'Strength');\n"
                    }
                },
                {
                    "id": 15,
                    "instruction": "Populate the user_superheroes table.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customsql",
                        "DisplayLang": "SQL",
                        "FormatCode": "-- john_doe's superheroes (user_id 2)\nINSERT INTO user_superheroes (user_id, super_id)\nSELECT u.user_id, s.super_id FROM users u, superheroes s\nWHERE u.username = 'john_doe' AND s.name IN ('Hulk', 'Iron Man', 'Thor', 'Flash', 'Batman', 'Darkseid');\n\n-- jane_smith's superheroes (user_id 3)\nINSERT INTO user_superheroes (user_id, super_id)\nSELECT u.user_id, s.super_id FROM users u, superheroes s\nWHERE u.username = 'jane_smith' AND s.name IN ('Spider-Man', 'Quicksilver', 'Green Lantern');\n\n-- michael_jones's superheroes (user_id 4)\nINSERT INTO user_superheroes (user_id, super_id)\nSELECT u.user_id, s.super_id FROM users u, superheroes s\nWHERE u.username = 'michael_jones' AND s.name IN ('Wolverine', 'Quicksilver');\n\n-- emily_clark's superheroes (user_id 5)\nINSERT INTO user_superheroes (user_id, super_id)\nSELECT u.user_id, s.super_id FROM users u, superheroes s\nWHERE u.username = 'emily_clark' AND s.name IN ('Hulk', 'Green Lantern', 'Flash', 'Thor');\n\n-- david_brown's superheroes (user_id 6)\nINSERT INTO user_superheroes (user_id, super_id)\nSELECT u.user_id, s.super_id FROM users u, superheroes s\nWHERE u.username = 'david_brown' AND s.name IN ('Thor', 'Spider-Man', 'Darkseid');\n\n-- sarah_davis's superheroes (user_id 7)\nINSERT INTO user_superheroes (user_id, super_id)\nSELECT u.user_id, s.super_id FROM users u, superheroes s\nWHERE u.username = 'sarah_davis' AND s.name IN ('Iron Man', 'Flash', 'Wolverine', 'Thor');\n\n-- chris_wilson's superheroes (user_id 8)\nINSERT INTO user_superheroes (user_id, super_id)\nSELECT u.user_id, s.super_id FROM users u, superheroes s\nWHERE u.username = 'chris_wilson' AND s.name IN ('Batman', 'Hulk', 'Spider-Man');\n\n-- lisa_martin's superheroes (user_id 9)\nINSERT INTO user_superheroes (user_id, super_id)\nSELECT u.user_id, s.super_id FROM users u, superheroes s\nWHERE u.username = 'lisa_martin' AND s.name IN ('Thor', 'Iron Man', 'Batman');\n\n-- daniel_moore's superheroes (user_id 10)\nINSERT INTO user_superheroes (user_id, super_id)\nSELECT u.user_id, s.super_id FROM users u, superheroes s\nWHERE u.username = 'daniel_moore' AND s.name IN ('Green Lantern', 'Iron Man', 'Flash');\n\n-- laura_taylor's superheroes (user_id 11)\nINSERT INTO user_superheroes (user_id, super_id)\nSELECT u.user_id, s.super_id FROM users u, superheroes s\nWHERE u.username = 'laura_taylor' AND s.name IN ('Flash', 'Darkseid', 'Hulk');",
                        "CopyCode": "-- john_doe's superheroes (user_id 2)\nINSERT INTO user_superheroes (user_id, super_id)\nSELECT u.user_id, s.super_id FROM users u, superheroes s\nWHERE u.username = 'john_doe' AND s.name IN ('Hulk', 'Iron Man', 'Thor', 'Flash', 'Batman', 'Darkseid');\n\n-- jane_smith's superheroes (user_id 3)\nINSERT INTO user_superheroes (user_id, super_id)\nSELECT u.user_id, s.super_id FROM users u, superheroes s\nWHERE u.username = 'jane_smith' AND s.name IN ('Spider-Man', 'Quicksilver', 'Green Lantern');\n\n-- michael_jones's superheroes (user_id 4)\nINSERT INTO user_superheroes (user_id, super_id)\nSELECT u.user_id, s.super_id FROM users u, superheroes s\nWHERE u.username = 'michael_jones' AND s.name IN ('Wolverine', 'Quicksilver');\n\n-- emily_clark's superheroes (user_id 5)\nINSERT INTO user_superheroes (user_id, super_id)\nSELECT u.user_id, s.super_id FROM users u, superheroes s\nWHERE u.username = 'emily_clark' AND s.name IN ('Hulk', 'Green Lantern', 'Flash', 'Thor');\n\n-- david_brown's superheroes (user_id 6)\nINSERT INTO user_superheroes (user_id, super_id)\nSELECT u.user_id, s.super_id FROM users u, superheroes s\nWHERE u.username = 'david_brown' AND s.name IN ('Thor', 'Spider-Man', 'Darkseid');\n\n-- sarah_davis's superheroes (user_id 7)\nINSERT INTO user_superheroes (user_id, super_id)\nSELECT u.user_id, s.super_id FROM users u, superheroes s\nWHERE u.username = 'sarah_davis' AND s.name IN ('Iron Man', 'Flash', 'Wolverine', 'Thor');\n\n-- chris_wilson's superheroes (user_id 8)\nINSERT INTO user_superheroes (user_id, super_id)\nSELECT u.user_id, s.super_id FROM users u, superheroes s\nWHERE u.username = 'chris_wilson' AND s.name IN ('Batman', 'Hulk', 'Spider-Man');\n\n-- lisa_martin's superheroes (user_id 9)\nINSERT INTO user_superheroes (user_id, super_id)\nSELECT u.user_id, s.super_id FROM users u, superheroes s\nWHERE u.username = 'lisa_martin' AND s.name IN ('Thor', 'Iron Man', 'Batman');\n\n-- daniel_moore's superheroes (user_id 10)\nINSERT INTO user_superheroes (user_id, super_id)\nSELECT u.user_id, s.super_id FROM users u, superheroes s\nWHERE u.username = 'daniel_moore' AND s.name IN ('Green Lantern', 'Iron Man', 'Flash');\n\n-- laura_taylor's superheroes (user_id 11)\nINSERT INTO user_superheroes (user_id, super_id)\nSELECT u.user_id, s.super_id FROM users u, superheroes s\nWHERE u.username = 'laura_taylor' AND s.name IN ('Flash', 'Darkseid', 'Hulk');\n"
                    }
                },
                {
                    "id": 16,
                    "instruction": "Use the following SQL queries to see the values of the tables to ensure they've been populated correctly.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customsql",
                        "DisplayLang": "SQL",
                        "FormatCode": "SELECT * FROM users;\nSELECT * FROM superheroes;\nSELECT * FROM powers;\nSELECT * FROM images;\nSELECT * FROM user_superheroes;\nSELECT * FROM superhero_powers;",
                        "CopyCode": "SELECT * FROM users;\nSELECT * FROM superheroes;\nSELECT * FROM powers;\nSELECT * FROM images;\nSELECT * FROM user_superheroes;\nSELECT * FROM superhero_powers;\n"
                    }
                },
                {
                    "id": 17,
                    "instruction": "Now exit the database using the following command.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "exit;",
                        "CopyCode": "exit;"
                    }
                },
                {
                    "id": 18,
                    "instruction": "Now we're going to create the tables for our test database. Run the following command to sign in as the test user. Enter your password when prompted.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "mysql -u superhero_test_user -p superhero_test_db",
                        "CopyCode": "mysql -u superhero_test_user -p superhero_test_db"
                    }
                },
                {
                    "id": 19,
                    "instruction": "Create the exact same tables you did in step 8. Its the same SQL query."
                },
                {
                    "id": 20,
                    "instruction": "Populate the tables using the exact same data from steps 8-15. Use the same INSERT sql statements."
                },
                {
                    "id": 21,
                    "instruction": "Verify the tables were created correctly using the following query.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customsql",
                        "DisplayLang": "SQL",
                        "FormatCode": "SHOW TABLES;",
                        "CopyCode": "SHOW TABLES;"
                    }
                },
                {
                    "id": 22,
                    "instruction": "Congratulations! You should now have the MySQL Database setup."
                },
                {
                    "id": 23,
                    "instruction": "If you need to drop the databases and recreate them, use the following commands. Enter your password when prompted.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customsql",
                        "DisplayLang": "SQL",
                        "FormatCode": "mysql -u root -p\n\nDROP DATABASE superhero_db;\nDROP DATABASE superhero_test_db;\nSHOW DATABASES;\n\nCREATE DATABASE superhero_db;\nCREATE DATABASE superhero_test_db;\n\nexit",
                        "CopyCode": "mysql -u root -p\n\nDROP DATABASE superhero_db;\nDROP DATABASE superhero_test_db;\nSHOW DATABASES;\n\nCREATE DATABASE superhero_db;\nCREATE DATABASE superhero_test_db;\n\nexit"
                    }
                },
                {
                    "id": 24,
                    "instruction": "If you need to drop all the tables and repopulate them, login to your database then run the following commands.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customsql",
                        "DisplayLang": "SQL",
                        "FormatCode": "# Login with one of your databases\nmysql -u superhero_user -p superhero_db\nmysql -u superhero_test_user -p superhero_test_db\n\nDROP TABLE superhero_powers;\nDROP TABLE images;\nDROP TABLE user_superheroes;\nDROP TABLE superheroes;\nDROP TABLE powers;\nDROP TABLE users;\n",
                        "CopyCode": "# Login with one of your databases\nmysql -u superhero_user -p superhero_db\nmysql -u superhero_test_user -p superhero_test_db\n\nDROP TABLE superhero_powers;\nDROP TABLE images;\nDROP TABLE user_superheroes;\nDROP TABLE superheroes;\nDROP TABLE powers;\nDROP TABLE users;\n"
                    }
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "Create an S3 Bucket on AWS",
                    "desc": "We're going to create an S3 Bucket on AWS to store our images in the cloud."
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "Before doing any of this make sure you've completed the &How to Setup an Amazon Web Services Account&[AWSLink] instruction set."
                },
                {
                    "id": 2,
                    "instruction": "Go to the S3 console dashboard using this [link](https://s3.console.aws.amazon.com/s3/home). Sign in using root user email."
                },
                {
                    "id": 3,
                    "instruction": "Once you've signed and go to the S3 console, press the orange \"Create bucket\" button."
                },
                {
                    "id": 4,
                    "instruction": "Note that I'm getting a lot of this information from this [video](https://youtu.be/tSfdQJvTKmk?si=SA13hqkvsrkTImr2)."
                },
                {
                    "id": 5,
                    "instruction": "In the \"Create bucket\" form, enter the following values. Leave everything that's not specified as default.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "AWS Config",
                        "FormatCode": "General purpose\nBucket name: superhero-pics\n\n\n* Scroll down * \n\n\n\nBlock Public Access settings for this bucket\n\n* Uncheck the \\\"Block all public access box\\\" *\n\n* In the new yellow section check the \\\"I acknowledge that the current settings...\\\" box \n\n\n\n* Scroll Down *\n\n\nPress the \\\"Create bucket\\\" button.",
                        "CopyCode": "General purpose\nBucket name: superhero-pics\n\n\n* Scroll down * \n\n\n\nBlock Public Access settings for this bucket\n\n* Uncheck the \\\"Block all public access box\\\" *\n\n* In the new yellow section check the \\\"I acknowledge that the current settings...\\\" box \n\n\n\n* Scroll Down *\n\n\nPress the \\\"Create bucket\\\" button."
                    }
                },
                {
                    "id": 6,
                    "instruction": "You'll be taken to new page. In the \"General purpose buckets\" section press on the \"superhero-pics\" link in the Name column of the table."
                },
                {
                    "id": 7,
                    "instruction": "You'll be taken to new page and be on the \"Objects\" tab. Click on the \"Permissions\" tab to the right of it."
                },
                {
                    "id": 8,
                    "instruction": "Scroll down a little to the \"Bucket policy\" section. Press the \"Edit\" button on the top-right."
                },
                {
                    "id": 9,
                    "instruction": "In the Policy text area paste the following data. Then scroll down and press the \"Save changes\" button.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JSON",
                        "FormatCode": "{\n    \"Version\": \"2012-10-17\",\n    \"Id\": \"Policy1657016724405\",\n    \"Statement\": [\n        {\n            \"Sid\": \"AllowS3PutObject\",\n            \"Effect\": \"Allow\",\n            \"Principal\": \"*\",\n            \"Action\": \"s3:GetObject\",\n            \"Resource\": \"arn:aws:s3:::superhero-pics/*\"\n        }\n    ]\n}",
                        "CopyCode": "{\n    \"Version\": \"2012-10-17\",\n    \"Id\": \"Policy1657016724405\",\n    \"Statement\": [\n        {\n            \"Sid\": \"AllowS3PutObject\",\n            \"Effect\": \"Allow\",\n            \"Principal\": \"*\",\n            \"Action\": \"s3:GetObject\",\n            \"Resource\": \"arn:aws:s3:::superhero-pics/*\"\n        }\n    ]\n}"
                    }
                },
                {
                    "id": 10,
                    "instruction": "Congratulations! Your S3 bucket should now be created."
                },
                {
                    "id": 11,
                    "instruction": "Now we'll make a Python Script to Upload our Images about updated our database."
                },
                {
                    "id": 12,
                    "instruction": "Before doing any of this make sure you've completed the &How to Setup an Amazon Web Services Account&[AWSLink] instruction set."
                },
                {
                    "id": 13,
                    "instruction": "Open your terminal and install the boto3 library.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "pip3 install boto3\npip3 install mysql-connector-python\npip3 install Pillow",
                        "CopyCode": "pip3 install boto3\npip3 install mysql-connector-python\npip3 install Pillow"
                    }
                },
                {
                    "id": 14,
                    "instruction": "Create the following directory.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "mkdir superhero_aws_pics",
                        "CopyCode": "mkdir superhero_aws_pics"
                    }
                },
                {
                    "id": 15,
                    "instruction": "Download the following zip folder which contains the images. This is the folder: &superhero_pics.zip&(/download/superhero_pics.zip)."
                },
                {
                    "id": 16,
                    "instruction": "Setup your superhero_aws_pics folder.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "mv ./Downloads/superhero_pics.zip superhero_aws_pics\ncd superhero_aws_pics \nunzip superhero_pics.zip\nrm -rf __MACOSX\nrm superhero_pics.zip\ntouch upload_to_aws.py\ntouch delete_pics.py\nmkdir resized_pics",
                        "CopyCode": "mv ./Downloads/superhero_pics.zip superhero_aws_pics\ncd superhero_aws_pics \nunzip superhero_pics.zip\nrm -rf __MACOSX\nrm superhero_pics.zip\ntouch upload_to_aws.py\ntouch delete_pics.py\nmkdir resized_pics"
                    }
                },
                {
                    "id": 17,
                    "instruction": "Install this brew library. We'll use it to fix images later if necessary.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "brew install imagemagick",
                        "CopyCode": "brew install imagemagick"
                    }
                },
                {
                    "id": 18,
                    "instruction": "Open your \"superhero_aws_pics\" in VSCode. Then paste the following code into the \"upload_to_aws.py\" file. Replace \"YOUR_MYSQL_SUPERHERO_DB_PASSWORD\" and the \"YOUR_MYSQL_SUPERHERO_TEST_DB_PASSWORD\" with your actual passwords.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "import os\nfrom PIL import Image\nimport mysql.connector\nimport boto3\nimport uuid\n\ndef get_file_paths(folder_path) -> list[str]:\n    return [ os.path.join(folder_path, file_name) for file_name in os.listdir(folder_path) ]\n\n\ndef shrink_images():\n    file_paths = get_file_paths('superhero_pics')\n\n    for file_path in file_paths:\n        img = Image.open(file_path)\n\n        base_width = 800\n        width_percent = (base_width / float(img.size[0]))\n        new_height = int((float(img.size[1]) * float(width_percent)))\n\n        resized_img = img.resize((base_width, new_height), Image.LANCZOS)\n\n        name = os.path.basename(file_path).strip()\n\n        resized_img.save(f'./resized_pics/{name}')\n\n\ndef upload_images_s3(mysql_creds: list) -> list[str]:\n\n    s3 = boto3.resource('s3')\n\n    shrink_images()\n\n    creds = mysql_creds[0]\n\n    connection = mysql.connector.connect(\n            host='localhost',\n            user=creds['username'],\n            password=creds['password'],\n            database=creds['database']\n        )\n\n    cursor = connection.cursor()\n\n    cursor.execute(\"SELECT original_filename FROM images;\")\n    results = cursor.fetchall()\n\n    file_paths = [f'resized_pics/{result[0]}' for result in results]\n\n    print(file_paths)\n\n    connection.commit()\n    \n    cursor.close()\n    connection.close()\n    \n\n    new_filenames = []\n\n    for file_path in file_paths:\n        file_name = file_path.replace(\"resized_pics/\", \"\")\n\n        # Generates a new unique name for the file and keeps the same extension\n        new_filename = uuid.uuid4().hex + \".\" + file_name.rsplit(\".\", 1)[1].lower()\n\n        superhero_bucket = s3.Bucket(\"superhero-pics\")\n\n        # Open the file in binary mode so it can be uploaded \n        with open(file_path, 'rb') as file:\n            superhero_bucket.upload_fileobj(file, new_filename)\n\n        print(f\"Uploaded {file_name} as {new_filename}\")\n\n        new_filenames.append(new_filename)\n    \n    return new_filenames\n\n\ndef update_databases(mysql_creds: list):\n    aws_file_names = upload_images_s3(mysql_creds)\n\n    for creds in mysql_creds:\n\n        print(f\"\\nUpdating MySQL Database - \\\"{creds['database']}\\\"\")\n\n        connection = mysql.connector.connect(\n            host='localhost',\n            user=creds['username'],\n            password=creds['password'],\n            database=creds['database']\n        )\n\n        cursor = connection.cursor()\n\n        cursor.execute(\"SELECT name FROM superheroes;\")\n        results = cursor.fetchall()\n\n        superhero_names = [row[0] for row in results]\n        superhero_dict = dict(zip(superhero_names, aws_file_names))\n        \n        \n        for superhero_name, stored_filename in superhero_dict.items():\n            update_query = \"\"\"\n                UPDATE images\n                SET stored_filename = %s\n                WHERE super_id = (SELECT super_id FROM superheroes WHERE name = %s);\n            \"\"\"\n\n            cursor.execute(update_query, (stored_filename, superhero_name))\n\n            print(\"MySQL database stored_filename updated successfully!\")\n\n\n        connection.commit()\n\n        cursor.close()\n        connection.close()\n\n\n\nmysql_creds = [\n    {\n        \"username\": \"superhero_user\",\n        \"password\": \"YOUR_MYSQL_SUPERHERO_DB_PASSWORD\",\n        \"database\": \"superhero_db\"\n    },\n    {\n        \"username\": \"superhero_test_user\",\n        \"password\": \"YOUR_MYSQL_SUPERHERO_TEST_DB_PASSWORD\",\n        \"database\": \"superhero_test_db\"\n    }\n]\n\nupdate_databases(mysql_creds)",
                        "CopyCode": "import os\nfrom PIL import Image\nimport mysql.connector\nimport boto3\nimport uuid\n\ndef get_file_paths(folder_path) -> list[str]:\n    return [ os.path.join(folder_path, file_name) for file_name in os.listdir(folder_path) ]\n\n\ndef shrink_images():\n    file_paths = get_file_paths('superhero_pics')\n\n    for file_path in file_paths:\n        img = Image.open(file_path)\n\n        base_width = 800\n        width_percent = (base_width / float(img.size[0]))\n        new_height = int((float(img.size[1]) * float(width_percent)))\n\n        resized_img = img.resize((base_width, new_height), Image.LANCZOS)\n\n        name = os.path.basename(file_path).strip()\n\n        resized_img.save(f'./resized_pics/{name}')\n\n\ndef upload_images_s3(mysql_creds: list) -> list[str]:\n\n    s3 = boto3.resource('s3')\n\n    shrink_images()\n\n    creds = mysql_creds[0]\n\n    connection = mysql.connector.connect(\n            host='localhost',\n            user=creds['username'],\n            password=creds['password'],\n            database=creds['database']\n        )\n\n    cursor = connection.cursor()\n\n    cursor.execute(\"SELECT original_filename FROM images;\")\n    results = cursor.fetchall()\n\n    file_paths = [f'resized_pics/{result[0]}' for result in results]\n\n    print(file_paths)\n\n    connection.commit()\n    \n    cursor.close()\n    connection.close()\n    \n\n    new_filenames = []\n\n    for file_path in file_paths:\n        file_name = file_path.replace(\"resized_pics/\", \"\")\n\n        # Generates a new unique name for the file and keeps the same extension\n        new_filename = uuid.uuid4().hex + \".\" + file_name.rsplit(\".\", 1)[1].lower()\n\n        superhero_bucket = s3.Bucket(\"superhero-pics\")\n\n        # Open the file in binary mode so it can be uploaded \n        with open(file_path, 'rb') as file:\n            superhero_bucket.upload_fileobj(file, new_filename)\n\n        print(f\"Uploaded {file_name} as {new_filename}\")\n\n        new_filenames.append(new_filename)\n    \n    return new_filenames\n\n\ndef update_databases(mysql_creds: list):\n    aws_file_names = upload_images_s3(mysql_creds)\n\n    for creds in mysql_creds:\n\n        print(f\"\\nUpdating MySQL Database - \\\"{creds['database']}\\\"\")\n\n        connection = mysql.connector.connect(\n            host='localhost',\n            user=creds['username'],\n            password=creds['password'],\n            database=creds['database']\n        )\n\n        cursor = connection.cursor()\n\n        cursor.execute(\"SELECT name FROM superheroes;\")\n        results = cursor.fetchall()\n\n        superhero_names = [row[0] for row in results]\n        superhero_dict = dict(zip(superhero_names, aws_file_names))\n        \n        \n        for superhero_name, stored_filename in superhero_dict.items():\n            update_query = \"\"\"\n                UPDATE images\n                SET stored_filename = %s\n                WHERE super_id = (SELECT super_id FROM superheroes WHERE name = %s);\n            \"\"\"\n\n            cursor.execute(update_query, (stored_filename, superhero_name))\n\n            print(\"MySQL database stored_filename updated successfully!\")\n\n\n        connection.commit()\n\n        cursor.close()\n        connection.close()\n\n\n\nmysql_creds = [\n    {\n        \"username\": \"superhero_user\",\n        \"password\": \"YOUR_MYSQL_SUPERHERO_DB_PASSWORD\",\n        \"database\": \"superhero_db\"\n    },\n    {\n        \"username\": \"superhero_test_user\",\n        \"password\": \"YOUR_MYSQL_SUPERHERO_TEST_DB_PASSWORD\",\n        \"database\": \"superhero_test_db\"\n    }\n]\n\nupdate_databases(mysql_creds)"
                    }
                },
                {
                    "id": 19,
                    "instruction": "Paste the following code into the \"delete_pics.py\" file. You can run this file to clear all pictures in an S3 bucket.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "import boto3\n\ndef delete_all_files_in_bucket(bucket_name):\n    s3 = boto3.client('s3')\n    \n    objects_to_delete = s3.list_objects_v2(Bucket=bucket_name)\n\n    if 'Contents' in objects_to_delete:\n\n        object_keys = [{'Key': obj['Key']} for obj in objects_to_delete['Contents']]\n\n        s3.delete_objects(\n            Bucket=bucket_name,\n            Delete={\n                'Objects': object_keys\n            }\n        )\n\n        print(f\"Deleted {len(object_keys)} files from {bucket_name}\")\n    else:\n        print(f\"The bucket {bucket_name} is already empty.\")\n\n\ndef get_valid_input():\n    while True:\n        try:\n            print(\"\\nWhich buckets content do you want to delete?\")\n            print(\"1. superhero-pics\")\n            print(\"2. prod-superhero-pics\")\n            user_input = int(input(\"\\nEnter 1 or 2: \"))\n\n            if user_input == 1 or user_input == 2:\n                return user_input \n            else:\n                print(\"Invalid input. Please enter either 1 or 2.\")\n        except ValueError:\n            print(\"Invalid input. Please enter a number.\")\n\n\nuser_choice = get_valid_input()\n\nif user_choice == 1:\n    bucket_name = \"superhero-pics\"\nelse:\n    bucket_name = \"prod-superhero-pics\"\n\nprint(f\"\\nYou choose: {bucket_name}\")\n\nconfirm = input(f\"Are you SURE you want to permanently delete the contents of the \\\"{bucket_name}\\\" bucket? (y/n) : \")\n\n\nif confirm.upper().strip() in [\"YES\", \"Y\"]:\n    delete_all_files_in_bucket(bucket_name)\nelse:\n    print(\"Process canceled. The contents of your S3 bucket were not deleted.\")\n",
                        "CopyCode": "import boto3\n\ndef delete_all_files_in_bucket(bucket_name):\n    s3 = boto3.client('s3')\n    \n    objects_to_delete = s3.list_objects_v2(Bucket=bucket_name)\n\n    if 'Contents' in objects_to_delete:\n\n        object_keys = [{'Key': obj['Key']} for obj in objects_to_delete['Contents']]\n\n        s3.delete_objects(\n            Bucket=bucket_name,\n            Delete={\n                'Objects': object_keys\n            }\n        )\n\n        print(f\"Deleted {len(object_keys)} files from {bucket_name}\")\n    else:\n        print(f\"The bucket {bucket_name} is already empty.\")\n\n\ndef get_valid_input():\n    while True:\n        try:\n            print(\"\\nWhich buckets content do you want to delete?\")\n            print(\"1. superhero-pics\")\n            print(\"2. prod-superhero-pics\")\n            user_input = int(input(\"\\nEnter 1 or 2: \"))\n\n            if user_input == 1 or user_input == 2:\n                return user_input \n            else:\n                print(\"Invalid input. Please enter either 1 or 2.\")\n        except ValueError:\n            print(\"Invalid input. Please enter a number.\")\n\n\nuser_choice = get_valid_input()\n\nif user_choice == 1:\n    bucket_name = \"superhero-pics\"\nelse:\n    bucket_name = \"prod-superhero-pics\"\n\nprint(f\"\\nYou choose: {bucket_name}\")\n\nconfirm = input(f\"Are you SURE you want to permanently delete the contents of the \\\"{bucket_name}\\\" bucket? (y/n) : \")\n\n\nif confirm.upper().strip() in [\"YES\", \"Y\"]:\n    delete_all_files_in_bucket(bucket_name)\nelse:\n    print(\"Process canceled. The contents of your S3 bucket were not deleted.\")\n"
                    }
                },
                {
                    "id": 19,
                    "instruction": "Run your script.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "python3 upload_to_aws.py",
                        "CopyCode": "python3 upload_to_aws.py"
                    }
                },
                {
                    "id": 20,
                    "instruction": "If you get an error try running the following command. Or you could upload your own Hulk pic.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "magick superhero_pics/Hulk.jpg superhero_pics/Hulk.jpg",
                        "CopyCode": "magick superhero_pics/Hulk.jpg superhero_pics/Hulk.jpg"
                    }
                },
                {
                    "id": 21,
                    "instruction": "Go back to the [S3 Console](https://s3.console.aws.amazon.com/s3/home) when you're done. Click on the \"superhero-pics\" name link in the \"General purpose buckets\" section table."
                },
                {
                    "id": 22,
                    "instruction": "To see your pictures in your database open your console and run the following commands. Enter your password when prompted.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "mysql -u superhero_user -p superhero_db\nSELECT * FROM Images;\n\\q",
                        "CopyCode": "mysql -u superhero_user -p superhero_db\nSELECT * FROM Images;\n\\q"
                    }
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "Spring Boot API Folder Setup Explanation",
                    "desc": "Explains the purpose of the various folders and what code they should contain."
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "<u><b>config</b></u> - Configuration Java files for the Rest API."
                },
                {
                    "id": 2,
                    "instruction": "<u><b>controllers</b></u> - Where your endpoints will be stored. All data that's returned from this Rest API will happen in this folder. The logic and functions you use to \"talk to\" your database should be in your \"services\" and \"repositories\" folder. Keep your endpoint functions short and clean."
                },
                {
                    "id": 3,
                    "instruction": "<u><b>dto</b></u> - Data transfer objects. Transfer data between layers of the application, particularly between the service layer and the presentation layer "
                },
                {
                    "id": 4,
                    "instruction": "<u><b>exceptions</b></u> - The custom exceptions for your project."
                },
                {
                    "id": 5,
                    "instruction": "<u><b>models</b></u> - The data structures and classes that map to your database tables. Each entity represents a table in your database and each attribute of the entity corresponds to a field in the table.The data structures and classes that map to your database tables. Each entity represents a table in your database and each attribute of the entity corresponds to a field in the table."
                },
                {
                    "id": 6,
                    "instruction": "<u><b>repositories</b></u> - Classes or interfaces that handle the SQL data access logic. Where CRUD operations are performed."
                },
                {
                    "id": 7,
                    "instruction": "<u><b>services</b></u> - Functions that use your repository functions to create business logic in your application."
                },
                {
                    "id": 8,
                    "instruction": "<u><b>utils</b></u> - Common functions that are reused in various parts of your Rest API."
                },
                {
                    "id": 9,
                    "instruction": "<u><b>test</b></u> - Where our Junit tests will be."
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "Create your Spring Boot Rest API",
                    "desc": "Explains how to create your Spring Boot Rest API and connect it to your MySQL database."
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "First we'll setup our project structure.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Superhero-Rest-Api\n\nmkdir src/main/java/com/superherobackend/superhero/dto\nmkdir src/main/java/com/superherobackend/superhero/security\n\ntouch src/main/java/com/superherobackend/superhero/config/AwsS3Config.java\ntouch src/main/java/com/superherobackend/superhero/config/DatabaseConfig.java\ntouch src/main/java/com/superherobackend/superhero/config/WebConfig.java\n\n\ntouch src/main/java/com/superherobackend/superhero/controllers/PowerController.java\ntouch src/main/java/com/superherobackend/superhero/controllers/S3ImageController.java\ntouch src/main/java/com/superherobackend/superhero/controllers/SuperheroController.java\ntouch src/main/java/com/superherobackend/superhero/controllers/UserController.java\ntouch src/main/java/com/superherobackend/superhero/controllers/UserSuperheroController.java\n\n\ntouch src/main/java/com/superherobackend/superhero/dto/UserDTO.java\ntouch src/main/java/com/superherobackend/superhero/dto/SuperheroDTO.java\n\n\ntouch src/main/java/com/superherobackend/superhero/exceptions/DuplicateSuperheroException.java\n\ntouch src/main/java/com/superherobackend/superhero/models/Image.java\ntouch src/main/java/com/superherobackend/superhero/models/Power.java\ntouch src/main/java/com/superherobackend/superhero/models/Superhero.java\ntouch src/main/java/com/superherobackend/superhero/models/User.java\ntouch src/main/java/com/superherobackend/superhero/models/UserAddRequest.java\ntouch src/main/java/com/superherobackend/superhero/models/UserAuthRequest.java\ntouch src/main/java/com/superherobackend/superhero/models/UserSuperhero.java\n\n\ntouch src/main/java/com/superherobackend/superhero/repositories/ImageRepository.java\ntouch src/main/java/com/superherobackend/superhero/repositories/PowerRepository.java\ntouch src/main/java/com/superherobackend/superhero/repositories/SuperheroRepository.java\ntouch src/main/java/com/superherobackend/superhero/repositories/UserRepository.java\ntouch src/main/java/com/superherobackend/superhero/repositories/UserSuperheroRepository.java\n\n\ntouch src/main/java/com/superherobackend/superhero/security/AuthenticationResponse.java\ntouch src/main/java/com/superherobackend/superhero/security/CustomUserDetails.java\ntouch src/main/java/com/superherobackend/superhero/security/JwtRequestFilter.java\ntouch src/main/java/com/superherobackend/superhero/security/JwtUtil.java\ntouch src/main/java/com/superherobackend/superhero/security/MyUserDetailsService.java\ntouch src/main/java/com/superherobackend/superhero/security/SecurityConfig.java\n\n\ntouch src/main/java/com/superherobackend/superhero/services/S3ImageService.java\ntouch src/main/java/com/superherobackend/superhero/services/SuperheroService.java\ntouch src/main/java/com/superherobackend/superhero/services/UserService.java\ntouch src/main/java/com/superherobackend/superhero/services/UserSuperheroService.java\n\n\ntouch src/main/resources/application-development.properties\ntouch src/main/resources/application-production.properties\ntouch src/main/resources/application-test.properties\n\n\ntouch .env\n\n\nmkdir src/test/java/com/superherobackend/superhero/config\nmkdir src/test/java/com/superherobackend/superhero/controllers\nmkdir src/test/java/com/superherobackend/superhero/dto\nmkdir src/test/java/com/superherobackend/superhero/exceptions\nmkdir src/test/java/com/superherobackend/superhero/models\nmkdir src/test/java/com/superherobackend/superhero/repositories\nmkdir src/test/java/com/superherobackend/superhero/services\nmkdir src/test/java/com/superherobackend/superhero/utils\n\n\ntouch src/test/java/com/superherobackend/superhero/controllers/UserServiceTest.java",
                        "CopyCode": "cd Superhero-Rest-Api\n\nmkdir src/main/java/com/superherobackend/superhero/dto\nmkdir src/main/java/com/superherobackend/superhero/security\n\ntouch src/main/java/com/superherobackend/superhero/config/AwsS3Config.java\ntouch src/main/java/com/superherobackend/superhero/config/DatabaseConfig.java\ntouch src/main/java/com/superherobackend/superhero/config/WebConfig.java\n\n\ntouch src/main/java/com/superherobackend/superhero/controllers/PowerController.java\ntouch src/main/java/com/superherobackend/superhero/controllers/S3ImageController.java\ntouch src/main/java/com/superherobackend/superhero/controllers/SuperheroController.java\ntouch src/main/java/com/superherobackend/superhero/controllers/UserController.java\ntouch src/main/java/com/superherobackend/superhero/controllers/UserSuperheroController.java\n\n\ntouch src/main/java/com/superherobackend/superhero/dto/UserDTO.java\ntouch src/main/java/com/superherobackend/superhero/dto/SuperheroDTO.java\n\n\ntouch src/main/java/com/superherobackend/superhero/exceptions/DuplicateSuperheroException.java\n\ntouch src/main/java/com/superherobackend/superhero/models/Image.java\ntouch src/main/java/com/superherobackend/superhero/models/Power.java\ntouch src/main/java/com/superherobackend/superhero/models/Superhero.java\ntouch src/main/java/com/superherobackend/superhero/models/User.java\ntouch src/main/java/com/superherobackend/superhero/models/UserAddRequest.java\ntouch src/main/java/com/superherobackend/superhero/models/UserAuthRequest.java\ntouch src/main/java/com/superherobackend/superhero/models/UserSuperhero.java\n\n\ntouch src/main/java/com/superherobackend/superhero/repositories/ImageRepository.java\ntouch src/main/java/com/superherobackend/superhero/repositories/PowerRepository.java\ntouch src/main/java/com/superherobackend/superhero/repositories/SuperheroRepository.java\ntouch src/main/java/com/superherobackend/superhero/repositories/UserRepository.java\ntouch src/main/java/com/superherobackend/superhero/repositories/UserSuperheroRepository.java\n\n\ntouch src/main/java/com/superherobackend/superhero/security/AuthenticationResponse.java\ntouch src/main/java/com/superherobackend/superhero/security/CustomUserDetails.java\ntouch src/main/java/com/superherobackend/superhero/security/JwtRequestFilter.java\ntouch src/main/java/com/superherobackend/superhero/security/JwtUtil.java\ntouch src/main/java/com/superherobackend/superhero/security/MyUserDetailsService.java\ntouch src/main/java/com/superherobackend/superhero/security/SecurityConfig.java\n\n\ntouch src/main/java/com/superherobackend/superhero/services/S3ImageService.java\ntouch src/main/java/com/superherobackend/superhero/services/SuperheroService.java\ntouch src/main/java/com/superherobackend/superhero/services/UserService.java\ntouch src/main/java/com/superherobackend/superhero/services/UserSuperheroService.java\n\n\ntouch src/main/resources/application-development.properties\ntouch src/main/resources/application-production.properties\ntouch src/main/resources/application-test.properties\n\n\ntouch .env\n\n\nmkdir src/test/java/com/superherobackend/superhero/config\nmkdir src/test/java/com/superherobackend/superhero/controllers\nmkdir src/test/java/com/superherobackend/superhero/dto\nmkdir src/test/java/com/superherobackend/superhero/exceptions\nmkdir src/test/java/com/superherobackend/superhero/models\nmkdir src/test/java/com/superherobackend/superhero/repositories\nmkdir src/test/java/com/superherobackend/superhero/services\nmkdir src/test/java/com/superherobackend/superhero/utils\n\n\ntouch src/test/java/com/superherobackend/superhero/controllers/UserServiceTest.java"
                    }
                },
                {
                    "id": 2,
                    "instruction": "Now commit all your blank files",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Superhero-Rest-Api\ngit add .\ngit commit \"Blank files\"\ngit push",
                        "CopyCode": "cd Superhero-Rest-Api\ngit add .\ngit commit \"Blank files\"\ngit push"
                    }
                },
                {
                    "id": 3,
                    "instruction": "In the \"build.gradle\" file paste the following code into the \"dependencies\" block. Do NOT delete it's contents. I'd recommend putting implementations with other implementation just to keep it organized.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "Gradle Properties",
                        "FormatCode": "implementation 'me.paulschwarz:spring-dotenv:4.0.0'\nimplementation 'org.springframework.boot:spring-boot-starter-data-jpa'\nimplementation 'org.mindrot:jbcrypt:0.4'\nimplementation 'software.amazon.awssdk:s3:2.20.0'\nimplementation 'org.springframework.boot:spring-boot-starter-security'\nimplementation 'io.jsonwebtoken:jjwt-api:0.11.5'\ntestImplementation 'org.springframework.boot:spring-boot-starter-test'\ntestImplementation 'org.mockito:mockito-core'\ntestImplementation 'org.mockito:mockito-junit-jupiter'\n\nruntimeOnly 'mysql:mysql-connector-java:8.0.33'\nruntimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'\nruntimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'",
                        "CopyCode": "implementation 'me.paulschwarz:spring-dotenv:4.0.0'\nimplementation 'org.springframework.boot:spring-boot-starter-data-jpa'\nimplementation 'org.mindrot:jbcrypt:0.4'\nimplementation 'software.amazon.awssdk:s3:2.20.0'\nimplementation 'org.springframework.boot:spring-boot-starter-security'\nimplementation 'io.jsonwebtoken:jjwt-api:0.11.5'\ntestImplementation 'org.springframework.boot:spring-boot-starter-test'\ntestImplementation 'org.mockito:mockito-core'\ntestImplementation 'org.mockito:mockito-junit-jupiter'\n\nruntimeOnly 'mysql:mysql-connector-java:8.0.33'\nruntimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'\nruntimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'"
                    }
                },
                {
                    "id": 4,
                    "instruction": "When you add new properties in \"build.gradle\" VSCode will ask you the following question. Its VERY important that you say \"Always\" to this question. Below is the prompt, just for reference.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "Prompt",
                        "FormatCode": "A build file was modified. Do you want to synchronize the Java classpath/configuration?",
                        "CopyCode": "A build file was modified. Do you want to synchronize the Java classpath/configuration?"
                    }
                },
                {
                    "id": 5,
                    "instruction": "In the \".gitignore\" file paste the following paths at the bottom of the file.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": ".gitignore values",
                        "FormatCode": ".env",
                        "CopyCode": ".env"
                    }
                },
                {
                    "id": 6,
                    "instruction": "Close and reopen VSCode to let all your dependencies sync."
                },
                {
                    "id": 7,
                    "instruction": "Now open a new terminal and run the following command to generate your JWT key. Copy and record the output value.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "fxml",
                        "DisplayLang": "Env",
                        "FormatCode": "openssl rand -base64 64",
                        "CopyCode": "openssl rand -base64 64"
                    }
                },
                {
                    "id": 8,
                    "instruction": "In your .env file paste the following values. <br><br><b>1.</b> Replace \"YOUR-SUPERHERO-DB-PASSWORD\" and \"YOUR-SUPERHERO-TEST-DB-PASSWORD\" with your actual passwords for the superhero_db and superhero_test_db databases. Note that \"3306\" is the default port used by MySQL database servers for client-server communication. <br><br><b>2</b>. Replace \"VALUE_FROM PREVIOUS STEP\" with the openssl key you copied in the previous step. <br><br><b>3</b>. Replace the value of \"FRONTEND_URL\" with your actual frontend localhost link if necessary. If your database password has % signs in it, replace them with %25 to escape them in your DEV_DATABASE_URI and TEST_DATABASE_URI urls.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "fxml",
                        "DisplayLang": "Env",
                        "FormatCode": "SPRING_ENV=development\n\nDEV_DATABASE_URI=jdbc:mysql://localhost:3306/superhero_db?user=superhero_user&password=YOUR-SUPERHERO-DB-PASSWORD\n\nTEST_DATABASE_URI=jdbc:mysql://localhost:3306/superhero_test_db?user=superhero_test_user&password=YOUR-SUPERHERO-TEST-DB-PASSWORD\n\nPROD_DATABASE_URI=NULL\n\nJWT_SECRET_KEY=VALUE_FROM PREVIOUS STEP\n\nFRONTEND_URL=http://localhost:5173\n\nS3_BUCKET=superhero-pics",
                        "CopyCode": "SPRING_ENV=development\n\nDEV_DATABASE_URI=jdbc:mysql://localhost:3306/superhero_db?user=superhero_user&password=YOUR-SUPERHERO-DB-PASSWORD\n\nTEST_DATABASE_URI=jdbc:mysql://localhost:3306/superhero_test_db?user=superhero_test_user&password=YOUR-SUPERHERO-TEST-DB-PASSWORD\n\nPROD_DATABASE_URI=NULL\n\nJWT_SECRET_KEY=VALUE_FROM PREVIOUS STEP\n\nFRONTEND_URL=http://localhost:5173\n\nS3_BUCKET=superhero-pics"
                    }
                },
                {
                    "id": 9,
                    "instruction": "In src -> main -> resources open the \"application.properties\". Paste in the following lines at the bottom, do NOT change anything else in the file.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customproperties",
                        "DisplayLang": "Properties",
                        "FormatCode": "# Defaults to development if unset\nspring.profiles.active=${SPRING_ENV:development}\njwt.secret=${JWT_SECRET_KEY}\nfrontend.url=${FRONTEND_URL}\ns3.superhero.bucket=${S3_BUCKET}",
                        "CopyCode": "# Defaults to development if unset\nspring.profiles.active=${SPRING_ENV:development}\njwt.secret=${JWT_SECRET_KEY}\nfrontend.url=${FRONTEND_URL}\ns3.superhero.bucket=${S3_BUCKET}"
                    }
                },
                {
                    "id": 10,
                    "instruction": "In src -> main -> resources open the \"application-development.properties\". Paste in the following line.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customproperties",
                        "DisplayLang": "Properties",
                        "FormatCode": "spring.datasource.url=${DEV_DATABASE_URI}",
                        "CopyCode": "spring.datasource.url=${DEV_DATABASE_URI}"
                    }
                },
                {
                    "id": 11,
                    "instruction": "In src -> main -> resources open the \"application-test.properties\". Paste in the following line.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customproperties",
                        "DisplayLang": "Properties",
                        "FormatCode": "spring.datasource.url=${TEST_DATABASE_URI}",
                        "CopyCode": "spring.datasource.url=${TEST_DATABASE_URI}"
                    }
                },
                {
                    "id": 12,
                    "instruction": "In src -> main -> resources open the \"application-production.properties\". Paste in the following line.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customproperties",
                        "DisplayLang": "Properties",
                        "FormatCode": "spring.datasource.url=${PROD_DATABASE_URI}",
                        "CopyCode": "spring.datasource.url=${PROD_DATABASE_URI}"
                    }
                },
                {
                    "id": 13,
                    "instruction": "After you've done that, lets push our changes to Github. Make sure the \".env\" file is in the .gitignore first though.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "* Make sure the .env is in .gitignore * \n\ncd Superhero-Rest-Api\ngit add .\ngit commit -m \"Database Configuration Files\"\ngit push",
                        "CopyCode": "* Make sure the .env is in .gitignore * \n\ncd Superhero-Rest-Api\ngit add .\ngit commit -m \"Database Configuration Files\"\ngit push"
                    }
                },
                {
                    "id": 14,
                    "instruction": "Now we'll create our Java configuration files for our Spring Boot app."
                },
                {
                    "id": 15,
                    "instruction": "Go to the src -> main -> java/com/superherobackend/superhero -> config folder."
                },
                {
                    "id": 16,
                    "instruction": "In the config folder open the \"AwsS3Config.java\" file. Paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Java",
                        "FormatCode": "package com.superherobackend.superhero.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport software.amazon.awssdk.regions.Region;\nimport software.amazon.awssdk.services.s3.S3Client;\n\n@Configuration\npublic class AwsS3Config {\n\n    @Bean\n    public S3Client s3Client() {\n        return S3Client.builder()\n                .region(Region.US_EAST_1)\n                .build();\n    }\n}",
                        "CopyCode": "package com.superherobackend.superhero.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport software.amazon.awssdk.regions.Region;\nimport software.amazon.awssdk.services.s3.S3Client;\n\n@Configuration\npublic class AwsS3Config {\n\n    @Bean\n    public S3Client s3Client() {\n        return S3Client.builder()\n                .region(Region.US_EAST_1)\n                .build();\n    }\n}"
                    }
                },
                {
                    "id": 17,
                    "instruction": "Now open the \"DatabaseConfig.java\" file. Paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Java",
                        "FormatCode": "package com.superherobackend.superhero.config;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Profile;\nimport javax.sql.DataSource;\nimport org.springframework.boot.jdbc.DataSourceBuilder;\n\n@Configuration\npublic class DatabaseConfig {\n\n    @Value(\"${spring.datasource.url}\")\n    private String dbUrl;\n\n    @Bean\n    @Profile(\"development\")\n    public DataSource developmentDataSource() {\n        return DataSourceBuilder.create()\n                .url(dbUrl)\n                .build();\n    }\n\n    @Bean\n    @Profile(\"test\")\n    public DataSource testDataSource() {\n        return DataSourceBuilder.create()\n                .url(dbUrl)\n                .build();\n    }\n\n    @Bean\n    @Profile(\"production\")\n    public DataSource productionDataSource() {\n        return DataSourceBuilder.create()\n                .url(dbUrl)\n                .build();\n    }\n    \n}\n\n",
                        "CopyCode": "package com.superherobackend.superhero.config;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Profile;\nimport javax.sql.DataSource;\nimport org.springframework.boot.jdbc.DataSourceBuilder;\n\n@Configuration\npublic class DatabaseConfig {\n\n    @Value(\"${spring.datasource.url}\")\n    private String dbUrl;\n\n    @Bean\n    @Profile(\"development\")\n    public DataSource developmentDataSource() {\n        return DataSourceBuilder.create()\n                .url(dbUrl)\n                .build();\n    }\n\n    @Bean\n    @Profile(\"test\")\n    public DataSource testDataSource() {\n        return DataSourceBuilder.create()\n                .url(dbUrl)\n                .build();\n    }\n\n    @Bean\n    @Profile(\"production\")\n    public DataSource productionDataSource() {\n        return DataSourceBuilder.create()\n                .url(dbUrl)\n                .build();\n    }\n    \n}\n\n"
                    }
                },
                {
                    "id": 18,
                    "instruction": "Now open the \"WebConfig.java\" file. Paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Java",
                        "FormatCode": "package com.superherobackend.superhero.config;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.CorsRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n@Configuration\npublic class WebConfig {\n\n    @Value(\"${frontend.url}\")\n    private String frontendUrl;\n\n    @Bean\n    public WebMvcConfigurer corsConfigurer() {\n        return new WebMvcConfigurer() {\n            @Override\n            public void addCorsMappings(CorsRegistry registry){\n                registry.addMapping(\"/**\")\n                        .allowedOrigins(frontendUrl)\n                        .allowedMethods(\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\")\n                        .allowedHeaders(\"*\")\n                        .allowCredentials(true);\n            }\n        };\n    }\n}",
                        "CopyCode": "package com.superherobackend.superhero.config;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.CorsRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n@Configuration\npublic class WebConfig {\n\n\t@Value(\"${frontend.url}\")\n    private String frontendUrl;\n\n\t@Bean\n\tpublic WebMvcConfigurer corsConfigurer() {\n\t\treturn new WebMvcConfigurer() {\n\t\t\t@Override\n\t\t\tpublic void addCorsMappings(CorsRegistry registry){\n\t\t\t\tregistry.addMapping(\"/**\")\n\t\t\t\t\t\t.allowedOrigins(frontendUrl)\n\t\t\t\t\t\t.allowedMethods(\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\")\n\t\t\t\t\t\t.allowedHeaders(\"*\")\n\t\t\t\t\t\t.allowCredentials(true);\n\t\t\t}\n\t\t};\n\t}\n}"
                    }
                },
                {
                    "id": 19,
                    "instruction": "Push your changes to github.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Superhero-Rest-Api\ngit add .\ngit commit -m \"Config Java Files\"\ngit push",
                        "CopyCode": "cd Superhero-Rest-Api\ngit add .\ngit commit -m \"Config Java Files\"\ngit push"
                    }
                },
                {
                    "id": 20,
                    "instruction": "Now we'll create our models."
                },
                {
                    "id": 21,
                    "instruction": "Go to the src -> main -> java/com/superherobackend/superhero -> models folder."
                },
                {
                    "id": 22,
                    "instruction": "Open the \"Image.java\" file and paste in the following code. You'll get red underlined errors, just ignore them.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Java",
                        "FormatCode": "package com.superherobackend.superhero.models;\n\nimport jakarta.persistence.*;\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\nimport java.io.Serializable;\nimport org.hibernate.annotations.OnDelete;\nimport org.hibernate.annotations.OnDeleteAction;\n\nimport com.fasterxml.jackson.annotation.JsonIgnore;\n\n@Entity\n@Table(name = \"images\")\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Image implements Serializable {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(name = \"image_id\")\n    private Long imageId;\n\n    @Column(name = \"original_filename\", nullable = false)\n    private String originalFilename;\n\n    @Column(name = \"stored_filename\")\n    private String storedFilename;\n\n    @OneToOne(fetch = FetchType.LAZY, optional = false)\n    @JoinColumn(name = \"super_id\", referencedColumnName = \"super_id\", unique = true)\n    @OnDelete(action = OnDeleteAction.CASCADE)\n    @JsonIgnore\n    private Superhero superhero;\n\n}\n",
                        "CopyCode": "package com.superherobackend.superhero.models;\n\nimport jakarta.persistence.*;\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\nimport java.io.Serializable;\nimport org.hibernate.annotations.OnDelete;\nimport org.hibernate.annotations.OnDeleteAction;\n\nimport com.fasterxml.jackson.annotation.JsonIgnore;\n\n@Entity\n@Table(name = \"images\")\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Image implements Serializable {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(name = \"image_id\")\n    private Long imageId;\n\n    @Column(name = \"original_filename\", nullable = false)\n    private String originalFilename;\n\n    @Column(name = \"stored_filename\")\n    private String storedFilename;\n\n    @OneToOne(fetch = FetchType.LAZY, optional = false)\n    @JoinColumn(name = \"super_id\", referencedColumnName = \"super_id\", unique = true)\n    @OnDelete(action = OnDeleteAction.CASCADE)\n    @JsonIgnore\n    private Superhero superhero;\n\n}\n"
                    }
                },
                {
                    "id": 23,
                    "instruction": "Open the \"Power.java\" file and paste in the following code. You'll get red underlined errors, just ignore them.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Java",
                        "FormatCode": "package com.superherobackend.superhero.models;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\nimport jakarta.persistence.*;\nimport java.io.Serializable;\nimport java.util.Set;\n\nimport com.fasterxml.jackson.annotation.JsonIgnore;\n\n@Entity\n@Table(name = \"powers\")\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Power implements Serializable {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(name = \"power_id\")\n    private Long powerId;\n\n    @Column(name = \"name\", nullable = false)\n    private String name;\n\n    @ManyToMany(mappedBy = \"powers\", fetch = FetchType.LAZY)\n    @JsonIgnore\n    private Set<Superhero> superheroes;\n    \n}\n",
                        "CopyCode": "package com.superherobackend.superhero.models;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\nimport jakarta.persistence.*;\nimport java.io.Serializable;\nimport java.util.Set;\n\nimport com.fasterxml.jackson.annotation.JsonIgnore;\n\n@Entity\n@Table(name = \"powers\")\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Power implements Serializable {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(name = \"power_id\")\n    private Long powerId;\n\n    @Column(name = \"name\", nullable = false)\n    private String name;\n\n    @ManyToMany(mappedBy = \"powers\", fetch = FetchType.LAZY)\n    @JsonIgnore\n    private Set<Superhero> superheroes;\n    \n}\n"
                    }
                },
                {
                    "id": 24,
                    "instruction": "Open the \"Superhero.java\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Java",
                        "FormatCode": "package com.superherobackend.superhero.models;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\nimport jakarta.persistence.*;\n\nimport java.io.Serializable;\nimport java.util.Set;\n\n@Entity\n@Table(name = \"superheroes\")\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Superhero implements Serializable {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(name = \"super_id\")\n    private Long superId;\n\n    @Column(name = \"name\", nullable = false)\n    private String name;\n\n    @Column(name = \"real_name\")\n    private String realName;\n\n    @Column(name = \"universe\")\n    private String universe;\n\n    @Column(name = \"year_created\")\n    private Integer yearCreated;\n\n    @Column(name = \"can_delete\")\n    private Boolean canDelete;\n\n    @OneToOne(\n        mappedBy = \"superhero\", \n        cascade = CascadeType.ALL, \n        fetch = FetchType.LAZY, \n        optional = true\n    )\n    private Image image;\n\n    @ManyToMany(fetch = FetchType.LAZY)\n    @JoinTable(\n        name = \"superhero_powers\",\n        joinColumns = @JoinColumn(name = \"super_id\"),\n        inverseJoinColumns = @JoinColumn(name = \"power_id\")\n    )\n    private Set<Power> powers;\n}",
                        "CopyCode": "package com.superherobackend.superhero.models;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\nimport jakarta.persistence.*;\n\nimport java.io.Serializable;\nimport java.util.Set;\n\n@Entity\n@Table(name = \"superheroes\")\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Superhero implements Serializable {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(name = \"super_id\")\n    private Long superId;\n\n    @Column(name = \"name\", nullable = false)\n    private String name;\n\n    @Column(name = \"real_name\")\n    private String realName;\n\n    @Column(name = \"universe\")\n    private String universe;\n\n    @Column(name = \"year_created\")\n    private Integer yearCreated;\n\n    @Column(name = \"can_delete\")\n    private Boolean canDelete;\n\n    @OneToOne(\n        mappedBy = \"superhero\", \n        cascade = CascadeType.ALL, \n        fetch = FetchType.LAZY, \n        optional = true\n    )\n    private Image image;\n\n    @ManyToMany(fetch = FetchType.LAZY)\n    @JoinTable(\n        name = \"superhero_powers\",\n        joinColumns = @JoinColumn(name = \"super_id\"),\n        inverseJoinColumns = @JoinColumn(name = \"power_id\")\n    )\n    private Set<Power> powers;\n}"
                    }
                },
                {
                    "id": 25,
                    "instruction": "Open the \"User.java\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Java",
                        "FormatCode": "package com.superherobackend.superhero.models;\n\nimport jakarta.persistence.*;\n\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport lombok.AllArgsConstructor;\n\n@Entity\n@Table(name = \"users\")\n@Data                 // @Data is getters, setters, toString, equals, and hashCode\n@NoArgsConstructor     \n@AllArgsConstructor    \npublic class User {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long userId;\n\n    private String name;\n\n    private String role;\n\n    private String username;\n\n    private String hashedPassword;\n}\n",
                        "CopyCode": "package com.superherobackend.superhero.models;\n\nimport jakarta.persistence.*;\n\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport lombok.AllArgsConstructor;\n\n@Entity\n@Table(name = \"users\")\n@Data                 // @Data is getters, setters, toString, equals, and hashCode\n@NoArgsConstructor     \n@AllArgsConstructor    \npublic class User {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long userId;\n\n    private String name;\n\n    private String role;\n\n    private String username;\n\n    private String hashedPassword;\n}\n"
                    }
                },
                {
                    "id": 26,
                    "instruction": "Open the \"UserAddRequest.java\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Java",
                        "FormatCode": "package com.superherobackend.superhero.models;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class UserAddRequest {\n    private String name;\n    private String username;\n    private String password;\n}\n",
                        "CopyCode": "package com.superherobackend.superhero.models;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class UserAddRequest {\n    private String name;\n    private String username;\n    private String password;\n}\n"
                    }
                },
                {
                    "id": 27,
                    "instruction": "Open the \"UserAuthRequest.java\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Java",
                        "FormatCode": "package com.superherobackend.superhero.models;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class UserAuthRequest {\n    private String username;\n    private String password;\n}\n",
                        "CopyCode": "package com.superherobackend.superhero.models;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class UserAuthRequest {\n    private String username;\n    private String password;\n}\n"
                    }
                },
                {
                    "id": 28,
                    "instruction": "Open the \"UserSuperhero.java\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Java",
                        "FormatCode": "package com.superherobackend.superhero.models;\n\nimport jakarta.persistence.*;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\n@Entity\n@Table(name = \"user_superheroes\")\n@Getter\n@Setter\n@NoArgsConstructor\npublic class UserSuperhero {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @ManyToOne\n    @JoinColumn(name = \"user_id\")\n    private User user;\n\n    @ManyToOne\n    @JoinColumn(name = \"super_id\")\n    private Superhero superhero;\n\n    public UserSuperhero(User user, Superhero superhero) {\n        this.user = user;\n        this.superhero = superhero;\n    }\n    \n}",
                        "CopyCode": "package com.superherobackend.superhero.models;\n\nimport jakarta.persistence.*;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\n@Entity\n@Table(name = \"user_superheroes\")\n@Getter\n@Setter\n@NoArgsConstructor\npublic class UserSuperhero {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @ManyToOne\n    @JoinColumn(name = \"user_id\")\n    private User user;\n\n    @ManyToOne\n    @JoinColumn(name = \"super_id\")\n    private Superhero superhero;\n\n    public UserSuperhero(User user, Superhero superhero) {\n        this.user = user;\n        this.superhero = superhero;\n    }\n    \n}"
                    }
                },
                {
                    "id": 29,
                    "instruction": "Push your changes to github.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Superhero-Rest-Api\ngit add .\ngit commit -m \"Added models\"\ngit push",
                        "CopyCode": "cd Superhero-Rest-Api\ngit add .\ngit commit -m \"Added models\"\ngit push"
                    }
                },
                {
                    "id": 30,
                    "instruction": "Now we'll add the data transfer objects."
                },
                {
                    "id": 31,
                    "instruction": "Go to the src -> main -> java/com/superherobackend/superhero -> dto folder."
                },
                {
                    "id": 32,
                    "instruction": "Open the \"SuperheroDTO.java\" file. Paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Java",
                        "FormatCode": "package com.superherobackend.superhero.dto;\n\nimport java.util.List;\n\nimport org.springframework.web.multipart.MultipartFile;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\npublic class SuperheroDTO {\n    private String name;\n    private String realName;\n    private String universe;\n    private int yearCreated;\n    private Boolean canDelete;\n    private List<Long> powerIds;\n    private MultipartFile image;\n\n    public SuperheroDTO(String name, String realName, String universe, int yearCreated, Boolean canDelete, List<Long> powerIds) {\n        this.name = name;\n        this.realName = realName;\n        this.universe = universe;\n        this.yearCreated = yearCreated;\n        this.canDelete = canDelete;\n        this.powerIds = powerIds;\n    }\n}",
                        "CopyCode": "package com.superherobackend.superhero.dto;\n\nimport java.util.List;\n\nimport org.springframework.web.multipart.MultipartFile;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.NoArgsConstructor;\nimport lombok.Setter;\n\n@Getter\n@Setter\n@NoArgsConstructor\n@AllArgsConstructor\npublic class SuperheroDTO {\n    private String name;\n    private String realName;\n    private String universe;\n    private int yearCreated;\n    private Boolean canDelete;\n    private List<Long> powerIds;\n    private MultipartFile image;\n\n    public SuperheroDTO(String name, String realName, String universe, int yearCreated, Boolean canDelete, List<Long> powerIds) {\n        this.name = name;\n        this.realName = realName;\n        this.universe = universe;\n        this.yearCreated = yearCreated;\n        this.canDelete = canDelete;\n        this.powerIds = powerIds;\n    }\n}"
                    }
                },
                {
                    "id": 33,
                    "instruction": "Open the \"UserDTO.java\" file. Paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Java",
                        "FormatCode": "package com.superherobackend.superhero.dto;\n\nimport com.superherobackend.superhero.models.User;\n\nimport lombok.Data;\n\n@Data\npublic class UserDTO {\n    private Long userId;\n    private String name;\n    private String role;\n    private String username;\n    \n    // Get user without password \n    public UserDTO(User user) {\n        this.userId = user.getUserId();\n        this.name = user.getName();\n        this.role = user.getRole();\n        this.username = user.getUsername();\n    }\n}\n",
                        "CopyCode": "package com.superherobackend.superhero.dto;\n\nimport com.superherobackend.superhero.models.User;\n\nimport lombok.Data;\n\n@Data\npublic class UserDTO {\n    private Long userId;\n    private String name;\n    private String role;\n    private String username;\n    \n    // Get user without password \n    public UserDTO(User user) {\n        this.userId = user.getUserId();\n        this.name = user.getName();\n        this.role = user.getRole();\n        this.username = user.getUsername();\n    }\n}\n"
                    }
                },
                {
                    "id": 34,
                    "instruction": "Push your changes to github.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Superhero-Rest-Api\ngit add .\ngit commit -m \"Added DTO's\"\ngit push",
                        "CopyCode": "cd Superhero-Rest-Api\ngit add .\ngit commit -m \"Added DTO's\"\ngit push"
                    }
                },
                {
                    "id": 35,
                    "instruction": "Now we'll make the custom exceptions."
                },
                {
                    "id": 36,
                    "instruction": "Go to the src -> main -> java/com/superherobackend/superhero -> exceptions folder."
                },
                {
                    "id": 37,
                    "instruction": "Open the \"DuplicateSuperheroException.java\" file. Paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Java",
                        "FormatCode": "package com.superherobackend.superhero.exceptions;\n\npublic class DuplicateSuperheroException extends Exception{\n\n    public String message;\n\n    public DuplicateSuperheroException(String message) {\n        super(message);\n    }\n\n    public DuplicateSuperheroException() {\n        super(\"Superhero already in database!\");\n    }\n}\n",
                        "CopyCode": "package com.superherobackend.superhero.exceptions;\n\npublic class DuplicateSuperheroException extends Exception{\n\n\tpublic String message;\n\n\tpublic DuplicateSuperheroException(String message) {\n\t\tsuper(message);\n\t}\n\n\tpublic DuplicateSuperheroException() {\n\t\tsuper(\"Superhero already in database!\");\n\t}\n}\n"
                    }
                },
                {
                    "id": 38,
                    "instruction": "Push your changes to github.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Superhero-Rest-Api\ngit add .\ngit commit -m \"Added exceptions\"\ngit push",
                        "CopyCode": "cd Superhero-Rest-Api\ngit add .\ngit commit -m \"Added exceptions\"\ngit push"
                    }
                },
                {
                    "id": 39,
                    "instruction": "Now we'll add our repository functions."
                },
                {
                    "id": 40,
                    "instruction": "Go to the src -> main -> java/com/superherobackend/superhero -> repositories folder."
                },
                {
                    "id": 41,
                    "instruction": "Open the \"ImageRepository.java\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Java",
                        "FormatCode": "package com.superherobackend.superhero.repositories;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\nimport org.springframework.stereotype.Repository;\n\nimport com.superherobackend.superhero.models.Image;\nimport com.superherobackend.superhero.models.Superhero;\n\n@Repository\npublic interface ImageRepository extends JpaRepository<Image, Long> {\n    \n    Image findBySuperhero(Superhero superhero);\n\n    void deleteBySuperheroSuperId(Long superheroId);\n\n    @Query(\"SELECT i.storedFilename FROM Image i WHERE i.superhero.id = :superheroId\")\n    String findStoredFilenameBySuperheroId(@Param(\"superheroId\") Long superheroId);\n\n}",
                        "CopyCode": "package com.superherobackend.superhero.repositories;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\nimport org.springframework.stereotype.Repository;\n\nimport com.superherobackend.superhero.models.Image;\nimport com.superherobackend.superhero.models.Superhero;\n\n@Repository\npublic interface ImageRepository extends JpaRepository<Image, Long> {\n    \n    Image findBySuperhero(Superhero superhero);\n\n    void deleteBySuperheroSuperId(Long superheroId);\n\n    @Query(\"SELECT i.storedFilename FROM Image i WHERE i.superhero.id = :superheroId\")\n    String findStoredFilenameBySuperheroId(@Param(\"superheroId\") Long superheroId);\n\n}"
                    }
                },
                {
                    "id": 42,
                    "instruction": "Open the \"PowerRepository.java\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Java",
                        "FormatCode": "package com.superherobackend.superhero.repositories;\n\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.stereotype.Repository;\n\nimport com.superherobackend.superhero.models.Power;\n\nimport java.util.List;\n\n@Repository\npublic interface PowerRepository extends CrudRepository<Power, Long> {\n    List<Power> findAll();\n\n    Power findByName(String name);\n\n    @Query(\"SELECT p FROM Power p JOIN p.superheroes s WHERE s.superId = :superId\")\n    List<Power> findPowersBySuperheroId(Long superId);\n}",
                        "CopyCode": "package com.superherobackend.superhero.repositories;\n\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.stereotype.Repository;\n\nimport com.superherobackend.superhero.models.Power;\n\nimport java.util.List;\n\n@Repository\npublic interface PowerRepository extends CrudRepository<Power, Long> {\n    List<Power> findAll();\n\n    Power findByName(String name);\n\n    @Query(\"SELECT p FROM Power p JOIN p.superheroes s WHERE s.superId = :superId\")\n    List<Power> findPowersBySuperheroId(Long superId);\n}"
                    }
                },
                {
                    "id": 43,
                    "instruction": "Open the \"SuperheroRepository.java\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Java",
                        "FormatCode": "package com.superherobackend.superhero.repositories;\n\nimport java.util.List;\n\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.data.repository.query.Param;\nimport org.springframework.stereotype.Repository;\n\nimport com.superherobackend.superhero.models.Superhero;\n\n@Repository\npublic interface SuperheroRepository extends CrudRepository<Superhero, Long> {\n    Superhero findByName(String name);\n\n    @Query(\"SELECT s FROM Superhero s\")\n    List<Superhero> findAllSuperheroes();\n\n    @Query(\"SELECT s FROM Superhero s JOIN UserSuperhero us ON s.superId = us.superhero.superId WHERE s.name = :name AND us.user.userId = :userId\")\n    Superhero findByNameAndUserId(@Param(\"name\") String name, @Param(\"userId\") Long userId);\n    \n    @Query(\"SELECT s FROM Superhero s JOIN s.powers p WHERE p.powerId = :powerId\")\n    List<Superhero> findByPowerId(@Param(\"powerId\") Long powerId);\n\n    @Query(\"SELECT MAX(s.superId) FROM Superhero s\")\n    Long findMaxSuperId();\n}",
                        "CopyCode": "package com.superherobackend.superhero.repositories;\n\nimport java.util.List;\n\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.data.repository.query.Param;\nimport org.springframework.stereotype.Repository;\n\nimport com.superherobackend.superhero.models.Superhero;\n\n@Repository\npublic interface SuperheroRepository extends CrudRepository<Superhero, Long> {\n    Superhero findByName(String name);\n\n    @Query(\"SELECT s FROM Superhero s\")\n    List<Superhero> findAllSuperheroes();\n\n    @Query(\"SELECT s FROM Superhero s JOIN UserSuperhero us ON s.superId = us.superhero.superId WHERE s.name = :name AND us.user.userId = :userId\")\n    Superhero findByNameAndUserId(@Param(\"name\") String name, @Param(\"userId\") Long userId);\n    \n    @Query(\"SELECT s FROM Superhero s JOIN s.powers p WHERE p.powerId = :powerId\")\n    List<Superhero> findByPowerId(@Param(\"powerId\") Long powerId);\n\n    @Query(\"SELECT MAX(s.superId) FROM Superhero s\")\n    Long findMaxSuperId();\n}"
                    }
                },
                {
                    "id": 44,
                    "instruction": "Open the \"UserRepository.java\" file and paste in the following code. ",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Java",
                        "FormatCode": "package com.superherobackend.superhero.repositories;\n\nimport java.util.List;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.stereotype.Repository;\n\nimport com.superherobackend.superhero.dto.UserDTO;\nimport com.superherobackend.superhero.models.User;\n\n@Repository\npublic interface UserRepository extends JpaRepository<User, Long> {\n    User findByUsername(String username);\n\n    User findByUserId(Long userId);\n\n    @Query(\"SELECT u FROM User u\")\n    List<UserDTO> fetchAllUsers();\n\n    @Query(\"SELECT MAX(u.userId) FROM User u\")\n    Long findMaxUserId();\n\n}\n",
                        "CopyCode": "package com.superherobackend.superhero.repositories;\n\nimport java.util.List;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.stereotype.Repository;\n\nimport com.superherobackend.superhero.dto.UserDTO;\nimport com.superherobackend.superhero.models.User;\n\n@Repository\npublic interface UserRepository extends JpaRepository<User, Long> {\n    User findByUsername(String username);\n\n    User findByUserId(Long userId);\n\n    @Query(\"SELECT u FROM User u\")\n    List<UserDTO> fetchAllUsers();\n\n    @Query(\"SELECT MAX(u.userId) FROM User u\")\n    Long findMaxUserId();\n\n}\n"
                    }
                },
                {
                    "id": 45,
                    "instruction": "Open the \"UserSuperheroRepository.java\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Java",
                        "FormatCode": "package com.superherobackend.superhero.repositories;\n\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.data.repository.query.Param;\nimport org.springframework.stereotype.Repository;\n\nimport com.superherobackend.superhero.models.Superhero;\nimport com.superherobackend.superhero.models.User;\nimport com.superherobackend.superhero.models.UserSuperhero;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@Repository\npublic interface UserSuperheroRepository extends CrudRepository<UserSuperhero, Long> {\n    \n    @Query(\"SELECT s FROM Superhero s JOIN UserSuperhero us ON s.superId = us.superhero.superId WHERE us.user.userId = :userId\")\n    List<Superhero> findAllSuperheroesByUserId(Long userId);\n\n    @Query(\"SELECT s FROM Superhero s WHERE s.superId = :superId\")\n    Optional<Superhero> findSuperheroById(Long superId);\n\n    @Query(\"SELECT s FROM Superhero s JOIN UserSuperhero us ON s.superId = us.superhero.superId WHERE us.user.userId = :userId AND s.universe = :universe\")\n    List<Superhero> findSuperheroesByUserIdAndUniverse(Long userId, String universe);\n\n    @Query(\"SELECT us.user FROM UserSuperhero us WHERE us.superhero.superId = :superId\")\n    User findOwnerBySuperheroId(@Param(\"superId\") Long superId);\n\n    boolean existsByUserUserIdAndSuperheroSuperId(Long userId, Long superheroId);\n    \n    void deleteBySuperhero_SuperId(Long superId);\n\n    void deleteByUserUserIdAndSuperheroSuperId(Long userId, Long superheroId);\n\n    @Query(\"SELECT us.superhero FROM UserSuperhero us JOIN us.superhero.powers p WHERE us.user.userId = :userId AND p.powerId = :powerId\")\n    List<Superhero> findSuperheroesByUserIdAndPower(Long userId, Long powerId);\n\n    List<UserSuperhero> findByUser_UserId(Long userId);\n}\n",
                        "CopyCode": "package com.superherobackend.superhero.repositories;\n\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.CrudRepository;\nimport org.springframework.data.repository.query.Param;\nimport org.springframework.stereotype.Repository;\n\nimport com.superherobackend.superhero.models.Superhero;\nimport com.superherobackend.superhero.models.User;\nimport com.superherobackend.superhero.models.UserSuperhero;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@Repository\npublic interface UserSuperheroRepository extends CrudRepository<UserSuperhero, Long> {\n    \n    @Query(\"SELECT s FROM Superhero s JOIN UserSuperhero us ON s.superId = us.superhero.superId WHERE us.user.userId = :userId\")\n    List<Superhero> findAllSuperheroesByUserId(Long userId);\n\n    @Query(\"SELECT s FROM Superhero s WHERE s.superId = :superId\")\n    Optional<Superhero> findSuperheroById(Long superId);\n\n    @Query(\"SELECT s FROM Superhero s JOIN UserSuperhero us ON s.superId = us.superhero.superId WHERE us.user.userId = :userId AND s.universe = :universe\")\n    List<Superhero> findSuperheroesByUserIdAndUniverse(Long userId, String universe);\n\n    @Query(\"SELECT us.user FROM UserSuperhero us WHERE us.superhero.superId = :superId\")\n    User findOwnerBySuperheroId(@Param(\"superId\") Long superId);\n\n    boolean existsByUserUserIdAndSuperheroSuperId(Long userId, Long superheroId);\n    \n    void deleteBySuperhero_SuperId(Long superId);\n\n    void deleteByUserUserIdAndSuperheroSuperId(Long userId, Long superheroId);\n\n    @Query(\"SELECT us.superhero FROM UserSuperhero us JOIN us.superhero.powers p WHERE us.user.userId = :userId AND p.powerId = :powerId\")\n    List<Superhero> findSuperheroesByUserIdAndPower(Long userId, Long powerId);\n\n    List<UserSuperhero> findByUser_UserId(Long userId);\n}\n"
                    }
                },
                {
                    "id": 46,
                    "instruction": "Push your changes to github.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Superhero-Rest-Api\ngit add .\ngit commit -m \"Added repositories\"\ngit push",
                        "CopyCode": "cd Superhero-Rest-Api\ngit add .\ngit commit -m \"Added repositories\"\ngit push"
                    }
                },
                {
                    "id": 47,
                    "instruction": "Now we'll implement the security classes."
                },
                {
                    "id": 48,
                    "instruction": "Go to the src -> main -> java/com/superherobackend/superhero -> security folder."
                },
                {
                    "id": 49,
                    "instruction": "Open the \"AuthenticationResponse.java\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Java",
                        "FormatCode": "package com.superherobackend.superhero.security;\n\nimport com.superherobackend.superhero.dto.UserDTO;\n\npublic class AuthenticationResponse {\n    private String jwtToken;\n    private UserDTO user;\n\n    public AuthenticationResponse(String jwtToken, UserDTO user) {\n        this.jwtToken = jwtToken;\n        this.user = user;\n    }\n\n    public String getJwtToken() {\n        return jwtToken;\n    }\n\n    public void setJwtToken(String jwtToken) {\n        this.jwtToken = jwtToken;\n    }\n\n    public UserDTO getUser() {\n        return user;\n    }\n\n    public void setUser(UserDTO user) {\n        this.user = user;\n    }\n}\n",
                        "CopyCode": "package com.superherobackend.superhero.security;\n\nimport com.superherobackend.superhero.dto.UserDTO;\n\npublic class AuthenticationResponse {\n    private String jwtToken;\n    private UserDTO user;\n\n    public AuthenticationResponse(String jwtToken, UserDTO user) {\n        this.jwtToken = jwtToken;\n        this.user = user;\n    }\n\n    public String getJwtToken() {\n        return jwtToken;\n    }\n\n    public void setJwtToken(String jwtToken) {\n        this.jwtToken = jwtToken;\n    }\n\n    public UserDTO getUser() {\n        return user;\n    }\n\n    public void setUser(UserDTO user) {\n        this.user = user;\n    }\n}\n"
                    }
                },
                {
                    "id": 50,
                    "instruction": "Open the \"CustomUserDetails.java\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Java",
                        "FormatCode": "package com.superherobackend.superhero.security;\n\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport java.util.Collection;\n\npublic class CustomUserDetails implements UserDetails {\n\n    private Long id;\n    private String username;\n    private String password;\n    private Collection<? extends GrantedAuthority> authorities;\n\n    public CustomUserDetails(Long id, String username, String password, Collection<? extends GrantedAuthority> authorities) {\n        this.id = id;\n        this.username = username;\n        this.password = password;\n        this.authorities = authorities;\n    }\n\n    public Long getId() {\n        return id;\n    }\n\n    @Override\n    public Collection<? extends GrantedAuthority> getAuthorities() {\n        return authorities;\n    }\n\n    @Override\n    public String getPassword() {\n        return password;\n    }\n\n    @Override\n    public String getUsername() {\n        return username;\n    }\n\n    @Override\n    public boolean isAccountNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isAccountNonLocked() {\n        return true;\n    }\n\n    @Override\n    public boolean isCredentialsNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isEnabled() {\n        return true;\n    }\n}\n",
                        "CopyCode": "package com.superherobackend.superhero.security;\n\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport java.util.Collection;\n\npublic class CustomUserDetails implements UserDetails {\n\n    private Long id;\n    private String username;\n    private String password;\n    private Collection<? extends GrantedAuthority> authorities;\n\n    public CustomUserDetails(Long id, String username, String password, Collection<? extends GrantedAuthority> authorities) {\n        this.id = id;\n        this.username = username;\n        this.password = password;\n        this.authorities = authorities;\n    }\n\n    public Long getId() {\n        return id;\n    }\n\n    @Override\n    public Collection<? extends GrantedAuthority> getAuthorities() {\n        return authorities;\n    }\n\n    @Override\n    public String getPassword() {\n        return password;\n    }\n\n    @Override\n    public String getUsername() {\n        return username;\n    }\n\n    @Override\n    public boolean isAccountNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isAccountNonLocked() {\n        return true;\n    }\n\n    @Override\n    public boolean isCredentialsNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isEnabled() {\n        return true;\n    }\n}\n"
                    }
                },
                {
                    "id": 51,
                    "instruction": "Open the \"JwtUtil.java\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Java",
                        "FormatCode": "package com.superherobackend.superhero.security;\n\nimport io.jsonwebtoken.Claims;\nimport io.jsonwebtoken.Jwts;\nimport io.jsonwebtoken.SignatureAlgorithm;\nimport io.jsonwebtoken.security.Keys;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\nimport javax.crypto.SecretKey;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.function.Function;\n\n@Component\npublic class JwtUtil {\n\n    @Value(\"${jwt.secret}\")\n    private String SECRET_KEY;\n\n    private SecretKey getSigningKey() {\n        return Keys.hmacShaKeyFor(SECRET_KEY.getBytes());\n    }\n\n    public String extractUsername(String token) {\n        return extractClaim(token, Claims::getSubject);\n    }\n\n    public Date extractExpiration(String token) {\n        return extractClaim(token, Claims::getExpiration);\n    }\n\n    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {\n        final Claims claims = extractAllClaims(token);\n        return claimsResolver.apply(claims);\n    }\n\n    private Claims extractAllClaims(String token) {\n        return Jwts.parserBuilder()\n                .setSigningKey(getSigningKey())\n                .build()\n                .parseClaimsJws(token)\n                .getBody();\n    }\n\n    private Boolean isTokenExpired(String token) {\n        return extractExpiration(token).before(new Date());\n    }\n\n    public String generateToken(String username) {\n        Map<String, Object> claims = new HashMap<>();\n        return createToken(claims, username);\n    }\n\n    private String createToken(Map<String, Object> claims, String subject) {\n        return Jwts.builder()\n                .setClaims(claims)\n                .setSubject(subject)\n                .setIssuedAt(new Date(System.currentTimeMillis()))\n                .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60 * 10))\n                .signWith(getSigningKey(), SignatureAlgorithm.HS256)\n                .compact();\n    }\n\n    public Boolean validateToken(String token, String username) {\n        final String tokenUsername = extractUsername(token);\n        return (tokenUsername.equals(username) && !isTokenExpired(token));\n    }\n}\n",
                        "CopyCode": "package com.superherobackend.superhero.security;\n\nimport io.jsonwebtoken.Claims;\nimport io.jsonwebtoken.Jwts;\nimport io.jsonwebtoken.SignatureAlgorithm;\nimport io.jsonwebtoken.security.Keys;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\nimport javax.crypto.SecretKey;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.function.Function;\n\n@Component\npublic class JwtUtil {\n\n    @Value(\"${jwt.secret}\")\n    private String SECRET_KEY;\n\n    private SecretKey getSigningKey() {\n        return Keys.hmacShaKeyFor(SECRET_KEY.getBytes());\n    }\n\n    public String extractUsername(String token) {\n        return extractClaim(token, Claims::getSubject);\n    }\n\n    public Date extractExpiration(String token) {\n        return extractClaim(token, Claims::getExpiration);\n    }\n\n    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {\n        final Claims claims = extractAllClaims(token);\n        return claimsResolver.apply(claims);\n    }\n\n    private Claims extractAllClaims(String token) {\n        return Jwts.parserBuilder()\n                .setSigningKey(getSigningKey())\n                .build()\n                .parseClaimsJws(token)\n                .getBody();\n    }\n\n    private Boolean isTokenExpired(String token) {\n        return extractExpiration(token).before(new Date());\n    }\n\n    public String generateToken(String username) {\n        Map<String, Object> claims = new HashMap<>();\n        return createToken(claims, username);\n    }\n\n    private String createToken(Map<String, Object> claims, String subject) {\n        return Jwts.builder()\n                .setClaims(claims)\n                .setSubject(subject)\n                .setIssuedAt(new Date(System.currentTimeMillis()))\n                .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60 * 10))\n                .signWith(getSigningKey(), SignatureAlgorithm.HS256)\n                .compact();\n    }\n\n    public Boolean validateToken(String token, String username) {\n        final String tokenUsername = extractUsername(token);\n        return (tokenUsername.equals(username) && !isTokenExpired(token));\n    }\n}\n"
                    }
                },
                {
                    "id": 52,
                    "instruction": "Open the \"MyUserDetailsService.java\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Java",
                        "FormatCode": "package com.superherobackend.superhero.security;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.stereotype.Service;\n\nimport com.superherobackend.superhero.models.User;\nimport com.superherobackend.superhero.repositories.UserRepository;\n\nimport java.util.Collections;\nimport java.util.List;\n\n@Service\npublic class MyUserDetailsService implements UserDetailsService {\n\n    @Autowired\n    private UserRepository userRepository;\n\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n\n        User user = userRepository.findByUsername(username);\n\n        if (user == null) {\n            throw new UsernameNotFoundException(\"User not found with username: \" + username);\n        }\n\n        List<SimpleGrantedAuthority> authorities = Collections.singletonList(\n            new SimpleGrantedAuthority(\"ROLE_\" + user.getRole()) \n        );\n\n        return new CustomUserDetails(user.getUserId(), user.getUsername(), user.getHashedPassword(), authorities);\n    }\n}\n\n",
                        "CopyCode": "package com.superherobackend.superhero.security;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.stereotype.Service;\n\nimport com.superherobackend.superhero.models.User;\nimport com.superherobackend.superhero.repositories.UserRepository;\n\nimport java.util.Collections;\nimport java.util.List;\n\n@Service\npublic class MyUserDetailsService implements UserDetailsService {\n\n    @Autowired\n    private UserRepository userRepository;\n\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n\n        User user = userRepository.findByUsername(username);\n\n        if (user == null) {\n            throw new UsernameNotFoundException(\"User not found with username: \" + username);\n        }\n\n        List<SimpleGrantedAuthority> authorities = Collections.singletonList(\n            new SimpleGrantedAuthority(\"ROLE_\" + user.getRole()) \n        );\n\n        return new CustomUserDetails(user.getUserId(), user.getUsername(), user.getHashedPassword(), authorities);\n    }\n}\n\n"
                    }
                },
                {
                    "id": 53,
                    "instruction": "Open the \"JwtRequestFilter.java\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Java",
                        "FormatCode": "package com.superherobackend.superhero.security;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.web.authentication.WebAuthenticationDetailsSource;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.filter.OncePerRequestFilter;\n\nimport io.jsonwebtoken.ExpiredJwtException;\nimport io.jsonwebtoken.io.IOException;\nimport jakarta.servlet.FilterChain;\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\n\n@Component\npublic class JwtRequestFilter extends OncePerRequestFilter {\n\n    @Autowired\n    private MyUserDetailsService userDetailsService;\n\n    @Autowired\n    private JwtUtil jwtUtil;\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n            throws ServletException, IOException, java.io.IOException {\n\n        final String authorizationHeader = request.getHeader(\"Authorization\");\n\n        String username = null;\n        String jwt = null;\n\n        if (authorizationHeader != null && authorizationHeader.startsWith(\"Bearer \")) {\n            jwt = authorizationHeader.substring(7);\n            \n            try {\n                username = jwtUtil.extractUsername(jwt);\n            } catch (ExpiredJwtException e) {\n                logger.warn(\"JWT token is expired\");\n                System.out.println(\"JWT token expired for: \" + jwt);\n            } catch (Exception e) {\n                logger.error(\"Error parsing JWT token\", e);\n                System.out.println(\"Error parsing JWT token: \" + e.getMessage());\n            }\n        }\n\n        if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {\n            UserDetails userDetails = this.userDetailsService.loadUserByUsername(username);\n\n            if (jwtUtil.validateToken(jwt, userDetails.getUsername())) {\n\n                UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken = \n                    new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());\n\n                usernamePasswordAuthenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));\n                SecurityContextHolder.getContext().setAuthentication(usernamePasswordAuthenticationToken);\n            } else {\n                System.out.println(\"INVALID TOKEN FOR THE USER \" + username);\n            }\n        }\n\n        chain.doFilter(request, response);\n    }\n    \n}\n",
                        "CopyCode": "package com.superherobackend.superhero.security;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.web.authentication.WebAuthenticationDetailsSource;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.filter.OncePerRequestFilter;\n\nimport io.jsonwebtoken.ExpiredJwtException;\nimport io.jsonwebtoken.io.IOException;\nimport jakarta.servlet.FilterChain;\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\n\n@Component\npublic class JwtRequestFilter extends OncePerRequestFilter {\n\n    @Autowired\n    private MyUserDetailsService userDetailsService;\n\n    @Autowired\n    private JwtUtil jwtUtil;\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain)\n            throws ServletException, IOException, java.io.IOException {\n\n        final String authorizationHeader = request.getHeader(\"Authorization\");\n\n        String username = null;\n        String jwt = null;\n\n        if (authorizationHeader != null && authorizationHeader.startsWith(\"Bearer \")) {\n            jwt = authorizationHeader.substring(7);\n            \n            try {\n                username = jwtUtil.extractUsername(jwt);\n            } catch (ExpiredJwtException e) {\n                logger.warn(\"JWT token is expired\");\n                System.out.println(\"JWT token expired for: \" + jwt);\n            } catch (Exception e) {\n                logger.error(\"Error parsing JWT token\", e);\n                System.out.println(\"Error parsing JWT token: \" + e.getMessage());\n            }\n        }\n\n        if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {\n            UserDetails userDetails = this.userDetailsService.loadUserByUsername(username);\n\n            if (jwtUtil.validateToken(jwt, userDetails.getUsername())) {\n\n                UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken = \n                    new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());\n\n                usernamePasswordAuthenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));\n                SecurityContextHolder.getContext().setAuthentication(usernamePasswordAuthenticationToken);\n            } else {\n                System.out.println(\"INVALID TOKEN FOR THE USER \" + username);\n            }\n        }\n\n        chain.doFilter(request, response);\n    }\n    \n}\n"
                    }
                },
                {
                    "id": 54,
                    "instruction": "Open the \"SecurityConfig.java\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Java",
                        "FormatCode": "package com.superherobackend.superhero.security;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;\nimport org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.http.SessionCreationPolicy;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\nimport org.springframework.web.filter.CorsFilter;\n\nimport java.util.Arrays;\n\n@Configuration\n@EnableWebSecurity\n@EnableMethodSecurity(prePostEnabled = true)\npublic class SecurityConfig {\n\n    @Autowired\n    private JwtRequestFilter jwtRequestFilter;\n\n    @Autowired\n    private MyUserDetailsService myUserDetailsService;\n    \n    @Value(\"${frontend.url}\")\n    private String frontendUrl;\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n    @Bean\n    public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception {\n        return authenticationConfiguration.getAuthenticationManager();\n    }\n\n    @Bean\n    public CorsFilter corsFilter() {\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        CorsConfiguration config = new CorsConfiguration();\n        \n        config.setAllowCredentials(true);\n        config.setAllowedOrigins(Arrays.asList(frontendUrl));\n        config.setAllowedHeaders(Arrays.asList(\"Authorization\", \"Cache-Control\", \"Content-Type\"));\n        config.setAllowedMethods(Arrays.asList(\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"));\n        \n        source.registerCorsConfiguration(\"/**\", config);\n        return new CorsFilter(source);\n    }\n\n    @Bean\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n        http\n            .cors(cors -> cors.configurationSource(request -> {\n                CorsConfiguration config = new CorsConfiguration();\n                config.setAllowedOrigins(Arrays.asList(frontendUrl));\n                config.setAllowedMethods(Arrays.asList(\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"));\n                config.setAllowedHeaders(Arrays.asList(\"Authorization\", \"Cache-Control\", \"Content-Type\"));\n                config.setAllowCredentials(true);\n                return config;\n            }))\n            .csrf(csrf -> csrf.disable())\n            .authorizeHttpRequests(auth -> auth\n                .requestMatchers(\n                    \"/api/users/authenticate\", \n                    \"/api/users/create\",\n                    \"/\"\n                ).permitAll()\n                .anyRequest().authenticated()\n            )\n            .sessionManagement(session -> session\n                .sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n            );\n\n        http.addFilterBefore(jwtRequestFilter, UsernamePasswordAuthenticationFilter.class);\n\n        return http.build();\n    }\n    \n    @Bean\n    public UserDetailsService userDetailsService() {\n        return myUserDetailsService;\n    }\n}\n",
                        "CopyCode": "package com.superherobackend.superhero.security;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;\nimport org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.http.SessionCreationPolicy;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\nimport org.springframework.web.filter.CorsFilter;\n\nimport java.util.Arrays;\n\n@Configuration\n@EnableWebSecurity\n@EnableMethodSecurity(prePostEnabled = true)\npublic class SecurityConfig {\n\n    @Autowired\n    private JwtRequestFilter jwtRequestFilter;\n\n    @Autowired\n    private MyUserDetailsService myUserDetailsService;\n    \n    @Value(\"${frontend.url}\")\n    private String frontendUrl;\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n    @Bean\n    public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception {\n        return authenticationConfiguration.getAuthenticationManager();\n    }\n\n    @Bean\n    public CorsFilter corsFilter() {\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        CorsConfiguration config = new CorsConfiguration();\n        \n        config.setAllowCredentials(true);\n        config.setAllowedOrigins(Arrays.asList(frontendUrl));\n        config.setAllowedHeaders(Arrays.asList(\"Authorization\", \"Cache-Control\", \"Content-Type\"));\n        config.setAllowedMethods(Arrays.asList(\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"));\n        \n        source.registerCorsConfiguration(\"/**\", config);\n        return new CorsFilter(source);\n    }\n\n    @Bean\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n        http\n            .cors(cors -> cors.configurationSource(request -> {\n                CorsConfiguration config = new CorsConfiguration();\n                config.setAllowedOrigins(Arrays.asList(frontendUrl));\n                config.setAllowedMethods(Arrays.asList(\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"));\n                config.setAllowedHeaders(Arrays.asList(\"Authorization\", \"Cache-Control\", \"Content-Type\"));\n                config.setAllowCredentials(true);\n                return config;\n            }))\n            .csrf(csrf -> csrf.disable())\n            .authorizeHttpRequests(auth -> auth\n                .requestMatchers(\n                    \"/api/users/authenticate\", \n                    \"/api/users/create\",\n                    \"/\"\n                ).permitAll()\n                .anyRequest().authenticated()\n            )\n            .sessionManagement(session -> session\n                .sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n            );\n\n        http.addFilterBefore(jwtRequestFilter, UsernamePasswordAuthenticationFilter.class);\n\n        return http.build();\n    }\n    \n    @Bean\n    public UserDetailsService userDetailsService() {\n        return myUserDetailsService;\n    }\n}\n"
                    }
                },
                {
                    "id": 55,
                    "instruction": "Push your changes to github.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Superhero-Rest-Api\ngit add .\ngit commit -m \"Implemented Security\"\ngit push",
                        "CopyCode": "cd Superhero-Rest-Api\ngit add .\ngit commit -m \"Implemented Security\"\ngit push"
                    }
                },
                {
                    "id": 56,
                    "instruction": "Now we'll implement the service functions."
                },
                {
                    "id": 57,
                    "instruction": "Go to the src -> main -> java/com/superherobackend/superhero -> services folder."
                },
                {
                    "id": 58,
                    "instruction": "Open the \"S3ImageService.java\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Java",
                        "FormatCode": "package com.superherobackend.superhero.services;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport com.superherobackend.superhero.models.Image;\nimport com.superherobackend.superhero.models.Superhero;\nimport com.superherobackend.superhero.repositories.ImageRepository;\nimport com.superherobackend.superhero.repositories.SuperheroRepository;\n\nimport software.amazon.awssdk.core.sync.RequestBody;\nimport software.amazon.awssdk.services.s3.S3Client;\nimport software.amazon.awssdk.services.s3.model.DeleteObjectRequest;\nimport software.amazon.awssdk.services.s3.model.PutObjectRequest;\n\nimport java.util.UUID;\n\n@Service\npublic class S3ImageService {\n\n    @Autowired\n    private ImageRepository imageRepository;\n\n    @Autowired\n    private SuperheroRepository superheroRepository;\n\n    @Autowired\n    private S3Client s3Client;\n\n    @Value(\"${s3.superhero.bucket}\")\n    private String bucketName;\n    \n\n    public String getImageFilenameBySuperhero(Long superId) {\n        Superhero superhero = superheroRepository.findById(superId)\n                .orElseThrow(() -> new RuntimeException(\"Superhero not found with ID: \" + superId));\n    \n        Image image = imageRepository.findBySuperhero(superhero);\n    \n        if (image == null) {\n            throw new RuntimeException(\"Image not found for superhero ID: \" + superId);\n        }\n    \n        return image.getStoredFilename();\n    }\n\n\n    public String uploadImage(Long superId, MultipartFile file) throws Exception {\n        String originalFilename = file.getOriginalFilename();\n    \n        String fileExtension = \"\";\n        if (originalFilename != null && originalFilename.contains(\".\")) {\n            fileExtension = originalFilename.substring(originalFilename.lastIndexOf(\".\") + 1).toLowerCase();\n        }\n    \n        String storedFilename = UUID.randomUUID().toString().replace(\"-\", \"\") + \".\" + fileExtension;\n    \n        PutObjectRequest putObjectRequest = PutObjectRequest.builder()\n                .bucket(bucketName)\n                .key(storedFilename)\n                .build();\n    \n        s3Client.putObject(putObjectRequest, RequestBody.fromInputStream(file.getInputStream(), file.getSize()));\n    \n        Superhero superhero = superheroRepository.findById(superId)\n                .orElseThrow(() -> new RuntimeException(\"Superhero not found with ID: \" + superId));\n    \n        Image existingImage = imageRepository.findBySuperhero(superhero);\n        \n        if (existingImage != null) {\n            existingImage.setOriginalFilename(originalFilename);\n            existingImage.setStoredFilename(storedFilename);\n            imageRepository.save(existingImage);\n        } else {\n            // Create a new image if the image doesn't exist\n            Image newImage = new Image();\n\n            newImage.setOriginalFilename(originalFilename);\n            newImage.setStoredFilename(storedFilename);\n            newImage.setSuperhero(superhero);\n\n            imageRepository.save(newImage);\n        }\n    \n        return storedFilename;\n    }\n\n    public void deleteImage(String storedFilename) {\n        DeleteObjectRequest deleteObjectRequest = DeleteObjectRequest.builder()\n                .bucket(bucketName)\n                .key(storedFilename)\n                .build();\n\n        s3Client.deleteObject(deleteObjectRequest);\n    }\n\n}\n",
                        "CopyCode": "package com.superherobackend.superhero.services;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport com.superherobackend.superhero.models.Image;\nimport com.superherobackend.superhero.models.Superhero;\nimport com.superherobackend.superhero.repositories.ImageRepository;\nimport com.superherobackend.superhero.repositories.SuperheroRepository;\n\nimport software.amazon.awssdk.core.sync.RequestBody;\nimport software.amazon.awssdk.services.s3.S3Client;\nimport software.amazon.awssdk.services.s3.model.DeleteObjectRequest;\nimport software.amazon.awssdk.services.s3.model.PutObjectRequest;\n\nimport java.util.UUID;\n\n@Service\npublic class S3ImageService {\n\n    @Autowired\n    private ImageRepository imageRepository;\n\n    @Autowired\n    private SuperheroRepository superheroRepository;\n\n    @Autowired\n    private S3Client s3Client;\n\n    @Value(\"${s3.superhero.bucket}\")\n    private String bucketName;\n    \n\n    public String getImageFilenameBySuperhero(Long superId) {\n        Superhero superhero = superheroRepository.findById(superId)\n                .orElseThrow(() -> new RuntimeException(\"Superhero not found with ID: \" + superId));\n    \n        Image image = imageRepository.findBySuperhero(superhero);\n    \n        if (image == null) {\n            throw new RuntimeException(\"Image not found for superhero ID: \" + superId);\n        }\n    \n        return image.getStoredFilename();\n    }\n\n\n    public String uploadImage(Long superId, MultipartFile file) throws Exception {\n        String originalFilename = file.getOriginalFilename();\n    \n        String fileExtension = \"\";\n        if (originalFilename != null && originalFilename.contains(\".\")) {\n            fileExtension = originalFilename.substring(originalFilename.lastIndexOf(\".\") + 1).toLowerCase();\n        }\n    \n        String storedFilename = UUID.randomUUID().toString().replace(\"-\", \"\") + \".\" + fileExtension;\n    \n        PutObjectRequest putObjectRequest = PutObjectRequest.builder()\n                .bucket(bucketName)\n                .key(storedFilename)\n                .build();\n    \n        s3Client.putObject(putObjectRequest, RequestBody.fromInputStream(file.getInputStream(), file.getSize()));\n    \n        Superhero superhero = superheroRepository.findById(superId)\n                .orElseThrow(() -> new RuntimeException(\"Superhero not found with ID: \" + superId));\n    \n        Image existingImage = imageRepository.findBySuperhero(superhero);\n        \n        if (existingImage != null) {\n            existingImage.setOriginalFilename(originalFilename);\n            existingImage.setStoredFilename(storedFilename);\n            imageRepository.save(existingImage);\n        } else {\n            // Create a new image if the image doesn't exist\n            Image newImage = new Image();\n\n            newImage.setOriginalFilename(originalFilename);\n            newImage.setStoredFilename(storedFilename);\n            newImage.setSuperhero(superhero);\n\n            imageRepository.save(newImage);\n        }\n    \n        return storedFilename;\n    }\n\n    public void deleteImage(String storedFilename) {\n        DeleteObjectRequest deleteObjectRequest = DeleteObjectRequest.builder()\n                .bucket(bucketName)\n                .key(storedFilename)\n                .build();\n\n        s3Client.deleteObject(deleteObjectRequest);\n    }\n\n}\n"
                    }
                },
                {
                    "id": 59,
                    "instruction": "Open the \"SuperheroService.java\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Java",
                        "FormatCode": "package com.superherobackend.superhero.services;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport com.superherobackend.superhero.dto.SuperheroDTO;\nimport com.superherobackend.superhero.exceptions.DuplicateSuperheroException;\nimport com.superherobackend.superhero.models.Image;\nimport com.superherobackend.superhero.models.Power;\nimport com.superherobackend.superhero.models.Superhero;\nimport com.superherobackend.superhero.models.User;\nimport com.superherobackend.superhero.models.UserSuperhero;\nimport com.superherobackend.superhero.repositories.ImageRepository;\nimport com.superherobackend.superhero.repositories.PowerRepository;\nimport com.superherobackend.superhero.repositories.SuperheroRepository;\nimport com.superherobackend.superhero.repositories.UserRepository;\nimport com.superherobackend.superhero.repositories.UserSuperheroRepository;\nimport com.superherobackend.superhero.security.CustomUserDetails;\n\nimport java.util.Set;\nimport java.util.HashSet;\nimport java.util.List;\n\n@Service\npublic class SuperheroService {\n\n    @Autowired\n    private SuperheroRepository superheroRepository;\n\n    @Autowired\n    private PowerRepository powerRepository;\n\n    @Autowired\n    private UserRepository userRepository;\n\n    @Autowired\n    private UserSuperheroRepository userSuperheroRepository;\n\n    @Autowired\n    private ImageRepository imageRepository;\n\n    @Autowired\n    private S3ImageService s3ImageService;\n    \n    public List<Superhero> getAllSuperheroes() {\n        return superheroRepository.findAllSuperheroes();\n    }\n\n    @Transactional\n    public Superhero addNewSuperhero(SuperheroDTO superheroDTO, Long userId, MultipartFile image) throws Exception {\n        Long authenticatedUserId = getAuthenticatedUserId();\n\n        if (!authenticatedUserId.equals(userId)) {\n            throw new RuntimeException(\"You can only add superheroes to your own account.\");\n        }\n\n        Superhero existingSuperhero = superheroRepository.findByNameAndUserId(superheroDTO.getName(), userId);\n        \n        if (existingSuperhero != null) {\n            throw new DuplicateSuperheroException(\"Superhero already exists for this user!\");\n        }\n\n        Superhero superhero = new Superhero();\n        superhero.setName(superheroDTO.getName());\n        superhero.setRealName(superheroDTO.getRealName());\n        superhero.setUniverse(superheroDTO.getUniverse());\n        superhero.setYearCreated(superheroDTO.getYearCreated());\n        superhero.setCanDelete(superheroDTO.getCanDelete());\n\n        // Set the powers for the superhero\n        Set<Power> powers = new HashSet<>();\n        powerRepository.findAllById(superheroDTO.getPowerIds()).forEach(powers::add);\n        superhero.setPowers(powers);\n\n        // Save the new superhero in db\n        Superhero savedSuperhero = superheroRepository.save(superhero);\n\n        // Connect image with superhero\n        String storedFilename = s3ImageService.uploadImage(savedSuperhero.getSuperId(), image);\n\n\n        // Check if an image already exists for the superhero\n        Image existingImage = imageRepository.findBySuperhero(savedSuperhero);\n        \n        if (existingImage != null) {\n            existingImage.setOriginalFilename(image.getOriginalFilename());\n            existingImage.setStoredFilename(storedFilename);\n            imageRepository.save(existingImage);\n        } else {\n            Image newImage = new Image();\n            newImage.setOriginalFilename(image.getOriginalFilename());\n            newImage.setStoredFilename(storedFilename);\n            newImage.setSuperhero(savedSuperhero);\n            imageRepository.save(newImage);\n            savedSuperhero.setImage(newImage);\n        }\n\n        // Create the association between the superhero and user\n        User user = userRepository.findById(userId)\n            .orElseThrow(() -> new RuntimeException(\"User not found with ID: \" + userId));\n\n        UserSuperhero userSuperhero = new UserSuperhero(user, savedSuperhero);\n        userSuperheroRepository.save(userSuperhero);\n\n        return savedSuperhero;\n    }\n\n    public List<Superhero> getSuperheroesByPower(Long powerId) {\n        return superheroRepository.findByPowerId(powerId);\n    }\n\n    @Transactional\n    public void deleteSuperhero(Long superId) {\n        Long authenticatedUserId = getAuthenticatedUserId();\n        boolean isAdmin = isAuthenticatedUserAdmin();\n\n        Superhero superhero = superheroRepository.findById(superId)\n                .orElseThrow(() -> new RuntimeException(\"Superhero not found with ID: \" + superId));\n\n        if (!isAdmin) {\n            User owner = userSuperheroRepository.findOwnerBySuperheroId(superId);\n            if (owner == null || !owner.getUserId().equals(authenticatedUserId) || !superhero.getCanDelete()) {\n                throw new RuntimeException(\"You don't have permission to delete this superhero.\");\n            }\n        }\n\n        String storedFilename = imageRepository.findStoredFilenameBySuperheroId(superId);\n\n        if (storedFilename != null) {\n            s3ImageService.deleteImage(storedFilename);\n        }\n\n        // Delete the image data from the Images table\n        imageRepository.deleteBySuperheroSuperId(superId);\n\n        // Delete all associations between the superhero has with users\n        userSuperheroRepository.deleteBySuperhero_SuperId(superId);\n\n        // Delete the superhero and their powers\n        superheroRepository.deleteById(superId);\n    }\n\n    public Long getMaxSuperId() {\n        return superheroRepository.findMaxSuperId();\n    }\n\n    private Long getAuthenticatedUserId() {\n        CustomUserDetails userDetails = (CustomUserDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n        return userDetails.getId();\n    }\n\n    private boolean isAuthenticatedUserAdmin() {\n        return SecurityContextHolder.getContext().getAuthentication()\n            .getAuthorities().stream()\n            .anyMatch(grantedAuthority -> grantedAuthority.getAuthority().equals(\"ROLE_Admin\"));\n    }\n}\n",
                        "CopyCode": "package com.superherobackend.superhero.services;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport com.superherobackend.superhero.dto.SuperheroDTO;\nimport com.superherobackend.superhero.exceptions.DuplicateSuperheroException;\nimport com.superherobackend.superhero.models.Image;\nimport com.superherobackend.superhero.models.Power;\nimport com.superherobackend.superhero.models.Superhero;\nimport com.superherobackend.superhero.models.User;\nimport com.superherobackend.superhero.models.UserSuperhero;\nimport com.superherobackend.superhero.repositories.ImageRepository;\nimport com.superherobackend.superhero.repositories.PowerRepository;\nimport com.superherobackend.superhero.repositories.SuperheroRepository;\nimport com.superherobackend.superhero.repositories.UserRepository;\nimport com.superherobackend.superhero.repositories.UserSuperheroRepository;\nimport com.superherobackend.superhero.security.CustomUserDetails;\n\nimport java.util.Set;\nimport java.util.HashSet;\nimport java.util.List;\n\n@Service\npublic class SuperheroService {\n\n    @Autowired\n    private SuperheroRepository superheroRepository;\n\n    @Autowired\n    private PowerRepository powerRepository;\n\n    @Autowired\n    private UserRepository userRepository;\n\n    @Autowired\n    private UserSuperheroRepository userSuperheroRepository;\n\n    @Autowired\n    private ImageRepository imageRepository;\n\n    @Autowired\n    private S3ImageService s3ImageService;\n    \n    public List<Superhero> getAllSuperheroes() {\n        return superheroRepository.findAllSuperheroes();\n    }\n\n    @Transactional\n    public Superhero addNewSuperhero(SuperheroDTO superheroDTO, Long userId, MultipartFile image) throws Exception {\n        Long authenticatedUserId = getAuthenticatedUserId();\n\n        if (!authenticatedUserId.equals(userId)) {\n            throw new RuntimeException(\"You can only add superheroes to your own account.\");\n        }\n\n        Superhero existingSuperhero = superheroRepository.findByNameAndUserId(superheroDTO.getName(), userId);\n        \n        if (existingSuperhero != null) {\n            throw new DuplicateSuperheroException(\"Superhero already exists for this user!\");\n        }\n\n        Superhero superhero = new Superhero();\n        superhero.setName(superheroDTO.getName());\n        superhero.setRealName(superheroDTO.getRealName());\n        superhero.setUniverse(superheroDTO.getUniverse());\n        superhero.setYearCreated(superheroDTO.getYearCreated());\n        superhero.setCanDelete(superheroDTO.getCanDelete());\n\n        // Set the powers for the superhero\n        Set<Power> powers = new HashSet<>();\n        powerRepository.findAllById(superheroDTO.getPowerIds()).forEach(powers::add);\n        superhero.setPowers(powers);\n\n        // Save the new superhero in db\n        Superhero savedSuperhero = superheroRepository.save(superhero);\n\n        // Connect image with superhero\n        String storedFilename = s3ImageService.uploadImage(savedSuperhero.getSuperId(), image);\n\n\n        // Check if an image already exists for the superhero\n        Image existingImage = imageRepository.findBySuperhero(savedSuperhero);\n        \n        if (existingImage != null) {\n            existingImage.setOriginalFilename(image.getOriginalFilename());\n            existingImage.setStoredFilename(storedFilename);\n            imageRepository.save(existingImage);\n        } else {\n            Image newImage = new Image();\n            newImage.setOriginalFilename(image.getOriginalFilename());\n            newImage.setStoredFilename(storedFilename);\n            newImage.setSuperhero(savedSuperhero);\n            imageRepository.save(newImage);\n            savedSuperhero.setImage(newImage);\n        }\n\n        // Create the association between the superhero and user\n        User user = userRepository.findById(userId)\n            .orElseThrow(() -> new RuntimeException(\"User not found with ID: \" + userId));\n\n        UserSuperhero userSuperhero = new UserSuperhero(user, savedSuperhero);\n        userSuperheroRepository.save(userSuperhero);\n\n        return savedSuperhero;\n    }\n\n    public List<Superhero> getSuperheroesByPower(Long powerId) {\n        return superheroRepository.findByPowerId(powerId);\n    }\n\n    @Transactional\n    public void deleteSuperhero(Long superId) {\n        Long authenticatedUserId = getAuthenticatedUserId();\n        boolean isAdmin = isAuthenticatedUserAdmin();\n\n        Superhero superhero = superheroRepository.findById(superId)\n                .orElseThrow(() -> new RuntimeException(\"Superhero not found with ID: \" + superId));\n\n        if (!isAdmin) {\n            User owner = userSuperheroRepository.findOwnerBySuperheroId(superId);\n            if (owner == null || !owner.getUserId().equals(authenticatedUserId) || !superhero.getCanDelete()) {\n                throw new RuntimeException(\"You don't have permission to delete this superhero.\");\n            }\n        }\n\n        String storedFilename = imageRepository.findStoredFilenameBySuperheroId(superId);\n\n        if (storedFilename != null) {\n            s3ImageService.deleteImage(storedFilename);\n        }\n\n        // Delete the image data from the Images table\n        imageRepository.deleteBySuperheroSuperId(superId);\n\n        // Delete all associations between the superhero has with users\n        userSuperheroRepository.deleteBySuperhero_SuperId(superId);\n\n        // Delete the superhero and their powers\n        superheroRepository.deleteById(superId);\n    }\n\n    public Long getMaxSuperId() {\n        return superheroRepository.findMaxSuperId();\n    }\n\n    private Long getAuthenticatedUserId() {\n        CustomUserDetails userDetails = (CustomUserDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n        return userDetails.getId();\n    }\n\n    private boolean isAuthenticatedUserAdmin() {\n        return SecurityContextHolder.getContext().getAuthentication()\n            .getAuthorities().stream()\n            .anyMatch(grantedAuthority -> grantedAuthority.getAuthority().equals(\"ROLE_Admin\"));\n    }\n}\n"
                    }
                },
                {
                    "id": 60,
                    "instruction": "Open the \"UserService.java\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Java",
                        "FormatCode": "package com.superherobackend.superhero.services;\n\nimport java.util.List;\n\nimport org.mindrot.jbcrypt.BCrypt;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport com.superherobackend.superhero.dto.UserDTO;\nimport com.superherobackend.superhero.models.User;\nimport com.superherobackend.superhero.models.UserSuperhero;\nimport com.superherobackend.superhero.repositories.UserRepository;\nimport com.superherobackend.superhero.repositories.UserSuperheroRepository;\nimport com.superherobackend.superhero.security.AuthenticationResponse;\nimport com.superherobackend.superhero.security.JwtUtil;\n\n@Service\npublic class UserService {\n    \n    @Autowired\n    private UserRepository userRepository;\n\n    @Autowired\n    private UserSuperheroRepository userSuperheroRepository;\n\n    @Autowired\n    private JwtUtil jwtUtil;\n\n    public List<UserDTO> getAllUsers() {\n        return userRepository.fetchAllUsers();\n    }\n\n    public User getUserByUsername(String username) {\n        return userRepository.findByUsername(username);\n    }\n\n    public AuthenticationResponse authenticateUser(String username, String unhashedPassword) {\n        User user = userRepository.findByUsername(username);\n    \n        if (user != null && BCrypt.checkpw(unhashedPassword, user.getHashedPassword())) {\n            String jwtToken = jwtUtil.generateToken(user.getUsername());\n            UserDTO userDTO = new UserDTO(user);\n            return new AuthenticationResponse(jwtToken, userDTO);\n        } \n        \n        return null;\n    }\n    \n    public void addUser(String name, String username, String unhashedPassword) {\n        String hashedPassword = BCrypt.hashpw(unhashedPassword, BCrypt.gensalt(12));\n\n        User user = new User();\n        user.setName(name);\n        user.setRole(\"User\");\n        user.setUsername(username);\n        user.setHashedPassword(hashedPassword);\n        \n        userRepository.save(user);\n    }\n    \n    public Long getMaxUserId() {\n        return userRepository.findMaxUserId();\n    }\n\n    public void deleteUserById(Long userId) {\n        \n        if (userRepository.existsById(userId)) {\n\n            User user = userRepository.findByUserId(userId);\n\n            if (user.getRole().equals(\"Admin\")) {\n                throw new RuntimeException(\"Can't delete Admin user. Login to your database to perform this action\");\n            }\n\n            // Delete associated UserSuperhero records\n            List<UserSuperhero> userSuperheroes = userSuperheroRepository.findByUser_UserId(userId);\n            userSuperheroRepository.deleteAll(userSuperheroes);\n            \n            // Delete the user\n            userRepository.deleteById(userId);\n        } else {\n            throw new RuntimeException(\"User not found\");\n        }\n    }\n\n}\n",
                        "CopyCode": "package com.superherobackend.superhero.services;\n\nimport java.util.List;\n\nimport org.mindrot.jbcrypt.BCrypt;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport com.superherobackend.superhero.dto.UserDTO;\nimport com.superherobackend.superhero.models.User;\nimport com.superherobackend.superhero.models.UserSuperhero;\nimport com.superherobackend.superhero.repositories.UserRepository;\nimport com.superherobackend.superhero.repositories.UserSuperheroRepository;\nimport com.superherobackend.superhero.security.AuthenticationResponse;\nimport com.superherobackend.superhero.security.JwtUtil;\n\n@Service\npublic class UserService {\n    \n    @Autowired\n    private UserRepository userRepository;\n\n    @Autowired\n    private UserSuperheroRepository userSuperheroRepository;\n\n    @Autowired\n    private JwtUtil jwtUtil;\n\n    public List<UserDTO> getAllUsers() {\n        return userRepository.fetchAllUsers();\n    }\n\n    public User getUserByUsername(String username) {\n        return userRepository.findByUsername(username);\n    }\n\n    public AuthenticationResponse authenticateUser(String username, String unhashedPassword) {\n        User user = userRepository.findByUsername(username);\n    \n        if (user != null && BCrypt.checkpw(unhashedPassword, user.getHashedPassword())) {\n            String jwtToken = jwtUtil.generateToken(user.getUsername());\n            UserDTO userDTO = new UserDTO(user);\n            return new AuthenticationResponse(jwtToken, userDTO);\n        } \n        \n        return null;\n    }\n    \n    public void addUser(String name, String username, String unhashedPassword) {\n        String hashedPassword = BCrypt.hashpw(unhashedPassword, BCrypt.gensalt(12));\n\n        User user = new User();\n        user.setName(name);\n        user.setRole(\"User\");\n        user.setUsername(username);\n        user.setHashedPassword(hashedPassword);\n        \n        userRepository.save(user);\n    }\n    \n    public Long getMaxUserId() {\n        return userRepository.findMaxUserId();\n    }\n\n    public void deleteUserById(Long userId) {\n        \n        if (userRepository.existsById(userId)) {\n\n            User user = userRepository.findByUserId(userId);\n\n            if (user.getRole().equals(\"Admin\")) {\n                throw new RuntimeException(\"Can't delete Admin user. Login to your database to perform this action\");\n            }\n\n            // Delete associated UserSuperhero records\n            List<UserSuperhero> userSuperheroes = userSuperheroRepository.findByUser_UserId(userId);\n            userSuperheroRepository.deleteAll(userSuperheroes);\n            \n            // Delete the user\n            userRepository.deleteById(userId);\n        } else {\n            throw new RuntimeException(\"User not found\");\n        }\n    }\n\n}\n"
                    }
                },
                {
                    "id": 61,
                    "instruction": "Open the \"UserSuperheroService.java\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Java",
                        "FormatCode": "package com.superherobackend.superhero.services;\n\nimport java.util.List;\nimport java.util.Optional;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport com.superherobackend.superhero.models.Superhero;\nimport com.superherobackend.superhero.models.User;\nimport com.superherobackend.superhero.models.UserSuperhero;\nimport com.superherobackend.superhero.repositories.SuperheroRepository;\nimport com.superherobackend.superhero.repositories.UserRepository;\nimport com.superherobackend.superhero.repositories.UserSuperheroRepository;\nimport com.superherobackend.superhero.security.CustomUserDetails;\n\n@Service\npublic class UserSuperheroService {\n\n    @Autowired\n    private UserRepository userRepository;\n\n    @Autowired\n    private SuperheroRepository superheroRepository;\n\n    @Autowired\n    private UserSuperheroRepository userSuperheroRepository;\n\n    public List<Superhero> getAllSuperheroesByUserId(Long userId) {\n        Long authenticatedUserId = getAuthenticatedUserId();\n        boolean isAdmin = isAuthenticatedUserAdmin();\n\n        if (!isAdmin && !authenticatedUserId.equals(userId)) {\n            throw new RuntimeException(\"You can only view superheroes for your own account.\");\n        }\n\n        return userSuperheroRepository.findAllSuperheroesByUserId(userId);\n    }\n\n\n    public void addSuperheroToUser(Long userId, Long superheroId) {\n        Long authenticatedUserId = getAuthenticatedUserId();\n        boolean isAdmin = isAuthenticatedUserAdmin();\n\n        if (!isAdmin && !authenticatedUserId.equals(userId)) {\n            throw new RuntimeException(\"You can only add superheroes to your own account.\");\n        }\n\n        User user = userRepository.findById(userId)\n            .orElseThrow(() -> new RuntimeException(\"User not found with id: \" + userId));\n\n        Superhero superhero = superheroRepository.findById(superheroId)\n            .orElseThrow(() -> new RuntimeException(\"Superhero not found with id: \" + superheroId));\n\n        if (userSuperheroRepository.existsByUserUserIdAndSuperheroSuperId(userId, superheroId)) {\n            throw new RuntimeException(\"Superhero already associated with that user\");\n        }\n\n        UserSuperhero userSuperhero = new UserSuperhero(user, superhero);\n        userSuperheroRepository.save(userSuperhero);\n    }\n\n\n    @Transactional\n    public void deleteSuperheroFromUser(Long userId, Long superheroId) {\n        Long authenticatedUserId = getAuthenticatedUserId();\n        boolean isAdmin = isAuthenticatedUserAdmin();\n\n        if (!isAdmin && !authenticatedUserId.equals(userId)) {\n            throw new RuntimeException(\"You can only remove superheroes from your own account.\");\n        }\n\n        boolean exists = userSuperheroRepository.existsByUserUserIdAndSuperheroSuperId(userId, superheroId);\n\n        if (!exists) {\n            throw new RuntimeException(\"Association between user and superhero not found\");\n        }\n\n        userSuperheroRepository.deleteByUserUserIdAndSuperheroSuperId(userId, superheroId);\n    }\n    \n\n    public boolean isUserSuperhero(Long userId, Long superheroId) {\n        return userSuperheroRepository.existsByUserUserIdAndSuperheroSuperId(userId, superheroId);\n    }\n\n    public Optional<Superhero> getSuperheroById(Long superId) {\n        return userSuperheroRepository.findSuperheroById(superId);\n    }\n    \n    private Long getAuthenticatedUserId() {\n        CustomUserDetails userDetails = (CustomUserDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n        return userDetails.getId();\n    }\n\n    private boolean isAuthenticatedUserAdmin() {\n        return SecurityContextHolder.getContext().getAuthentication()\n            .getAuthorities().stream()\n            .anyMatch(grantedAuthority -> grantedAuthority.getAuthority().equals(\"ROLE_Admin\"));\n    }\n}",
                        "CopyCode": "package com.superherobackend.superhero.services;\n\nimport java.util.List;\nimport java.util.Optional;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport com.superherobackend.superhero.models.Superhero;\nimport com.superherobackend.superhero.models.User;\nimport com.superherobackend.superhero.models.UserSuperhero;\nimport com.superherobackend.superhero.repositories.SuperheroRepository;\nimport com.superherobackend.superhero.repositories.UserRepository;\nimport com.superherobackend.superhero.repositories.UserSuperheroRepository;\nimport com.superherobackend.superhero.security.CustomUserDetails;\n\n@Service\npublic class UserSuperheroService {\n\n    @Autowired\n    private UserRepository userRepository;\n\n    @Autowired\n    private SuperheroRepository superheroRepository;\n\n    @Autowired\n    private UserSuperheroRepository userSuperheroRepository;\n\n    public List<Superhero> getAllSuperheroesByUserId(Long userId) {\n        Long authenticatedUserId = getAuthenticatedUserId();\n        boolean isAdmin = isAuthenticatedUserAdmin();\n\n        if (!isAdmin && !authenticatedUserId.equals(userId)) {\n            throw new RuntimeException(\"You can only view superheroes for your own account.\");\n        }\n\n        return userSuperheroRepository.findAllSuperheroesByUserId(userId);\n    }\n\n\n    public void addSuperheroToUser(Long userId, Long superheroId) {\n        Long authenticatedUserId = getAuthenticatedUserId();\n        boolean isAdmin = isAuthenticatedUserAdmin();\n\n        if (!isAdmin && !authenticatedUserId.equals(userId)) {\n            throw new RuntimeException(\"You can only add superheroes to your own account.\");\n        }\n\n        User user = userRepository.findById(userId)\n            .orElseThrow(() -> new RuntimeException(\"User not found with id: \" + userId));\n\n        Superhero superhero = superheroRepository.findById(superheroId)\n            .orElseThrow(() -> new RuntimeException(\"Superhero not found with id: \" + superheroId));\n\n        if (userSuperheroRepository.existsByUserUserIdAndSuperheroSuperId(userId, superheroId)) {\n            throw new RuntimeException(\"Superhero already associated with that user\");\n        }\n\n        UserSuperhero userSuperhero = new UserSuperhero(user, superhero);\n        userSuperheroRepository.save(userSuperhero);\n    }\n\n\n    @Transactional\n    public void deleteSuperheroFromUser(Long userId, Long superheroId) {\n        Long authenticatedUserId = getAuthenticatedUserId();\n        boolean isAdmin = isAuthenticatedUserAdmin();\n\n        if (!isAdmin && !authenticatedUserId.equals(userId)) {\n            throw new RuntimeException(\"You can only remove superheroes from your own account.\");\n        }\n\n        boolean exists = userSuperheroRepository.existsByUserUserIdAndSuperheroSuperId(userId, superheroId);\n\n        if (!exists) {\n            throw new RuntimeException(\"Association between user and superhero not found\");\n        }\n\n        userSuperheroRepository.deleteByUserUserIdAndSuperheroSuperId(userId, superheroId);\n    }\n    \n\n    public boolean isUserSuperhero(Long userId, Long superheroId) {\n        return userSuperheroRepository.existsByUserUserIdAndSuperheroSuperId(userId, superheroId);\n    }\n\n    public Optional<Superhero> getSuperheroById(Long superId) {\n        return userSuperheroRepository.findSuperheroById(superId);\n    }\n    \n    private Long getAuthenticatedUserId() {\n        CustomUserDetails userDetails = (CustomUserDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n        return userDetails.getId();\n    }\n\n    private boolean isAuthenticatedUserAdmin() {\n        return SecurityContextHolder.getContext().getAuthentication()\n            .getAuthorities().stream()\n            .anyMatch(grantedAuthority -> grantedAuthority.getAuthority().equals(\"ROLE_Admin\"));\n    }\n}"
                    }
                },
                {
                    "id": 62,
                    "instruction": "Push your changes to github.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Superhero-Rest-Api\ngit add .\ngit commit -m \"Added services\"\ngit push",
                        "CopyCode": "cd Superhero-Rest-Api\ngit add .\ngit commit -m \"Added services\"\ngit push"
                    }
                },
                {
                    "id": 63,
                    "instruction": "Now we'll create our Controller classes. These are we're our endpoints will be."
                },
                {
                    "id": 64,
                    "instruction": "Go to the src -> main -> java/com/superherobackend/superhero -> controllers folder."
                },
                {
                    "id": 65,
                    "instruction": "Open the \"PowerController.java\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Java",
                        "FormatCode": "package com.superherobackend.superhero.controllers;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport com.superherobackend.superhero.models.Power;\nimport com.superherobackend.superhero.repositories.PowerRepository;\n\nimport java.util.List;\n\n@RestController\npublic class PowerController {\n\n    @Autowired\n    private PowerRepository powerRepository;\n    \n    @GetMapping(\"/powers\")\n    public ResponseEntity<List<Power>> getAllPowers() {\n        List<Power> powers = powerRepository.findAll();\n        return ResponseEntity.ok(powers);\n    }\n\n    @GetMapping(\"/superhero/{superId}\")\n    public ResponseEntity<List<Power>> getPowersBySuperhero(@PathVariable Long superId) {\n        List<Power> powers = powerRepository.findPowersBySuperheroId(superId);                     \n        return ResponseEntity.ok(powers);\n    }\n\n    @GetMapping(\"/powers/id\")\n    public ResponseEntity<Long> getPowerIdByName(@RequestParam String name) {\n        Power power = powerRepository.findByName(name);\n        if (power != null) {\n            return ResponseEntity.ok(power.getPowerId());\n        } else {\n            return ResponseEntity.notFound().build();\n        }\n    }\n\n    @GetMapping(\"/powers/{powerId}/name\")\n    public ResponseEntity<String> getPowerNameById(@PathVariable Long powerId) {\n        Power power = powerRepository.findById(powerId).orElse(null);\n        if (power != null) {\n            return ResponseEntity.ok(power.getName());\n        } else {\n            return ResponseEntity.notFound().build();\n        }\n    }\n\n}",
                        "CopyCode": "package com.superherobackend.superhero.controllers;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport com.superherobackend.superhero.models.Power;\nimport com.superherobackend.superhero.repositories.PowerRepository;\n\nimport java.util.List;\n\n@RestController\npublic class PowerController {\n\n    @Autowired\n    private PowerRepository powerRepository;\n    \n    @GetMapping(\"/powers\")\n    public ResponseEntity<List<Power>> getAllPowers() {\n        List<Power> powers = powerRepository.findAll();\n        return ResponseEntity.ok(powers);\n    }\n\n    @GetMapping(\"/superhero/{superId}\")\n    public ResponseEntity<List<Power>> getPowersBySuperhero(@PathVariable Long superId) {\n        List<Power> powers = powerRepository.findPowersBySuperheroId(superId);                     \n        return ResponseEntity.ok(powers);\n    }\n\n    @GetMapping(\"/powers/id\")\n    public ResponseEntity<Long> getPowerIdByName(@RequestParam String name) {\n        Power power = powerRepository.findByName(name);\n        if (power != null) {\n            return ResponseEntity.ok(power.getPowerId());\n        } else {\n            return ResponseEntity.notFound().build();\n        }\n    }\n\n    @GetMapping(\"/powers/{powerId}/name\")\n    public ResponseEntity<String> getPowerNameById(@PathVariable Long powerId) {\n        Power power = powerRepository.findById(powerId).orElse(null);\n        if (power != null) {\n            return ResponseEntity.ok(power.getName());\n        } else {\n            return ResponseEntity.notFound().build();\n        }\n    }\n\n}"
                    }
                },
                {
                    "id": 66,
                    "instruction": "Open the \"S3ImageController.java\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Java",
                        "FormatCode": "package com.superherobackend.superhero.controllers;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport com.superherobackend.superhero.services.S3ImageService;\n\n@RestController\n@RequestMapping(\"/images\")\npublic class S3ImageController {\n\n    @Autowired\n    private S3ImageService s3ImageService;\n\n    @PostMapping(\"/upload\")\n    public ResponseEntity<String> uploadImage(@RequestParam(\"superId\") Long superId,\n                                              @RequestParam(\"file\") MultipartFile file) {\n        try {\n            String filename = s3ImageService.uploadImage(superId, file);\n            return ResponseEntity.ok(\"Image uploaded successfully \" + filename);\n        } catch (Exception e) {\n            return ResponseEntity.badRequest().body(\"Failed to upload image: \" + e.getMessage());\n        }\n    }\n\n    @GetMapping(\"/{superId}\")\n    public ResponseEntity<String> getImageBySuperhero(@PathVariable Long superId) {\n        try {\n            String storedFilename = s3ImageService.getImageFilenameBySuperhero(superId);\n            \n            return ResponseEntity.ok(storedFilename);\n        } catch (Exception e) {\n            return ResponseEntity.badRequest().body(\"Error: \" + e.getMessage());\n        }\n    }\n\n}",
                        "CopyCode": "package com.superherobackend.superhero.controllers;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport com.superherobackend.superhero.services.S3ImageService;\n\n@RestController\n@RequestMapping(\"/images\")\npublic class S3ImageController {\n\n    @Autowired\n    private S3ImageService s3ImageService;\n\n    @PostMapping(\"/upload\")\n    public ResponseEntity<String> uploadImage(@RequestParam(\"superId\") Long superId,\n                                              @RequestParam(\"file\") MultipartFile file) {\n        try {\n            String filename = s3ImageService.uploadImage(superId, file);\n            return ResponseEntity.ok(\"Image uploaded successfully \" + filename);\n        } catch (Exception e) {\n            return ResponseEntity.badRequest().body(\"Failed to upload image: \" + e.getMessage());\n        }\n    }\n\n    @GetMapping(\"/{superId}\")\n    public ResponseEntity<String> getImageBySuperhero(@PathVariable Long superId) {\n        try {\n            String storedFilename = s3ImageService.getImageFilenameBySuperhero(superId);\n            \n            return ResponseEntity.ok(storedFilename);\n        } catch (Exception e) {\n            return ResponseEntity.badRequest().body(\"Error: \" + e.getMessage());\n        }\n    }\n\n}"
                    }
                },
                {
                    "id": 67,
                    "instruction": "Open the \"SuperheroController.java\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Java",
                        "FormatCode": "package com.superherobackend.superhero.controllers;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport com.superherobackend.superhero.dto.SuperheroDTO;\nimport com.superherobackend.superhero.exceptions.DuplicateSuperheroException;\nimport com.superherobackend.superhero.models.Superhero;\nimport com.superherobackend.superhero.services.SuperheroService;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/superheroes\")\npublic class SuperheroController {\n\n    @Autowired\n    private SuperheroService superheroService;\n\n    @GetMapping(\"/all\")\n    public ResponseEntity<List<Superhero>> getAllSuperheroes() {\n        List<Superhero> superheroes = superheroService.getAllSuperheroes();\n        return ResponseEntity.ok(superheroes);\n    }\n    \n    @PostMapping(\"/users/{userId}/superheroes/add\")\n    public ResponseEntity<?> addNewSuperhero(@PathVariable Long userId,\n                                             @RequestParam String name,\n                                             @RequestParam String realName,\n                                             @RequestParam String universe,\n                                             @RequestParam int yearCreated,\n                                             @RequestParam Boolean canDelete,\n                                             @RequestParam List<Long> powerIds,\n                                             @RequestParam MultipartFile image) {\n        try {\n            SuperheroDTO superheroDTO = new SuperheroDTO(name, realName, universe, yearCreated, canDelete, powerIds);\n            Superhero superhero = superheroService.addNewSuperhero(superheroDTO, userId, image);\n            return ResponseEntity.ok(superhero);\n        } catch (DuplicateSuperheroException e) {\n            return ResponseEntity.status(409).body(\"Superhero already exists for this user.\");\n        } catch (Exception e) {\n            return ResponseEntity.status(500).body(\"An error occurred: \" + e.getMessage());\n        }\n    }\n\n    @GetMapping(\"/max-id\")\n    public ResponseEntity<Long> getMaxSuperId() {\n        try {\n            Long maxSuperId = superheroService.getMaxSuperId();\n            return ResponseEntity.ok(maxSuperId);\n        } catch (Exception e) {\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                                 .body(null);\n        }\n    }\n\n    @GetMapping(\"/power/{powerId}\")\n    public ResponseEntity<List<Superhero>> getSuperheroesByPower(@PathVariable Long powerId) {\n        List<Superhero> superheroes = superheroService.getSuperheroesByPower(powerId);\n        return ResponseEntity.ok(superheroes);\n    }\n\n    @DeleteMapping(\"/{superId}\")\n    public ResponseEntity<String> deleteSuperhero(@PathVariable Long superId) {\n        try {\n            superheroService.deleteSuperhero(superId);\n            return ResponseEntity.ok(\"Superhero and all references deleted successfully\");\n        } catch (Exception e) {\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                                 .body(\"Error deleting superhero: \" + e.getMessage());\n        }\n    }\n    \n}\n",
                        "CopyCode": "package com.superherobackend.superhero.controllers;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport com.superherobackend.superhero.dto.SuperheroDTO;\nimport com.superherobackend.superhero.exceptions.DuplicateSuperheroException;\nimport com.superherobackend.superhero.models.Superhero;\nimport com.superherobackend.superhero.services.SuperheroService;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/superheroes\")\npublic class SuperheroController {\n\n    @Autowired\n    private SuperheroService superheroService;\n\n    @GetMapping(\"/all\")\n    public ResponseEntity<List<Superhero>> getAllSuperheroes() {\n        List<Superhero> superheroes = superheroService.getAllSuperheroes();\n        return ResponseEntity.ok(superheroes);\n    }\n    \n    @PostMapping(\"/users/{userId}/superheroes/add\")\n    public ResponseEntity<?> addNewSuperhero(@PathVariable Long userId,\n                                             @RequestParam String name,\n                                             @RequestParam String realName,\n                                             @RequestParam String universe,\n                                             @RequestParam int yearCreated,\n                                             @RequestParam Boolean canDelete,\n                                             @RequestParam List<Long> powerIds,\n                                             @RequestParam MultipartFile image) {\n        try {\n            SuperheroDTO superheroDTO = new SuperheroDTO(name, realName, universe, yearCreated, canDelete, powerIds);\n            Superhero superhero = superheroService.addNewSuperhero(superheroDTO, userId, image);\n            return ResponseEntity.ok(superhero);\n        } catch (DuplicateSuperheroException e) {\n            return ResponseEntity.status(409).body(\"Superhero already exists for this user.\");\n        } catch (Exception e) {\n            return ResponseEntity.status(500).body(\"An error occurred: \" + e.getMessage());\n        }\n    }\n\n    @GetMapping(\"/max-id\")\n    public ResponseEntity<Long> getMaxSuperId() {\n        try {\n            Long maxSuperId = superheroService.getMaxSuperId();\n            return ResponseEntity.ok(maxSuperId);\n        } catch (Exception e) {\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                                 .body(null);\n        }\n    }\n\n    @GetMapping(\"/power/{powerId}\")\n    public ResponseEntity<List<Superhero>> getSuperheroesByPower(@PathVariable Long powerId) {\n        List<Superhero> superheroes = superheroService.getSuperheroesByPower(powerId);\n        return ResponseEntity.ok(superheroes);\n    }\n\n    @DeleteMapping(\"/{superId}\")\n    public ResponseEntity<String> deleteSuperhero(@PathVariable Long superId) {\n        try {\n            superheroService.deleteSuperhero(superId);\n            return ResponseEntity.ok(\"Superhero and all references deleted successfully\");\n        } catch (Exception e) {\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\n                                 .body(\"Error deleting superhero: \" + e.getMessage());\n        }\n    }\n    \n}\n"
                    }
                },
                {
                    "id": 68,
                    "instruction": "Open the \"UserController.java\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Java",
                        "FormatCode": "package com.superherobackend.superhero.controllers;\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.access.prepost.PreAuthorize;\nimport org.springframework.web.bind.annotation.*;\n\nimport com.superherobackend.superhero.dto.UserDTO;\nimport com.superherobackend.superhero.models.User;\nimport com.superherobackend.superhero.models.UserAddRequest;\nimport com.superherobackend.superhero.models.UserAuthRequest;\nimport com.superherobackend.superhero.security.AuthenticationResponse;\nimport com.superherobackend.superhero.services.UserService;\n\n@RestController\n@RequestMapping(\"/api/users\")\npublic class UserController {\n    \n    @Autowired\n    private UserService userService;\n\n    @GetMapping(\"/all\")\n    @PreAuthorize(\"hasRole('Admin')\")\n    public ResponseEntity<List<UserDTO>> getAllUsers() {\n        List<UserDTO> users = userService.getAllUsers();\n\n        if (users != null) {\n            return ResponseEntity.ok(users);\n        } else {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);\n        }\n    }\n\n    @GetMapping(\"/{username}\")\n    public ResponseEntity<UserDTO> getUserByUsername(@PathVariable String username) {\n        User user = userService.getUserByUsername(username);\n        \n        if (user != null) {\n            UserDTO userDTO = new UserDTO(user);\n            return ResponseEntity.ok(userDTO);\n        } else {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);\n        }\n    }\n\n    @PostMapping(\"/authenticate\")\n    public ResponseEntity<AuthenticationResponse> authenticateUser(@RequestBody UserAuthRequest request) {\n        AuthenticationResponse response = userService.authenticateUser(request.getUsername(), request.getPassword());\n\n        if (response != null) {\n            return ResponseEntity.ok(response);\n        } else {\n            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(null);\n        }\n    }\n\n    @PostMapping(\"/create\")\n    public ResponseEntity<String> createUser(@RequestBody UserAddRequest request) {\n        userService.addUser(request.getName(), request.getUsername(), request.getPassword());\n        return ResponseEntity.status(HttpStatus.CREATED).body(\"User created successfully\");\n    }\n\n    @DeleteMapping(\"/{id}\")\n    @PreAuthorize(\"hasRole('Admin')\")\n    public ResponseEntity<String> deleteUserById(@PathVariable Long id) {\n        try {\n            userService.deleteUserById(id);\n            return ResponseEntity.ok(\"User successfully deleted!\");\n        } catch (RuntimeException e) {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());\n        }\n    }\n\n    @GetMapping(\"/max-id\")\n    public ResponseEntity<Long> getMaxUserId() {\n        Long maxUserId = userService.getMaxUserId();\n        return ResponseEntity.ok(maxUserId);\n    }\n    \n}\n",
                        "CopyCode": "package com.superherobackend.superhero.controllers;\n\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.access.prepost.PreAuthorize;\nimport org.springframework.web.bind.annotation.*;\n\nimport com.superherobackend.superhero.dto.UserDTO;\nimport com.superherobackend.superhero.models.User;\nimport com.superherobackend.superhero.models.UserAddRequest;\nimport com.superherobackend.superhero.models.UserAuthRequest;\nimport com.superherobackend.superhero.security.AuthenticationResponse;\nimport com.superherobackend.superhero.services.UserService;\n\n@RestController\n@RequestMapping(\"/api/users\")\npublic class UserController {\n    \n    @Autowired\n    private UserService userService;\n\n    @GetMapping(\"/all\")\n    @PreAuthorize(\"hasRole('Admin')\")\n    public ResponseEntity<List<UserDTO>> getAllUsers() {\n        List<UserDTO> users = userService.getAllUsers();\n\n        if (users != null) {\n            return ResponseEntity.ok(users);\n        } else {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);\n        }\n    }\n\n    @GetMapping(\"/{username}\")\n    public ResponseEntity<UserDTO> getUserByUsername(@PathVariable String username) {\n        User user = userService.getUserByUsername(username);\n        \n        if (user != null) {\n            UserDTO userDTO = new UserDTO(user);\n            return ResponseEntity.ok(userDTO);\n        } else {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);\n        }\n    }\n\n    @PostMapping(\"/authenticate\")\n    public ResponseEntity<AuthenticationResponse> authenticateUser(@RequestBody UserAuthRequest request) {\n        AuthenticationResponse response = userService.authenticateUser(request.getUsername(), request.getPassword());\n\n        if (response != null) {\n            return ResponseEntity.ok(response);\n        } else {\n            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(null);\n        }\n    }\n\n    @PostMapping(\"/create\")\n    public ResponseEntity<String> createUser(@RequestBody UserAddRequest request) {\n        userService.addUser(request.getName(), request.getUsername(), request.getPassword());\n        return ResponseEntity.status(HttpStatus.CREATED).body(\"User created successfully\");\n    }\n\n    @DeleteMapping(\"/{id}\")\n    @PreAuthorize(\"hasRole('Admin')\")\n    public ResponseEntity<String> deleteUserById(@PathVariable Long id) {\n        try {\n            userService.deleteUserById(id);\n            return ResponseEntity.ok(\"User successfully deleted!\");\n        } catch (RuntimeException e) {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());\n        }\n    }\n\n    @GetMapping(\"/max-id\")\n    public ResponseEntity<Long> getMaxUserId() {\n        Long maxUserId = userService.getMaxUserId();\n        return ResponseEntity.ok(maxUserId);\n    }\n    \n}\n"
                    }
                },
                {
                    "id": 69,
                    "instruction": "Open the \"UserSuperheroController.java\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Java",
                        "FormatCode": "package com.superherobackend.superhero.controllers;\n\nimport java.util.List;\nimport java.util.Optional;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport com.superherobackend.superhero.models.Superhero;\nimport com.superherobackend.superhero.repositories.UserSuperheroRepository;\nimport com.superherobackend.superhero.services.UserSuperheroService;\n\n@RestController\npublic class UserSuperheroController {\n\n    @Autowired\n    private UserSuperheroService userSuperheroService;\n\n    @Autowired\n    private UserSuperheroRepository userSuperheroRepository;\n\n    @GetMapping(\"/users/{userId}/superheroes\")\n    public ResponseEntity<List<Superhero>> getUserSuperheroes(@PathVariable Long userId) {\n        List<Superhero> superheroes = userSuperheroService.getAllSuperheroesByUserId(userId);\n        return ResponseEntity.ok(superheroes);\n    }\n\n    @PostMapping(\"/users/{userId}/superheroes/{superheroId}\")\n    public ResponseEntity<String> addSuperheroToUser(@PathVariable Long userId, @PathVariable Long superheroId) {\n        try {\n            userSuperheroService.addSuperheroToUser(userId, superheroId);\n            return ResponseEntity.status(HttpStatus.OK).body(\"Superhero added to user successfully\");\n        } catch (RuntimeException e) {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());\n        }\n    }\n\n    @DeleteMapping(\"/users/{userId}/superheroes/{superheroId}\")\n    public ResponseEntity<String> removeSuperheroFromUser(@PathVariable Long userId, @PathVariable Long superheroId) {\n        try {\n            userSuperheroService.deleteSuperheroFromUser(userId, superheroId);\n            return ResponseEntity.status(HttpStatus.OK).body(\"Superhero removed from user successfully\");\n        } catch (RuntimeException e) {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());\n        }\n    }\n\n    @GetMapping(\"/users/{userId}/superheroes/{superheroId}/exists\")\n    public ResponseEntity<Boolean> isUserSuperhero(@PathVariable Long userId, @PathVariable Long superheroId) {\n        boolean exists = userSuperheroService.isUserSuperhero(userId, superheroId);\n        return ResponseEntity.ok(exists);\n    }\n\n    @GetMapping(\"/superheroes/{superId}\")\n    public ResponseEntity<Superhero> getSuperheroById(@PathVariable Long superId) {\n        Optional<Superhero> superhero = userSuperheroService.getSuperheroById(superId);\n        return superhero.map(ResponseEntity::ok)\n                        .orElse(ResponseEntity.notFound().build());\n    }\n\n    @GetMapping(\"/users/{userId}/superheroes/universe\")\n    public ResponseEntity<List<Superhero>> getUserSuperheroesByUniverse(@PathVariable Long userId, @RequestParam String universe) {\n        List<Superhero> superheroes = userSuperheroRepository.findSuperheroesByUserIdAndUniverse(userId, universe);\n        return ResponseEntity.ok(superheroes);\n    }\n\n    @GetMapping(\"/users/{userId}/superheroes/power\")\n    public ResponseEntity<List<Superhero>> getUserSuperheroesByPower(@PathVariable Long userId, @RequestParam Long powerId) {\n        List<Superhero> superheroes = userSuperheroRepository.findSuperheroesByUserIdAndPower(userId, powerId);\n        return ResponseEntity.ok(superheroes);\n    }\n}",
                        "CopyCode": "package com.superherobackend.superhero.controllers;\n\nimport java.util.List;\nimport java.util.Optional;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport com.superherobackend.superhero.models.Superhero;\nimport com.superherobackend.superhero.repositories.UserSuperheroRepository;\nimport com.superherobackend.superhero.services.UserSuperheroService;\n\n@RestController\npublic class UserSuperheroController {\n\n    @Autowired\n    private UserSuperheroService userSuperheroService;\n\n    @Autowired\n    private UserSuperheroRepository userSuperheroRepository;\n\n    @GetMapping(\"/users/{userId}/superheroes\")\n    public ResponseEntity<List<Superhero>> getUserSuperheroes(@PathVariable Long userId) {\n        List<Superhero> superheroes = userSuperheroService.getAllSuperheroesByUserId(userId);\n        return ResponseEntity.ok(superheroes);\n    }\n\n    @PostMapping(\"/users/{userId}/superheroes/{superheroId}\")\n    public ResponseEntity<String> addSuperheroToUser(@PathVariable Long userId, @PathVariable Long superheroId) {\n        try {\n            userSuperheroService.addSuperheroToUser(userId, superheroId);\n            return ResponseEntity.status(HttpStatus.OK).body(\"Superhero added to user successfully\");\n        } catch (RuntimeException e) {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());\n        }\n    }\n\n    @DeleteMapping(\"/users/{userId}/superheroes/{superheroId}\")\n    public ResponseEntity<String> removeSuperheroFromUser(@PathVariable Long userId, @PathVariable Long superheroId) {\n        try {\n            userSuperheroService.deleteSuperheroFromUser(userId, superheroId);\n            return ResponseEntity.status(HttpStatus.OK).body(\"Superhero removed from user successfully\");\n        } catch (RuntimeException e) {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());\n        }\n    }\n\n    @GetMapping(\"/users/{userId}/superheroes/{superheroId}/exists\")\n    public ResponseEntity<Boolean> isUserSuperhero(@PathVariable Long userId, @PathVariable Long superheroId) {\n        boolean exists = userSuperheroService.isUserSuperhero(userId, superheroId);\n        return ResponseEntity.ok(exists);\n    }\n\n    @GetMapping(\"/superheroes/{superId}\")\n    public ResponseEntity<Superhero> getSuperheroById(@PathVariable Long superId) {\n        Optional<Superhero> superhero = userSuperheroService.getSuperheroById(superId);\n        return superhero.map(ResponseEntity::ok)\n                        .orElse(ResponseEntity.notFound().build());\n    }\n\n    @GetMapping(\"/users/{userId}/superheroes/universe\")\n    public ResponseEntity<List<Superhero>> getUserSuperheroesByUniverse(@PathVariable Long userId, @RequestParam String universe) {\n        List<Superhero> superheroes = userSuperheroRepository.findSuperheroesByUserIdAndUniverse(userId, universe);\n        return ResponseEntity.ok(superheroes);\n    }\n\n    @GetMapping(\"/users/{userId}/superheroes/power\")\n    public ResponseEntity<List<Superhero>> getUserSuperheroesByPower(@PathVariable Long userId, @RequestParam Long powerId) {\n        List<Superhero> superheroes = userSuperheroRepository.findSuperheroesByUserIdAndPower(userId, powerId);\n        return ResponseEntity.ok(superheroes);\n    }\n}"
                    }
                },
                {
                    "id": 70,
                    "instruction": "Push your changes to github.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Superhero-Rest-Api\ngit add .\ngit commit -m \"Added controllers\"\ngit push",
                        "CopyCode": "cd Superhero-Rest-Api\ngit add .\ngit commit -m \"Added controllers\"\ngit push"
                    }
                },
                {
                    "id": 71,
                    "instruction": "Now we'll add a test to show how JUnit works."
                },
                {
                    "id": 72,
                    "instruction": "Now we'll add a quick test. Go to test -> java -> com -> superherobackend -> superhero -> controllers."
                },
                {
                    "id": 73,
                    "instruction": "Open the \"UserServiceTest.java\" file. Paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Java",
                        "FormatCode": "package com.superherobackend.superhero.controllers;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.when;\nimport static org.mockito.Mockito.verify;\n\nimport com.superherobackend.superhero.models.User;\nimport com.superherobackend.superhero.repositories.UserRepository;\nimport com.superherobackend.superhero.services.UserService;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\npublic class UserServiceTest {\n\n    @Mock\n    private UserRepository userRepository;\n\n    @InjectMocks\n    private UserService userService;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void testGetUserByUsername() {\n        \n        String username = \"john_doe\";\n        User mockUser = new User(1L, \"John Doe\", \"User\", username, \"hashed_password\");\n        when(userRepository.findByUsername(username)).thenReturn(mockUser);\n\n        User result = userService.getUserByUsername(username);\n\n        assertEquals(mockUser, result);\n        verify(userRepository).findByUsername(username);\n    }\n}\n",
                        "CopyCode": "package com.superherobackend.superhero.controllers;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.mockito.Mockito.when;\nimport static org.mockito.Mockito.verify;\n\nimport com.superherobackend.superhero.models.User;\nimport com.superherobackend.superhero.repositories.UserRepository;\nimport com.superherobackend.superhero.services.UserService;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\npublic class UserServiceTest {\n\n    @Mock\n    private UserRepository userRepository;\n\n    @InjectMocks\n    private UserService userService;\n\n    @BeforeEach\n    public void setUp() {\n        MockitoAnnotations.openMocks(this);\n    }\n\n    @Test\n    public void testGetUserByUsername() {\n        \n        String username = \"john_doe\";\n        User mockUser = new User(1L, \"John Doe\", \"User\", username, \"hashed_password\");\n        when(userRepository.findByUsername(username)).thenReturn(mockUser);\n\n        User result = userService.getUserByUsername(username);\n\n        assertEquals(mockUser, result);\n        verify(userRepository).findByUsername(username);\n    }\n}\n"
                    }
                },
                {
                    "id": 74,
                    "instruction": "Now commit your testing file to Github.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Superhero-Rest-Api\ngit add .\ngit commit \"Testing\"\ngit push",
                        "CopyCode": "cd Superhero-Rest-Api\ngit add .\ngit commit \"Testing\"\ngit push"
                    }
                },
                {
                    "id": 75,
                    "instruction": "Open a new terminal and use the following commands to run your test.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Superhero-Rest-Api\n./gradlew test",
                        "CopyCode": "cd Superhero-Rest-Api\n./gradlew test"
                    }
                },
                {
                    "id": 76,
                    "instruction": "You can add the \"--info\" flag for more information on why a test passed or failed.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "./gradlew test --info",
                        "CopyCode": "./gradlew test --info"
                    }
                },
                {
                    "id": 77,
                    "instruction": "To rerun your tests use the following command",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "./gradlew test --rerun-tasks",
                        "CopyCode": "./gradlew test --rerun-tasks"
                    }
                },
                {
                    "id": 78,
                    "instruction": "Go to build -> reports -> tests -> test and you'll see the index.html. Open the file in your browser using the following command. The file will be a UI for your test results.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "open build/reports/tests/test/index.html",
                        "CopyCode": "open build/reports/tests/test/index.html"
                    }
                },
                {
                    "id": 79,
                    "instruction": "Now we'll run our Rest API and test the endpoints."
                },
                {
                    "id": 80,
                    "instruction": "Install the [Thunder Client](https://marketplace.visualstudio.com/items?itemName=rangav.vscode-thunder-client) VSCode extension if you haven't already. It's basically Postman for VSCode and we're going to use it to ping our endpoints."
                },
                {
                    "id": 81,
                    "instruction": "Once you have the extension installed go to the very top above VSCode and press the \"File\" button. In the drop-down select \"New Window\". This will open another VSCode window where you can use Thunder Client."
                },
                {
                    "id": 82,
                    "instruction": "Go to your terminal in one of your VSCode windows and start running your API by using the following commands.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Superhero-Rest-Api\ngradle run",
                        "CopyCode": "cd Superhero-Rest-Api\ngradle run"
                    }
                },
                {
                    "id": 83,
                    "instruction": "Now go to your second VSCode window and open Thunder Client by clicking on the symbol of the left-hand side that looks like a circle with a thunderbolt throught it. Then click the blue \"New Request\" to open a new dashboard."
                },
                {
                    "id": 84,
                    "instruction": "The very first thing we'll do is authenticate as admin. Press the \"Body\" tab and paste the following JSON data in the text area. Press \"command + s\" to save.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JSON",
                        "FormatCode": "{\n  \"username\": \"admin_guy\",\n  \"password\": \"password0\"\n}",
                        "CopyCode": "{\n  \"username\": \"admin_guy\",\n  \"password\": \"password0\"\n}"
                    }
                },
                {
                    "id": 85,
                    "instruction": "Now in the top field paste in the following link and set the request type to \"POST\". Then press send",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "HTTP Request",
                        "FormatCode": "POST http://localhost:8080/api/users/authenticate\n\n*Press Send*",
                        "CopyCode": "POST http://localhost:8080/api/users/authenticate\n\n*Press Send*"
                    }
                },
                {
                    "id": 86,
                    "instruction": "In the response copy and record the value of the jwtToken attribute. You'll need it in the next step"
                },
                {
                    "id": 87,
                    "instruction": "Go to the \"Headers\" tab. Set all the headers and their values. Replace \"JWT-TOKEN\" with your jwtToken from the previous step.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "Headers",
                        "FormatCode": "Accept: */*\nUser-Agent: Thunder Client (https://www.thunderclient.com)\nContent-Type: application/json\nAuthorization: Bearer JWT-TOKEN\n\n* Press command + s to save *\n",
                        "CopyCode": "Accept: */*\nUser-Agent: Thunder Client (https://www.thunderclient.com)\nContent-Type: application/json\nAuthorization: Bearer JWT-TOKEN\n\n* Press command + s to save *\n"
                    }
                },
                {
                    "id": 88,
                    "instruction": "Go back up to the field and enter the following URL. Set the HTTP request, then press send. Do that for both requests. These two endpoints can only be accessed by the admin. The 2nd one will delete the user with id 6 in the database.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "HTTP Request",
                        "FormatCode": "GET http://localhost:8080/api/users/all\n\n* Press Send *\n\nDELETE http://localhost:8080/api/users/6\n\n* Press Send *\n",
                        "CopyCode": "GET http://localhost:8080/api/users/all\n\nDELETE http://localhost:8080/api/users/6\n"
                    }
                },
                {
                    "id": 89,
                    "instruction": "Now we'll log in as a User instead of Admin. Go back to the \"Body\" tab. Delete the current data and paste in the new JSON.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JSON",
                        "FormatCode": "{\n  \"username\": \"john_doe\",\n  \"password\": \"password1\"\n}",
                        "CopyCode": "{\n  \"username\": \"john_doe\",\n  \"password\": \"password1\"\n}"
                    }
                },
                {
                    "id": 90,
                    "instruction": "Now in the field enter the following link and press send. Make sure it's a POST request.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "HTTP Requests",
                        "FormatCode": "POST http://localhost:8080/api/users/authenticate\n\n*Press Send*",
                        "CopyCode": "POST http://localhost:8080/api/users/authenticate\n\n*Press Send*"
                    }
                },
                {
                    "id": 91,
                    "instruction": "In the response copy and record the new value of the jwtToken. Then go to the \"Headers\" tab and replace the old token with the new one in the \"Authorization\" header. Replace \"NEW-JWT-TOKEN\" with the new one.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "Header",
                        "FormatCode": "Authorization: Bearer NEW-JWT-TOKEN\n\n* Press command + s to save *\n",
                        "CopyCode": "Authorization: Bearer NEW-JWT-TOKEN\n\n* Press command + s to save *\n"
                    }
                },
                {
                    "id": 92,
                    "instruction": "Congratulations! You should now be authorized as a User instead of an Admin."
                },
                {
                    "id": 93,
                    "instruction": "Test your Power endpoints. Remember to set the type to GET. Press send after each request. These are NOT terminal commands.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "HTTP Requests",
                        "FormatCode": "GET http://localhost:8080/powers\nGET http://localhost:8080/superhero/1\nGET http://localhost:8080/powers/2/name\nGET http://localhost:8080/powers/id?name=Strength",
                        "CopyCode": "GET http://localhost:8080/powers\nGET http://localhost:8080/superhero/1\nGET http://localhost:8080/powers/2/name\nGET http://localhost:8080/powers/id?name=Strength"
                    }
                },
                {
                    "id": 94,
                    "instruction": "Test your S3Image endpoint",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "HTTP Requests",
                        "FormatCode": "GET http://localhost:8080/images/1",
                        "CopyCode": "GET http://localhost:8080/images/1"
                    }
                },
                {
                    "id": 95,
                    "instruction": "Now we'll start testing the Superhero endpoints.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "HTTP Requests",
                        "FormatCode": "GET http://localhost:8080/superheroes/all\nGET http://localhost:8080/superheroes/power/1",
                        "CopyCode": "GET http://localhost:8080/superheroes/all\nGET http://localhost:8080/superheroes/power/1"
                    }
                },
                {
                    "id": 96,
                    "instruction": "If you don't have the paid version of Thunder Client ignore steps 97-99 skip to step 101."
                },
                {
                    "id": 97,
                    "instruction": "Now we'll make a POST request. Do NOT press send yet.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "HTTP Requests",
                        "FormatCode": "POST http://localhost:8080/superheroes/users/1/superheroes/add",
                        "CopyCode": "POST http://localhost:8080/superheroes/users/1/superheroes/add"
                    }
                },
                {
                    "id": 98,
                    "instruction": "Go back to the \"Body\" tab. In the \"Body\" tab press the Form tab. Add the following values in the form fields.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "HTTP Requests",
                        "FormatCode": "name: Bat2\nrealName: Delete this\nuniverse: Marvel\nyearCreated: 1991\ncanDelete: true\npowerIds: 3\npowerIds: 2\n\n* Press \"command + s\" to save *\n\n* Check the \"Files\" box * \n\nMake the field name \"image\"\n\nUpload an image from your computer.\n\n* Press the send button *",
                        "CopyCode": "name: Bat2\nrealName: Delete this\nuniverse: Marvel\nyearCreated: 1991\ncanDelete: true\npowerIds: 3\npowerIds: 2\n\n* Press \"command + s\" to save *\n\n* Check the \"Files\" box * \n\nMake the field name \"image\"\n\nUpload an image from your computer.\n\n* Press the send button *"
                    }
                },
                {
                    "id": 99,
                    "instruction": "You can delete your test superhero with the following requests. Replace \"{superId}\" with the actual max-id.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "HTTP Requests",
                        "FormatCode": "GET http://localhost:8080/superheroes/max-id\nDELETE http://localhost:8080/superheroes/{superId}",
                        "CopyCode": "GET http://localhost:8080/superheroes/max-id\nDELETE http://localhost:8080/superheroes/{superId}"
                    }
                },
                {
                    "id": 100,
                    "instruction": "You can do steps 97-99 using Postman for free. This [video](https://youtu.be/S7bwkys6D0E?si=1-8i40mZa14Rva1z) explains how to upload a file in a POST request."
                },
                {
                    "id": 101,
                    "instruction": "I'll show how to run add superhero request in terminal since you'd need the paid version of Thunder client or Postman downloaded to upload it. I also thought it'd be good to show how the terminal command would work."
                },
                {
                    "id": 102,
                    "instruction": "Open a new terminal and run the following command. <br><br>• Replace \"/Users/YOURUSERNAME/path/to/image/Picture.jpg\" with an actual image path from your computer.<br><br>• Replace \"JWT-TOKEN\" with your actual jwtToken.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "HTTP Requests",
                        "FormatCode": "curl -X POST \\\n-F \"name=Bat2\" \\\n-F \"realName=Delete this\" \\\n-F \"universe=Marvel\" \\\n-F \"yearCreated=1991\" \\\n-F \"canDelete=true\" \\\n-F \"powerIds=3\" \\\n-F \"powerIds=2\" \\\n-F \"image=@/Users/YOURUSERNAME/path/to/image/Picture.jpg\" \\\n-H \"Authorization: Bearer JWT-TOKEN\" \\\nhttp://localhost:8080/superheroes/users/2/superheroes/add\n",
                        "CopyCode": "curl -X POST \\\n-F \"name=Bat2\" \\\n-F \"realName=Delete this\" \\\n-F \"universe=Marvel\" \\\n-F \"yearCreated=1991\" \\\n-F \"canDelete=true\" \\\n-F \"powerIds=3\" \\\n-F \"powerIds=2\" \\\n-F \"image=@/Users/YOURUSERNAME/path/to/image/Picture.jpg\" \\\n-H \"Authorization: Bearer JWT-TOKEN\" \\\nhttp://localhost:8080/superheroes/users/2/superheroes/add\n"
                    }
                },
                {
                    "id": 103,
                    "instruction": "This step is optional, but you can open a new terminal and run the commands to see your new Superhero data.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customsql",
                        "DisplayLang": "SQL",
                        "FormatCode": "mysql -u superhero_user -p superhero_db\n\nSELECT * FROM superheroes;\nSELECT * FROM images;",
                        "CopyCode": "mysql -u superhero_user -p superhero_db\n\nSELECT * FROM superheroes;\nSELECT * FROM images;"
                    }
                },
                {
                    "id": 104,
                    "instruction": "Go back to Thunder Client and test your superhero with the following requests. Replace \"{superId}\" with the actual max-id.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "HTTP Requests",
                        "FormatCode": "GET http://localhost:8080/superheroes/max-id\nDELETE http://localhost:8080/superheroes/{superId}",
                        "CopyCode": "GET http://localhost:8080/superheroes/max-id\nDELETE http://localhost:8080/superheroes/{superId}"
                    }
                },
                {
                    "id": 105,
                    "instruction": "Start testing your other User endpoints in Thunder Client.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "HTTP Request",
                        "FormatCode": "GET http://localhost:8080/api/users/john_doe",
                        "CopyCode": "GET http://localhost:8080/api/users/john_doe"
                    }
                },
                {
                    "id": 106,
                    "instruction": "Now go back to the \"Body\" tab in the JSON Content area paste the following data.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "HTTP Requests",
                        "FormatCode": "{\n  \"name\": \"Jimmy Page\",\n  \"username\": \"jimmy_page\",\n  \"password\": \"guitarplayer123\"\n}",
                        "CopyCode": "{\n  \"name\": \"Jimmy Page\",\n  \"username\": \"jimmy_page\",\n  \"password\": \"guitarplayer123\"\n}"
                    }
                },
                {
                    "id": 107,
                    "instruction": "Now add the User using the following endpoint.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "HTTP Requests",
                        "FormatCode": "POST http://localhost:8080/api/users/create",
                        "CopyCode": "POST http://localhost:8080/api/users/create"
                    }
                },
                {
                    "id": 108,
                    "instruction": "This step is optional, you can open a new terminal and run the following commands to see the changes in your database.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customsql",
                        "DisplayLang": "SQL",
                        "FormatCode": "mysql -u superhero_user -p superhero_db\n\nSELECT * FROM users;",
                        "CopyCode": "mysql -u superhero_user -p superhero_db\n\nSELECT * FROM users;"
                    }
                },
                {
                    "id": 109,
                    "instruction": "In Thunder Client send the following to see the id of the last user you added. We used the other User endpoints when we were logged in as an Admin.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "HTTP Requests",
                        "FormatCode": "GET http://localhost:8080/api/users/max-id",
                        "CopyCode": "GET http://localhost:8080/api/users/max-id"
                    }
                },
                {
                    "id": 110,
                    "instruction": "Now test the User Superhero endpoints",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "HTTP Requests",
                        "FormatCode": "GET http://localhost:8080/users/2/superheroes\n\nGET http://localhost:8080/users/2/superheroes/9/exists\n\nGET http://localhost:8080/superheroes/2\n\nGET http://localhost:8080/users/2/superheroes/universe?universe=Marvel\n\nGET http://localhost:8080/users/2/superheroes/universe?universe=DC\n\nGET http://localhost:8080/users/2/superheroes/power?powerId=2\n\nPOST  http://localhost:8080/users/2/superheroes/9\n\nDELETE http://localhost:8080/users/2/superheroes/9",
                        "CopyCode": "GET http://localhost:8080/users/2/superheroes\n\nGET http://localhost:8080/users/2/superheroes/9/exists\n\nGET http://localhost:8080/superheroes/2\n\nGET http://localhost:8080/users/2/superheroes/universe?universe=Marvel\n\nGET http://localhost:8080/users/2/superheroes/universe?universe=DC\n\nGET http://localhost:8080/users/2/superheroes/power?powerId=2\n\nPOST  http://localhost:8080/users/2/superheroes/9\n\nDELETE http://localhost:8080/users/2/superheroes/9"
                    }
                },
                {
                    "id": 111,
                    "instruction": "Congratulations! You have successfully tested all endpoints in your Rest API.!"
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "React Website Folder Setup Explanation",
                    "desc": "Explanation of the folders that will be used for your frontend code."
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "<u><b>src/api</b></u> - Functions used to call and interact with your backend Rest API endpoints. It's a similar concept to the repository functions interacting with the database. Low-level database logic."
                },
                {
                    "id": 2,
                    "instruction": "<u><b>src/assets</b></u> - Where you'll put things like your pictures, data, etc."
                },
                {
                    "id": 3,
                    "instruction": "<u><b>src/components</b></u> - Components that you can use in your views. An example would a Note card."
                },
                {
                    "id": 4,
                    "instruction": "<u><b>src/lib</b></u> - Where you'll put the link to where your backend Rest API is being hosted. For this project it should probably be something like \"http://127.0.0.1:5000\" in development."
                },
                {
                    "id": 5,
                    "instruction": "<u><b>src/router</b></u> - The paths of your application. Used to navigate between pages in your application."
                },
                {
                    "id": 6,
                    "instruction": "<u><b>src/services</b></u> - Business logic for your api functions. High-level logic and business rules."
                },
                {
                    "id": 7,
                    "instruction": "<u><b>src/states</b></u> - A management system you can use to store data and methods you can use to modify and interact with it. It's pretty similar to a class."
                },
                {
                    "id": 8,
                    "instruction": "<u><b>src/styles</b></u> - Where your CSS styles will be kept for the views and the components."
                },
                {
                    "id": 9,
                    "instruction": "<u><b>src/tests</b></u> - Where your jest tests will be held for the application."
                },
                {
                    "id": 10,
                    "instruction": "<u><b>src/utils</b></u> - Common functions that are used across various views."
                },
                {
                    "id": 11,
                    "instruction": "<u><b>src/views</b></u> - The pages of your application. The components will be used in these views."
                },
                {
                    "id": 12,
                    "instruction": "<u><b>public</b></u> - Where to store things like videos and files that the user can download."
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "Create your React Website",
                    "desc": "Explains how to create your React Website and connect it to your Spring Boot Rest Api."
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "First we'll setup our project structure.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Superhero-Frontend\n\ntouch src/api/powerAPI.tsx\ntouch src/api/s3imageAPI.tsx\ntouch src/api/superheroAPI.tsx\ntouch src/api/userAPI.tsx\ntouch src/api/userSuperheroAPI.tsx\n\ntouch src/components/CustomAlert.jsx\ntouch src/components/DisplayTable.jsx\ntouch src/components/Layout.jsx\ntouch src/components/NavBar.jsx\ntouch src/components/SuperheroCard.jsx\n\ntouch src/lib/axios.js\n\ntouch src/router/index.jsx\n\n\ntouch src/services/powerService.tsx\ntouch src/services/s3imageService.tsx\ntouch src/services/superheroService.tsx\ntouch src/services/userService.tsx\ntouch src/services/userSuperheroService.tsx\n\n\ntouch src/states/auth.jsx\ntouch src/states/store.js\ntouch src/states/team.js\n\n\ntouch src/styles/components/CustomAlert.module.css\ntouch src/styles/components/DisplayTable.module.css\ntouch src/styles/components/NavBar.module.css\ntouch src/styles/components/SuperheroCard.module.css\n\ntouch src/styles/views/Add.module.css\ntouch src/styles/views/Admin.module.css\ntouch src/styles/views/CharacterPage.module.css\ntouch src/styles/views/HomePage.module.css\ntouch src/styles/views/Powers.module.css\ntouch src/styles/views/Register.module.css\ntouch src/styles/views/SignIn.module.css\ntouch src/styles/views/Team.module.css\n\n\ntouch src/tests/SignIn.test.js\n\n\ntouch src/utils/apiError.js\n\n\ntouch src/views/Add.jsx\ntouch src/views/AdminDashboard.jsx\ntouch src/views/CharacterPage.jsx\ntouch src/views/Powers.jsx\ntouch src/views/Register.jsx\ntouch src/views/SignIn.jsx\ntouch src/views/Team.jsx",
                        "CopyCode": "cd Superhero-Frontend\n\ntouch src/api/powerAPI.tsx\ntouch src/api/s3imageAPI.tsx\ntouch src/api/superheroAPI.tsx\ntouch src/api/userAPI.tsx\ntouch src/api/userSuperheroAPI.tsx\n\ntouch src/components/CustomAlert.jsx\ntouch src/components/DisplayTable.jsx\ntouch src/components/Layout.jsx\ntouch src/components/NavBar.jsx\ntouch src/components/SuperheroCard.jsx\n\ntouch src/lib/axios.js\n\ntouch src/router/index.jsx\n\n\ntouch src/services/powerService.tsx\ntouch src/services/s3imageService.tsx\ntouch src/services/superheroService.tsx\ntouch src/services/userService.tsx\ntouch src/services/userSuperheroService.tsx\n\n\ntouch src/states/auth.jsx\ntouch src/states/store.js\ntouch src/states/team.js\n\n\ntouch src/styles/components/CustomAlert.module.css\ntouch src/styles/components/DisplayTable.module.css\ntouch src/styles/components/NavBar.module.css\ntouch src/styles/components/SuperheroCard.module.css\n\ntouch src/styles/views/Add.module.css\ntouch src/styles/views/Admin.module.css\ntouch src/styles/views/CharacterPage.module.css\ntouch src/styles/views/HomePage.module.css\ntouch src/styles/views/Powers.module.css\ntouch src/styles/views/Register.module.css\ntouch src/styles/views/SignIn.module.css\ntouch src/styles/views/Team.module.css\n\n\ntouch src/tests/SignIn.test.js\n\n\ntouch src/utils/apiError.js\n\n\ntouch src/views/Add.jsx\ntouch src/views/AdminDashboard.jsx\ntouch src/views/CharacterPage.jsx\ntouch src/views/Powers.jsx\ntouch src/views/Register.jsx\ntouch src/views/SignIn.jsx\ntouch src/views/Team.jsx"
                    }
                },
                {
                    "id": 2,
                    "instruction": "Install the following packages in your project.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "clear\nnpm install axios\nnpm install react-toastify\nnpm install @reduxjs/toolkit react-redux\nnpm install react-text-mask",
                        "CopyCode": "clear\nnpm install axios\nnpm install react-toastify\nnpm install @reduxjs/toolkit react-redux\nnpm install react-text-mask"
                    }
                },
                {
                    "id": 3,
                    "instruction": "First we'll implement our axios instance so that we can communicate with our Rest API."
                },
                {
                    "id": 4,
                    "instruction": "Open your folder in VSCode. Then go to src -> lib. Open the \"axios.js\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "FormatCode": "import axios from 'axios';\n\nconst axiosInstance = axios.create({\n  baseURL: 'http://localhost:8080',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  }\n});\n\naxiosInstance.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    } else if (config.url !== \"/api/users/authenticate\" && config.url !== \"/api/users/create\") {\n      console.log('No token found in LocalStorage');\n    }\n\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\nexport default axiosInstance;\n",
                        "CopyCode": "import axios from 'axios';\n\nconst axiosInstance = axios.create({\n  baseURL: 'http://localhost:8080',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  }\n});\n\naxiosInstance.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    } else if (config.url !== \"/api/users/authenticate\" && config.url !== \"/api/users/create\") {\n      console.log('No token found in LocalStorage');\n    }\n\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\nexport default axiosInstance;\n"
                    }
                },
                {
                    "id": 5,
                    "instruction": "Now we'll implement our API functions to ping the Rest API endpoints."
                },
                {
                    "id": 6,
                    "instruction": "Open the \"powerAPI.tsx\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "TypeScript",
                        "FormatCode": "// @ts-ignore\nimport axiosInstance from '../lib/axios';\n\ninterface Power {\n  power_id: number;\n  name: string;\n}\n\nexport async function fetchAllPowers(): Promise<Power[] | null> {\n  try {\n    const response = await axiosInstance.get('/powers');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching powers:', error);\n    return null;\n  }\n}\n\nexport async function fetchPowersBySuperhero(superId: number): Promise<Power[] | null> {\n  try {\n    const response = await axiosInstance.get(`/superhero/${superId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching powers by superhero:', error);\n    return null;\n  }\n}\n\nexport async function fetchPowerIdByName(name: string): Promise<number | null> {\n  try {\n    const response = await axiosInstance.get('/powers/id', {\n      params: { name },\n    });\n\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching power ID by name:', error);\n    return null;\n  }\n}\n\nexport async function fetchPowerNameById(powerId: number): Promise<string | null> {\n  try {\n    const response = await axiosInstance.get(`/powers/${powerId}/name`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching power name by ID:', error);\n    return null;\n  }\n}",
                        "CopyCode": "// @ts-ignore\nimport axiosInstance from '../lib/axios';\n\ninterface Power {\n  power_id: number;\n  name: string;\n}\n\nexport async function fetchAllPowers(): Promise<Power[] | null> {\n  try {\n    const response = await axiosInstance.get('/powers');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching powers:', error);\n    return null;\n  }\n}\n\nexport async function fetchPowersBySuperhero(superId: number): Promise<Power[] | null> {\n  try {\n    const response = await axiosInstance.get(`/superhero/${superId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching powers by superhero:', error);\n    return null;\n  }\n}\n\nexport async function fetchPowerIdByName(name: string): Promise<number | null> {\n  try {\n    const response = await axiosInstance.get('/powers/id', {\n      params: { name },\n    });\n\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching power ID by name:', error);\n    return null;\n  }\n}\n\nexport async function fetchPowerNameById(powerId: number): Promise<string | null> {\n  try {\n    const response = await axiosInstance.get(`/powers/${powerId}/name`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching power name by ID:', error);\n    return null;\n  }\n}"
                    }
                },
                {
                    "id": 7,
                    "instruction": "Open the \"s3imageAPI.tsx\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "TypeScript",
                        "FormatCode": "// @ts-ignore\nimport axiosInstance from '../lib/axios';\n\n\nexport async function uploadImageAWS(superId: number, file: File): Promise<string | null> {\n  try {\n    const formData = new FormData();\n    formData.append('superId', superId.toString());\n    formData.append('file', file);\n\n    const response = await axiosInstance.post('/images/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n\n    return response.data;\n  } catch (error) {\n    console.error('Error uploading image:', error);\n    return null;\n  }\n}\n\n\nexport async function fetchImageBySuperheroId(superId: number): Promise<string | null> {\n  try {\n    const response = await axiosInstance.get(`/images/${superId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching image:', error);\n    return null;\n  }\n}",
                        "CopyCode": "// @ts-ignore\nimport axiosInstance from '../lib/axios';\n\n\nexport async function uploadImageAWS(superId: number, file: File): Promise<string | null> {\n  try {\n    const formData = new FormData();\n    formData.append('superId', superId.toString());\n    formData.append('file', file);\n\n    const response = await axiosInstance.post('/images/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n\n    return response.data;\n  } catch (error) {\n    console.error('Error uploading image:', error);\n    return null;\n  }\n}\n\n\nexport async function fetchImageBySuperheroId(superId: number): Promise<string | null> {\n  try {\n    const response = await axiosInstance.get(`/images/${superId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching image:', error);\n    return null;\n  }\n}"
                    }
                },
                {
                    "id": 8,
                    "instruction": "Open the \"superheroAPI.tsx\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "TypeScript",
                        "FormatCode": "// @ts-ignore\nimport { AxiosError } from 'axios';\n// @ts-ignore\nimport axiosInstance from '../lib/axios';\n\ninterface SuperheroDTO {\n  name: string;\n  realName: string;\n  universe: string;\n  yearCreated: number;\n  canDelete: boolean;\n  powerIds: number[];\n  image: File;\n}\n\ninterface Superhero {\n  super_id: number;\n  name: string;\n  realName: string;\n  universe: string;\n  yearCreated: number;\n}\n\nexport async function fetchAllSuperheroes(): Promise<Superhero[] | null> {\n  try {\n    const response = await axiosInstance.get('/superheroes/all');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching Superheroes: ', error);\n    return null;\n  }\n}\n\nexport async function createNewSuperhero(userId: number, superheroDTO: SuperheroDTO): Promise<any> {\n  try {\n    const formData = new FormData();\n    formData.append('name', superheroDTO.name);\n    formData.append('realName', superheroDTO.realName);\n    formData.append('universe', superheroDTO.universe);\n    formData.append('yearCreated', superheroDTO.yearCreated.toString());\n    formData.append(\"canDelete\", superheroDTO.canDelete.toString());\n    formData.append('powerIds', superheroDTO.powerIds.join(','));\n    formData.append('image', superheroDTO.image);\n\n    const response = await axiosInstance.post(\n      `/superheroes/users/${userId}/superheroes/add`,\n      formData,\n      {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      }\n    );\n\n    return response.data;\n  } catch (error) {\n    if (error instanceof AxiosError) {\n      throw new Error(`API Error: ${error.response?.data || error.message}`);\n    } else {\n      throw new Error('Unexpected error occurred');\n    }\n  }\n}\n\nexport async function fetchAllSuperheroesByPower(powerId: number): Promise<Superhero[] | null> {\n  try {\n    const response = await axiosInstance.get(`/superheroes/power/${powerId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching Superheroes: ', error);\n    return null;\n  }\n}\n\nexport async function removeCharacterFromDatabase(superId: number): Promise<String | null> {\n  try {\n    const response = await axiosInstance.delete(`/superheroes/${superId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error deleting character ', error);\n    return null;\n  }\n}\n",
                        "CopyCode": "// @ts-ignore\nimport { AxiosError } from 'axios';\n// @ts-ignore\nimport axiosInstance from '../lib/axios';\n\ninterface SuperheroDTO {\n  name: string;\n  realName: string;\n  universe: string;\n  yearCreated: number;\n  canDelete: boolean;\n  powerIds: number[];\n  image: File;\n}\n\ninterface Superhero {\n  super_id: number;\n  name: string;\n  realName: string;\n  universe: string;\n  yearCreated: number;\n}\n\nexport async function fetchAllSuperheroes(): Promise<Superhero[] | null> {\n  try {\n    const response = await axiosInstance.get('/superheroes/all');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching Superheroes: ', error);\n    return null;\n  }\n}\n\nexport async function createNewSuperhero(userId: number, superheroDTO: SuperheroDTO): Promise<any> {\n  try {\n    const formData = new FormData();\n    formData.append('name', superheroDTO.name);\n    formData.append('realName', superheroDTO.realName);\n    formData.append('universe', superheroDTO.universe);\n    formData.append('yearCreated', superheroDTO.yearCreated.toString());\n    formData.append(\"canDelete\", superheroDTO.canDelete.toString());\n    formData.append('powerIds', superheroDTO.powerIds.join(','));\n    formData.append('image', superheroDTO.image);\n\n    const response = await axiosInstance.post(\n      `/superheroes/users/${userId}/superheroes/add`,\n      formData,\n      {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      }\n    );\n\n    return response.data;\n  } catch (error) {\n    if (error instanceof AxiosError) {\n      throw new Error(`API Error: ${error.response?.data || error.message}`);\n    } else {\n      throw new Error('Unexpected error occurred');\n    }\n  }\n}\n\nexport async function fetchAllSuperheroesByPower(powerId: number): Promise<Superhero[] | null> {\n  try {\n    const response = await axiosInstance.get(`/superheroes/power/${powerId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching Superheroes: ', error);\n    return null;\n  }\n}\n\nexport async function removeCharacterFromDatabase(superId: number): Promise<String | null> {\n  try {\n    const response = await axiosInstance.delete(`/superheroes/${superId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error deleting character ', error);\n    return null;\n  }\n}\n"
                    }
                },
                {
                    "id": 9,
                    "instruction": "Open the \"userAPI.tsx\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "TypeScript",
                        "FormatCode": "// @ts-ignore\nimport axiosInstance from '../lib/axios.js';\n\ninterface User {\n  userId: number;\n  name: string;\n  role: string;\n  username: string;\n  hashedPassword: string;\n}\n\ninterface UserDTO {\n  id: number;\n  name: string;\n  role: string;\n  username: string;\n}\n\ninterface UserAuthRequest {\n  username: string;\n  password: string;\n}\n\ninterface UserAddRequest {\n  name: string;\n  username: string;\n  password: string;\n}\n\nexport async function fetchAllUsers(): Promise<User | null> {\n  try {\n    const response = await axiosInstance.get(`/api/users/all`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching users:', error);\n    return null;\n  }\n}\n\nexport async function fetchUserByUsername(username: string): Promise<UserDTO | null> {\n  try {\n    const response = await axiosInstance.get(`/api/users/${username}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching user:', error);\n    return null;\n  }\n}\n\nexport async function loginUser(request: UserAuthRequest): Promise<{ user: UserDTO, token: string } | null> {\n  try {\n    const response = await axiosInstance.post('/api/users/authenticate', request);\n\n    const { jwtToken: token, user } = response.data;\n\n    return { user, token };\n  } catch (error) {\n    console.error('Authentication failed:', error);\n    return null;\n  }\n}\n\nexport async function deleteUserFromDatabase(userId: number): Promise<string | null> {\n  try {\n    const response = await axiosInstance.delete(`/api/users/${userId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error adding user:', error);\n    return null;\n  }\n}\n\nexport async function createUser(request: UserAddRequest): Promise<string | null> {\n  try {\n    const response = await axiosInstance.post('/api/users/create', request);\n    return response.data;\n  } catch (error) {\n    console.error('Error adding user:', error);\n    return null;\n  }\n}",
                        "CopyCode": "// @ts-ignore\nimport axiosInstance from '../lib/axios.js';\n\ninterface User {\n  userId: number;\n  name: string;\n  role: string;\n  username: string;\n  hashedPassword: string;\n}\n\ninterface UserDTO {\n  id: number;\n  name: string;\n  role: string;\n  username: string;\n}\n\ninterface UserAuthRequest {\n  username: string;\n  password: string;\n}\n\ninterface UserAddRequest {\n  name: string;\n  username: string;\n  password: string;\n}\n\nexport async function fetchAllUsers(): Promise<User | null> {\n  try {\n    const response = await axiosInstance.get(`/api/users/all`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching users:', error);\n    return null;\n  }\n}\n\nexport async function fetchUserByUsername(username: string): Promise<UserDTO | null> {\n  try {\n    const response = await axiosInstance.get(`/api/users/${username}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching user:', error);\n    return null;\n  }\n}\n\nexport async function loginUser(request: UserAuthRequest): Promise<{ user: UserDTO, token: string } | null> {\n  try {\n    const response = await axiosInstance.post('/api/users/authenticate', request);\n\n    const { jwtToken: token, user } = response.data;\n\n    return { user, token };\n  } catch (error) {\n    console.error('Authentication failed:', error);\n    return null;\n  }\n}\n\nexport async function deleteUserFromDatabase(userId: number): Promise<string | null> {\n  try {\n    const response = await axiosInstance.delete(`/api/users/${userId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error adding user:', error);\n    return null;\n  }\n}\n\nexport async function createUser(request: UserAddRequest): Promise<string | null> {\n  try {\n    const response = await axiosInstance.post('/api/users/create', request);\n    return response.data;\n  } catch (error) {\n    console.error('Error adding user:', error);\n    return null;\n  }\n}"
                    }
                },
                {
                    "id": 10,
                    "instruction": "Open the \"userSuperheroAPI.tsx\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "TypeScript",
                        "FormatCode": "// @ts-ignore\nimport axiosInstance from '../lib/axios';\n\ninterface Superhero {\n  super_id: number;\n  name: string;\n  realName: string;\n  universe: string;\n  yearCreated: number;\n}\n\nexport async function fetchUserSuperheroes(userId: number): Promise<Superhero[] | null> {\n  try {\n    const response = await axiosInstance.get(`/users/${userId}/superheroes`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching user superheroes:', error);\n    return null;\n  }\n}\n\nexport async function assignSuperheroToUser(userId: number, superheroId: number): Promise<string> {\n  try {\n    const response = await axiosInstance.post(`/users/${userId}/superheroes/${superheroId}`);\n    return response.data; \n  } catch (error) {\n    console.error('Unexpected error:', error);\n    return 'Error adding superhero to user';\n  }\n}\n\nexport async function unassignSuperheroFromUser(userId: number, superheroId: number): Promise<string> {\n  try {\n    const response = await axiosInstance.delete(`/users/${userId}/superheroes/${superheroId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Unexpected error:', error);\n    return 'Error removing superhero from user';\n  }\n}\n\nexport async function isUserSuperheroAssociation(userId: number, superheroId: number): Promise<boolean> {\n  try {\n    const response = await axiosInstance.get(`/users/${userId}/superheroes/${superheroId}/exists`);\n    return response.data;\n  } catch (error) {\n    console.error('Error checking if user has superhero:', error);\n    return false;\n  }\n}\n\n\n\n\nexport async function fetchSuperheroById(superId: number): Promise<Superhero[] | null> {\n  try {\n    const response = await axiosInstance.get(`/superheroes/${superId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching user superheroes:', error);\n    return null;\n  }\n}\n\nexport async function fetchUserSuperheroesByUniverse(userId: number, universe: string): Promise<Superhero[] | null> {\n  try {\n    const response = await axiosInstance.get(`/users/${userId}/superheroes/universe`, {\n      params: { universe },\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching superheroes by universe:', error);\n    return null;\n  }\n}\n\nexport async function fetchUserSuperheroesByPower(userId: number, powerId: number): Promise<Superhero[] | null> {\n  try {\n    const response = await axiosInstance.get(`/users/${userId}/superheroes/power`, {\n      params: { powerId },\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching superheroes by power:', error);\n    return null;\n  }\n}\n",
                        "CopyCode": "// @ts-ignore\nimport axiosInstance from '../lib/axios';\n\ninterface Superhero {\n  super_id: number;\n  name: string;\n  realName: string;\n  universe: string;\n  yearCreated: number;\n}\n\nexport async function fetchUserSuperheroes(userId: number): Promise<Superhero[] | null> {\n  try {\n    const response = await axiosInstance.get(`/users/${userId}/superheroes`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching user superheroes:', error);\n    return null;\n  }\n}\n\nexport async function assignSuperheroToUser(userId: number, superheroId: number): Promise<string> {\n  try {\n    const response = await axiosInstance.post(`/users/${userId}/superheroes/${superheroId}`);\n    return response.data; \n  } catch (error) {\n    console.error('Unexpected error:', error);\n    return 'Error adding superhero to user';\n  }\n}\n\nexport async function unassignSuperheroFromUser(userId: number, superheroId: number): Promise<string> {\n  try {\n    const response = await axiosInstance.delete(`/users/${userId}/superheroes/${superheroId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Unexpected error:', error);\n    return 'Error removing superhero from user';\n  }\n}\n\nexport async function isUserSuperheroAssociation(userId: number, superheroId: number): Promise<boolean> {\n  try {\n    const response = await axiosInstance.get(`/users/${userId}/superheroes/${superheroId}/exists`);\n    return response.data;\n  } catch (error) {\n    console.error('Error checking if user has superhero:', error);\n    return false;\n  }\n}\n\n\n\n\nexport async function fetchSuperheroById(superId: number): Promise<Superhero[] | null> {\n  try {\n    const response = await axiosInstance.get(`/superheroes/${superId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching user superheroes:', error);\n    return null;\n  }\n}\n\nexport async function fetchUserSuperheroesByUniverse(userId: number, universe: string): Promise<Superhero[] | null> {\n  try {\n    const response = await axiosInstance.get(`/users/${userId}/superheroes/universe`, {\n      params: { universe },\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching superheroes by universe:', error);\n    return null;\n  }\n}\n\nexport async function fetchUserSuperheroesByPower(userId: number, powerId: number): Promise<Superhero[] | null> {\n  try {\n    const response = await axiosInstance.get(`/users/${userId}/superheroes/power`, {\n      params: { powerId },\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching superheroes by power:', error);\n    return null;\n  }\n}\n"
                    }
                },
                {
                    "id": 11,
                    "instruction": "Push your changes to GitHub.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Superhero-Frontend\ngit add .\ngit commit -m \"Axios and API functions\"\ngit push",
                        "CopyCode": "cd Superhero-Frontend\ngit add .\ngit commit -m \"Axios and API functions\"\ngit push"
                    }
                },
                {
                    "id": 12,
                    "instruction": "Go to src -> utils. Open the \"apiError.js\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "FormatCode": "import { toast } from 'react-toastify'\nimport axios from 'axios'\nimport 'react-toastify/dist/ReactToastify.css'\n\nfunction handleError(error) {\n  if (axios.isAxiosError(error) && error.response) {\n\n    const statusCode = error.response.status\n\n    switch (statusCode) {\n      case 404:\n        toast.error('Not found: The requested resource was not found.');\n        break;\n      case 429:\n        toast.warning('Rate Limited: Too many requests, please try again later.');\n        break;\n      default:\n        if (statusCode >= 500) {\n          toast.error('Server Error: An internal server error occurred.');\n        }\n        break;\n    }\n    \n    if (error.message === 'Network Error') {\n      toast.error('No internet connection. Please check your network connection.');\n    }    \n\n  } else if (error.request) {\n    toast.error('No response received from the server.')\n  } else {\n    toast.error('An unexpected error occurred:')\n    console.log(error)\n  }\n\n  throw error\n}\n\nexport default handleError\n",
                        "CopyCode": "import { toast } from 'react-toastify'\nimport axios from 'axios'\nimport 'react-toastify/dist/ReactToastify.css'\n\nfunction handleError(error) {\n  if (axios.isAxiosError(error) && error.response) {\n\n    const statusCode = error.response.status\n\n    switch (statusCode) {\n      case 404:\n        toast.error('Not found: The requested resource was not found.');\n        break;\n      case 429:\n        toast.warning('Rate Limited: Too many requests, please try again later.');\n        break;\n      default:\n        if (statusCode >= 500) {\n          toast.error('Server Error: An internal server error occurred.');\n        }\n        break;\n    }\n    \n    if (error.message === 'Network Error') {\n      toast.error('No internet connection. Please check your network connection.');\n    }    \n\n  } else if (error.request) {\n    toast.error('No response received from the server.')\n  } else {\n    toast.error('An unexpected error occurred:')\n    console.log(error)\n  }\n\n  throw error\n}\n\nexport default handleError\n"
                    }
                },
                {
                    "id": 13,
                    "instruction": "Go to src -> services. We're going to implement our service functions."
                },
                {
                    "id": 14,
                    "instruction": "Open the \"powerService.tsx\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "TypeScript",
                        "FormatCode": "// @ts-ignore\nimport axiosInstance from '../lib/axios';\n// @ts-ignore\nimport handleError from '../utils/apiError';\n\nimport {\n  fetchAllPowers,\n  fetchPowersBySuperhero,\n  fetchPowerIdByName,\n  fetchPowerNameById\n} from \"../api/powerAPI\";\n\ninterface Power {\n  power_id: number;\n  name: string;\n}\n\nexport const PowerService = {\n  async getAllPowers(): Promise<Power[] | null> {\n    try {\n      const powers = await fetchAllPowers();\n      return powers;\n    } catch (error) {\n      handleError(error);\n      return null;\n    }\n  },\n\n  async getPowersBySuperhero(superId: number): Promise<Power[] | null> {\n    try {\n      const superheroPowers = await fetchPowersBySuperhero(superId);\n      return superheroPowers;\n    } catch (error) {\n      handleError(error);\n      return null;\n    }\n  },\n\n\n  async getPowerIdByName(name: string): Promise<number | null> {\n    try {\n      const powerId = await fetchPowerIdByName(name);\n      return powerId;\n    } catch (error) {\n      handleError(error);\n      return null;\n    }\n  },\n\n\n  async getPowerNameById(powerId: number): Promise<string | null> {\n    try {\n      const powerName = await fetchPowerNameById(powerId);\n      return powerName;\n    } catch (error) {\n      handleError(error);\n      return null;\n    }\n  },\n};\n",
                        "CopyCode": "// @ts-ignore\nimport axiosInstance from '../lib/axios';\n// @ts-ignore\nimport handleError from '../utils/apiError';\n\nimport {\n  fetchAllPowers,\n  fetchPowersBySuperhero,\n  fetchPowerIdByName,\n  fetchPowerNameById\n} from \"../api/powerAPI\";\n\ninterface Power {\n  power_id: number;\n  name: string;\n}\n\nexport const PowerService = {\n  async getAllPowers(): Promise<Power[] | null> {\n    try {\n      const powers = await fetchAllPowers();\n      return powers;\n    } catch (error) {\n      handleError(error);\n      return null;\n    }\n  },\n\n  async getPowersBySuperhero(superId: number): Promise<Power[] | null> {\n    try {\n      const superheroPowers = await fetchPowersBySuperhero(superId);\n      return superheroPowers;\n    } catch (error) {\n      handleError(error);\n      return null;\n    }\n  },\n\n\n  async getPowerIdByName(name: string): Promise<number | null> {\n    try {\n      const powerId = await fetchPowerIdByName(name);\n      return powerId;\n    } catch (error) {\n      handleError(error);\n      return null;\n    }\n  },\n\n\n  async getPowerNameById(powerId: number): Promise<string | null> {\n    try {\n      const powerName = await fetchPowerNameById(powerId);\n      return powerName;\n    } catch (error) {\n      handleError(error);\n      return null;\n    }\n  },\n};\n"
                    }
                },
                {
                    "id": 15,
                    "instruction": "Open the \"s3imageService.tsx\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "TypeScript",
                        "FormatCode": "// @ts-ignore\nimport axiosInstance from '../lib/axios';\n// @ts-ignore\nimport handleError from '../utils/apiError';\n\n\nimport {\n  uploadImageAWS,\n  fetchImageBySuperheroId\n} from \"../api/s3imageAPI\";\n\n\nexport const ImageService = {\n\n  async uploadImage(superId: number, file: File): Promise<string | null> {\n    try {\n      const responseMsg = await uploadImageAWS(superId, file);\n      return responseMsg;\n    } catch (error) {\n      handleError(error);\n      return null;\n    }\n  },\n\n  async getImageBySuperheroId(superId: number): Promise<string | null> {\n    try {\n      const storedFilename = await fetchImageBySuperheroId(superId);\n      return storedFilename;\n    } catch (error) {\n      handleError(error);\n      return null;\n    }\n  },\n};\n",
                        "CopyCode": "// @ts-ignore\nimport axiosInstance from '../lib/axios';\n// @ts-ignore\nimport handleError from '../utils/apiError';\n\n\nimport {\n  uploadImageAWS,\n  fetchImageBySuperheroId\n} from \"../api/s3imageAPI\";\n\n\nexport const ImageService = {\n\n  async uploadImage(superId: number, file: File): Promise<string | null> {\n    try {\n      const responseMsg = await uploadImageAWS(superId, file);\n      return responseMsg;\n    } catch (error) {\n      handleError(error);\n      return null;\n    }\n  },\n\n  async getImageBySuperheroId(superId: number): Promise<string | null> {\n    try {\n      const storedFilename = await fetchImageBySuperheroId(superId);\n      return storedFilename;\n    } catch (error) {\n      handleError(error);\n      return null;\n    }\n  },\n};\n"
                    }
                },
                {
                    "id": 16,
                    "instruction": "Open the \"superheroService.tsx\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "TypeScript",
                        "FormatCode": "// @ts-ignore\nimport axiosInstance from '../lib/axios';\n// @ts-ignore\nimport handleError from '../utils/apiError';\n\nimport {\n  fetchAllSuperheroes,\n  createNewSuperhero,\n  fetchAllSuperheroesByPower,\n  removeCharacterFromDatabase\n} from \"../api/superheroAPI\";\n\ninterface SuperheroDTO {\n  name: string;\n  realName: string;\n  universe: string;\n  yearCreated: number;\n  canDelete: boolean;\n  powerIds: number[];\n  image: File;\n}\n\ninterface Superhero {\n  super_id: number;\n  name: string;\n  realName: string;\n  universe: string;\n  yearCreated: number;\n}\n\nexport const SuperheroService = {\n\n  async getAllSuperheroes(): Promise<Superhero[] | null> {\n    try {\n      const superheroes = await fetchAllSuperheroes();\n      return superheroes;\n    } catch (error) {\n      handleError(error);\n      return null;\n    }\n  },\n  \n  async addNewSuperhero(userId: number, superheroDTO: SuperheroDTO): Promise<any> {\n    try {\n      const superheroCreated = await createNewSuperhero(userId, superheroDTO);\n      return superheroCreated;\n    } catch (error) {\n      throw error; \n    }\n  },\n\n  async getAllSuperheroesByPower(powerId: number): Promise<Superhero[] | null> {\n    try {\n      const superheroesWithPower = await fetchAllSuperheroesByPower(powerId);\n      return superheroesWithPower;\n    } catch (error) {\n      handleError(error);\n      return null;\n    }\n  },\n\n  async deleteCharacterFromDatabase(superId: number): Promise<String | null> {\n    try {\n      const responseMsg = await removeCharacterFromDatabase(superId)\n      return responseMsg;\n    } catch (error) {\n      handleError(error);\n      return null;\n    }\n  }\n\n};\n",
                        "CopyCode": "// @ts-ignore\nimport axiosInstance from '../lib/axios';\n// @ts-ignore\nimport handleError from '../utils/apiError';\n\nimport {\n  fetchAllSuperheroes,\n  createNewSuperhero,\n  fetchAllSuperheroesByPower,\n  removeCharacterFromDatabase\n} from \"../api/superheroAPI\";\n\ninterface SuperheroDTO {\n  name: string;\n  realName: string;\n  universe: string;\n  yearCreated: number;\n  canDelete: boolean;\n  powerIds: number[];\n  image: File;\n}\n\ninterface Superhero {\n  super_id: number;\n  name: string;\n  realName: string;\n  universe: string;\n  yearCreated: number;\n}\n\nexport const SuperheroService = {\n\n  async getAllSuperheroes(): Promise<Superhero[] | null> {\n    try {\n      const superheroes = await fetchAllSuperheroes();\n      return superheroes;\n    } catch (error) {\n      handleError(error);\n      return null;\n    }\n  },\n  \n  async addNewSuperhero(userId: number, superheroDTO: SuperheroDTO): Promise<any> {\n    try {\n      const superheroCreated = await createNewSuperhero(userId, superheroDTO);\n      return superheroCreated;\n    } catch (error) {\n      throw error; \n    }\n  },\n\n  async getAllSuperheroesByPower(powerId: number): Promise<Superhero[] | null> {\n    try {\n      const superheroesWithPower = await fetchAllSuperheroesByPower(powerId);\n      return superheroesWithPower;\n    } catch (error) {\n      handleError(error);\n      return null;\n    }\n  },\n\n  async deleteCharacterFromDatabase(superId: number): Promise<String | null> {\n    try {\n      const responseMsg = await removeCharacterFromDatabase(superId)\n      return responseMsg;\n    } catch (error) {\n      handleError(error);\n      return null;\n    }\n  }\n\n};\n"
                    }
                },
                {
                    "id": 17,
                    "instruction": "Open the \"userService.tsx\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "TypeScript",
                        "FormatCode": "// @ts-ignore\nimport axiosInstance from '../lib/axios';\n// @ts-ignore\nimport handleError from '../utils/apiError';\n\nimport {\n  fetchAllUsers,\n  fetchUserByUsername,\n  loginUser,\n  deleteUserFromDatabase,\n  createUser\n} from \"../api/userAPI\";\n\ninterface User {\n  userId: number;\n  name: string;\n  role: string;\n  username: string;\n  hashedPassword: string;\n}\n\ninterface UserDTO {\n  id: number;\n  name: string;\n  username: string;\n}\n\ninterface UserAuthRequest {\n  username: string;\n  password: string;\n}\n\ninterface UserAddRequest {\n  name: string;\n  username: string;\n  password: string;\n}\n\nexport const UserService = {\n\n  async getAllUsers(): Promise<User | null> {\n    try {\n      const users = await fetchAllUsers();\n      return users;\n    } catch (error) {\n      handleError(error); \n      return null;\n    }\n  },\n\n  async getUserByUsername(username: string): Promise<UserDTO | null> {\n    try {\n      const user = await fetchUserByUsername(username);\n      return user;\n    } catch (error) {\n      handleError(error); \n      return null;\n    }\n  },\n\n  async authenticateUser(request: UserAuthRequest): Promise<{ user: UserDTO, token: string } | null> {\n    try {\n      const result = await loginUser(request);\n  \n      if (result) {\n        const { user, token } = result;\n        return { user, token };\n      }\n  \n      return null;\n    } catch (error) {\n      handleError(error);\n      return null;\n    }\n  },\n\n  async addUser(request: UserAddRequest): Promise<string | null> {\n    try {\n      const userCreated = await createUser(request);\n      return userCreated;\n    } catch (error) {\n      handleError(error);\n      return null;\n    }\n  },\n\n  async deleteUser(userId: number): Promise<string | null> {\n    try {\n      const response = await deleteUserFromDatabase(userId);\n      return response;\n    } catch (error) {\n      handleError(error);\n      return null;\n    }\n  },\n};\n",
                        "CopyCode": "// @ts-ignore\nimport axiosInstance from '../lib/axios';\n// @ts-ignore\nimport handleError from '../utils/apiError';\n\nimport {\n  fetchAllUsers,\n  fetchUserByUsername,\n  loginUser,\n  deleteUserFromDatabase,\n  createUser\n} from \"../api/userAPI\";\n\ninterface User {\n  userId: number;\n  name: string;\n  role: string;\n  username: string;\n  hashedPassword: string;\n}\n\ninterface UserDTO {\n  id: number;\n  name: string;\n  username: string;\n}\n\ninterface UserAuthRequest {\n  username: string;\n  password: string;\n}\n\ninterface UserAddRequest {\n  name: string;\n  username: string;\n  password: string;\n}\n\nexport const UserService = {\n\n  async getAllUsers(): Promise<User | null> {\n    try {\n      const users = await fetchAllUsers();\n      return users;\n    } catch (error) {\n      handleError(error); \n      return null;\n    }\n  },\n\n  async getUserByUsername(username: string): Promise<UserDTO | null> {\n    try {\n      const user = await fetchUserByUsername(username);\n      return user;\n    } catch (error) {\n      handleError(error); \n      return null;\n    }\n  },\n\n  async authenticateUser(request: UserAuthRequest): Promise<{ user: UserDTO, token: string } | null> {\n    try {\n      const result = await loginUser(request);\n  \n      if (result) {\n        const { user, token } = result;\n        return { user, token };\n      }\n  \n      return null;\n    } catch (error) {\n      handleError(error);\n      return null;\n    }\n  },\n\n  async addUser(request: UserAddRequest): Promise<string | null> {\n    try {\n      const userCreated = await createUser(request);\n      return userCreated;\n    } catch (error) {\n      handleError(error);\n      return null;\n    }\n  },\n\n  async deleteUser(userId: number): Promise<string | null> {\n    try {\n      const response = await deleteUserFromDatabase(userId);\n      return response;\n    } catch (error) {\n      handleError(error);\n      return null;\n    }\n  },\n};\n"
                    }
                },
                {
                    "id": 18,
                    "instruction": "Open the \"userSuperheroService.tsx\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "TypeScript",
                        "FormatCode": "// @ts-ignore\nimport axiosInstance from '../lib/axios';\n// @ts-ignore\nimport handleError from '../utils/apiError';\n\n\nimport {\n  fetchUserSuperheroes,\n  assignSuperheroToUser,\n  unassignSuperheroFromUser,\n  isUserSuperheroAssociation,\n  fetchSuperheroById,\n  fetchUserSuperheroesByUniverse,\n  fetchUserSuperheroesByPower\n} from \"../api/userSuperheroAPI\";\n\n\ninterface Superhero {\n  super_id: number;\n  name: string;\n  realName: string;\n  universe: string;\n  yearCreated: number;\n}\n\nexport const UserSuperheroService = {\n  \n  async getUserSuperheroes(userId: number): Promise<Superhero[] | null> {\n    try {\n      const userSuperheroes = await fetchUserSuperheroes(userId);\n      return userSuperheroes;\n    } catch (error) {\n      handleError(error);\n      return null;\n    }\n  },\n\n  async addSuperheroToUser(userId: number, superheroId: number): Promise<string | null>  {\n    try {\n      const responseMsg = await assignSuperheroToUser(userId, superheroId);\n      return responseMsg;\n    } catch (error) {\n      handleError(error);\n      return null;\n    }\n  },\n\n  async removeSuperheroFromUser(userId: number, superheroId: number): Promise<string | null> {\n    try {\n      const responseMsg = await unassignSuperheroFromUser(userId, superheroId);\n      return responseMsg;\n    } catch (error) {\n      handleError(error);\n      return null;\n    }\n  },\n\n  async isUserSuperhero(userId: number, superheroId: number): Promise<boolean | null> {\n    try {\n      const userHasSuperhero = await isUserSuperheroAssociation(userId, superheroId);\n      return userHasSuperhero;\n    } catch (error) {\n      handleError(error);\n      return null;\n    }\n  },\n  \n  async getSuperheroById(superId: number): Promise<Superhero[] | null> {\n    try {\n      const superhero = await fetchSuperheroById(superId);\n      return superhero;\n    } catch (error) {\n      handleError(error);\n      return null;\n    }\n  },\n\n  async getUserSuperheroesByUniverse(userId: number, universe: string): Promise<Superhero[] | null> {\n    try {\n      const superherosInUniverse = await fetchUserSuperheroesByUniverse(userId, universe);\n      return superherosInUniverse;\n    } catch (error) {\n      handleError(error); \n      return null;\n    }\n  },\n\n  async getUserSuperheroesByPower(userId: number, powerId: number): Promise<Superhero[] | null> {\n    try {\n      const superheroesWithPower = await fetchUserSuperheroesByPower(userId, powerId);\n      return superheroesWithPower;\n    } catch (error) {\n      handleError(error);\n      return null;\n    }\n  }\n\n};\n",
                        "CopyCode": "// @ts-ignore\nimport axiosInstance from '../lib/axios';\n// @ts-ignore\nimport handleError from '../utils/apiError';\n\n\nimport {\n  fetchUserSuperheroes,\n  assignSuperheroToUser,\n  unassignSuperheroFromUser,\n  isUserSuperheroAssociation,\n  fetchSuperheroById,\n  fetchUserSuperheroesByUniverse,\n  fetchUserSuperheroesByPower\n} from \"../api/userSuperheroAPI\";\n\n\ninterface Superhero {\n  super_id: number;\n  name: string;\n  realName: string;\n  universe: string;\n  yearCreated: number;\n}\n\nexport const UserSuperheroService = {\n  \n  async getUserSuperheroes(userId: number): Promise<Superhero[] | null> {\n    try {\n      const userSuperheroes = await fetchUserSuperheroes(userId);\n      return userSuperheroes;\n    } catch (error) {\n      handleError(error);\n      return null;\n    }\n  },\n\n  async addSuperheroToUser(userId: number, superheroId: number): Promise<string | null>  {\n    try {\n      const responseMsg = await assignSuperheroToUser(userId, superheroId);\n      return responseMsg;\n    } catch (error) {\n      handleError(error);\n      return null;\n    }\n  },\n\n  async removeSuperheroFromUser(userId: number, superheroId: number): Promise<string | null> {\n    try {\n      const responseMsg = await unassignSuperheroFromUser(userId, superheroId);\n      return responseMsg;\n    } catch (error) {\n      handleError(error);\n      return null;\n    }\n  },\n\n  async isUserSuperhero(userId: number, superheroId: number): Promise<boolean | null> {\n    try {\n      const userHasSuperhero = await isUserSuperheroAssociation(userId, superheroId);\n      return userHasSuperhero;\n    } catch (error) {\n      handleError(error);\n      return null;\n    }\n  },\n  \n  async getSuperheroById(superId: number): Promise<Superhero[] | null> {\n    try {\n      const superhero = await fetchSuperheroById(superId);\n      return superhero;\n    } catch (error) {\n      handleError(error);\n      return null;\n    }\n  },\n\n  async getUserSuperheroesByUniverse(userId: number, universe: string): Promise<Superhero[] | null> {\n    try {\n      const superherosInUniverse = await fetchUserSuperheroesByUniverse(userId, universe);\n      return superherosInUniverse;\n    } catch (error) {\n      handleError(error); \n      return null;\n    }\n  },\n\n  async getUserSuperheroesByPower(userId: number, powerId: number): Promise<Superhero[] | null> {\n    try {\n      const superheroesWithPower = await fetchUserSuperheroesByPower(userId, powerId);\n      return superheroesWithPower;\n    } catch (error) {\n      handleError(error);\n      return null;\n    }\n  }\n\n};\n"
                    }
                },
                {
                    "id": 19,
                    "instruction": "Push your changes to GitHub",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Superhero-Frontend\ngit add .\ngit commit -m \"Utils and Service functions\"\ngit push",
                        "CopyCode": "cd Superhero-Frontend\ngit add .\ngit commit -m \"Utils and Service functions\"\ngit push"
                    }
                },
                {
                    "id": 20,
                    "instruction": "Now we'll implement our CSS styles for our components."
                },
                {
                    "id": 21,
                    "instruction": "Go to src -> styles -> components directory. This is where our stylesheets are."
                },
                {
                    "id": 22,
                    "instruction": "Open the \"CustomAlert.module.css\" file and paste in the following styles.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Javascript",
                        "DisplayLang": "CSS",
                        "FormatCode": ".overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  z-index: 999;\n}\n\n.modal {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: #fff;\n  padding: 40px;\n  z-index: 1000;\n  border-radius: 12px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  width: 420px;\n  max-width: 90%;\n  text-align: center;\n}\n\n.alert-msg {\n  font-size: 35px;\n  background-color: #fff;\n}\n\n.sub-msg {\n  font-size: 23px;\n  background-color: #fff;\n  margin-top: 10px;\n  margin-bottom: -10px;\n}\n\n.message-container {\n  display: block;\n  margin-bottom: 20px;\n  background-color: #fff;\n}\n\n.button-container {\n  display: flex;\n  justify-content: center;\n  background-color: #fff;\n  gap: 16px;\n  margin-top: 20px;\n}\n\n\n.cancel-button {\n  color: white;\n  border: none;\n  font-size: 16px;\n  cursor: pointer;\n  margin-top: 10px;\n  padding: 10px 20px;\n  border-radius: 4px;\n  transition: filter 0.3s ease;\n  display: inline-block;\n  width: auto;\n  position: relative;\n  background-color: blue;\n}\n\n.alert-button {\n  color: white;\n  border: none;\n  font-size: 16px;\n  cursor: pointer;\n  margin-top: 10px;\n  padding: 10px 20px;\n  border-radius: 4px;\n  transition: filter 0.3s ease;\n  display: inline-block; \n  width: auto;\n  position: relative;\n}\n\n.alert-button:hover, .cancel-button:hover {\n  filter: brightness(80%);\n}\n\n.close-button {\n  position: absolute;\n  top: 10px;\n  right: 15px;\n  background: none;\n  border: none;\n  padding: 0;\n  cursor: pointer;\n}\n\n.close-button svg {\n  width: 24px;\n  height: 24px;\n  background-color: #fff;\n}\n\n.close-button:hover svg {\n  color: red;\n}\n",
                        "CopyCode": ".overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  z-index: 999;\n}\n\n.modal {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: #fff;\n  padding: 40px;\n  z-index: 1000;\n  border-radius: 12px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  width: 420px;\n  max-width: 90%;\n  text-align: center;\n}\n\n.alert-msg {\n  font-size: 35px;\n  background-color: #fff;\n}\n\n.sub-msg {\n  font-size: 23px;\n  background-color: #fff;\n  margin-top: 10px;\n  margin-bottom: -10px;\n}\n\n.message-container {\n  display: block;\n  margin-bottom: 20px;\n  background-color: #fff;\n}\n\n.button-container {\n  display: flex;\n  justify-content: center;\n  background-color: #fff;\n  gap: 16px;\n  margin-top: 20px;\n}\n\n\n.cancel-button {\n  color: white;\n  border: none;\n  font-size: 16px;\n  cursor: pointer;\n  margin-top: 10px;\n  padding: 10px 20px;\n  border-radius: 4px;\n  transition: filter 0.3s ease;\n  display: inline-block;\n  width: auto;\n  position: relative;\n  background-color: blue;\n}\n\n.alert-button {\n  color: white;\n  border: none;\n  font-size: 16px;\n  cursor: pointer;\n  margin-top: 10px;\n  padding: 10px 20px;\n  border-radius: 4px;\n  transition: filter 0.3s ease;\n  display: inline-block; \n  width: auto;\n  position: relative;\n}\n\n.alert-button:hover, .cancel-button:hover {\n  filter: brightness(80%);\n}\n\n.close-button {\n  position: absolute;\n  top: 10px;\n  right: 15px;\n  background: none;\n  border: none;\n  padding: 0;\n  cursor: pointer;\n}\n\n.close-button svg {\n  width: 24px;\n  height: 24px;\n  background-color: #fff;\n}\n\n.close-button:hover svg {\n  color: red;\n}\n"
                    }
                },
                {
                    "id": 23,
                    "instruction": "Open the \"DisplayTable.module.css\" file and paste in the following styles.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Javascript",
                        "DisplayLang": "CSS",
                        "FormatCode": ".table-container {\n  margin: 20px auto;\n  width: 100%;\n  max-width: 1300px;\n  border-radius: 5px;\n  border: 1px solid black;\n  background-color: #f9f9f9;\n  padding: 15px;\n}\n\n.table {\n  width: 100%;\n  border-collapse: collapse;\n  overflow: hidden;\n}\n\nthead {\n  background-color: #00008D;\n  color: white;\n  text-align: left;\n}\n\n.header-cell {\n  padding: 16px 20px;\n  font-weight: bold;\n  text-transform: uppercase;\n  letter-spacing: 0.05em;\n  font-size: 16px;\n}\n\n.table-row:nth-child(even) {\n  background-color: #f2f2f2;\n}\n\n.cell {\n  padding: 16px 20px;\n  font-size: 18px;\n  color: #333;\n  border-bottom: 1px solid #ddd;\n  word-wrap: break-word;\n  white-space: normal;\n}\n\n.actions-cell {\n  padding: 12px;\n  text-align: center;\n}\n\n.remove-btn {\n  background-color: red;\n  color: white;\n  border: none;\n  width: 30px;\n  height: 30px;\n  border-radius: 50%;\n  cursor: pointer;\n  font-size: 22px;\n  transition: background-color 0.2s ease;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.remove-btn:hover {\n  background-color: #b80d0d;\n}\n\n.remove-btn:focus {\n  outline: none;\n  box-shadow: 0 0 0 3px rgba(255, 77, 77, 0.5);\n}\n",
                        "CopyCode": ".table-container {\n  margin: 20px auto;\n  width: 100%;\n  max-width: 1300px;\n  border-radius: 5px;\n  border: 1px solid black;\n  background-color: #f9f9f9;\n  padding: 15px;\n}\n\n.table {\n  width: 100%;\n  border-collapse: collapse;\n  overflow: hidden;\n}\n\nthead {\n  background-color: #00008D;\n  color: white;\n  text-align: left;\n}\n\n.header-cell {\n  padding: 16px 20px;\n  font-weight: bold;\n  text-transform: uppercase;\n  letter-spacing: 0.05em;\n  font-size: 16px;\n}\n\n.table-row:nth-child(even) {\n  background-color: #f2f2f2;\n}\n\n.cell {\n  padding: 16px 20px;\n  font-size: 18px;\n  color: #333;\n  border-bottom: 1px solid #ddd;\n  word-wrap: break-word;\n  white-space: normal;\n}\n\n.actions-cell {\n  padding: 12px;\n  text-align: center;\n}\n\n.remove-btn {\n  background-color: red;\n  color: white;\n  border: none;\n  width: 30px;\n  height: 30px;\n  border-radius: 50%;\n  cursor: pointer;\n  font-size: 22px;\n  transition: background-color 0.2s ease;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.remove-btn:hover {\n  background-color: #b80d0d;\n}\n\n.remove-btn:focus {\n  outline: none;\n  box-shadow: 0 0 0 3px rgba(255, 77, 77, 0.5);\n}\n"
                    }
                },
                {
                    "id": 24,
                    "instruction": "Open the \"NavBar.module.css\" file and paste in the following styles.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Javascript",
                        "DisplayLang": "CSS",
                        "FormatCode": "html, body {\n  margin: 0;\n  padding: 0;\n  width: 100%;\n}\n\nbody {\n  padding-top: 90px;\n}\n\n.navbar {\n  position: fixed;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 10px 30px;\n  background-color: #D60101;\n  color: #fff;\n  width: 100%;\n  box-sizing: border-box;\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 1001;\n  height: 80px;\n}\n\n.left-section {\n  display: flex;\n  align-items: center;\n}\n\n.navbar-title {\n  font-size: 36px;\n  color: #fff;\n  margin: 0;\n  padding: 0;\n  background-color: #D60101;\n  font-family: Georgia, 'Times New Roman', Times, serif;\n}\n  \n.overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.7);\n  z-index: 1000;\n}\n  \n.logo {\n  height: 70px;\n}\n\n.right-section {\n  display: flex;\n  align-items: center;\n  background-color: #D60101;\n  justify-content: flex-end;\n  gap: 20px;\n}\n  \n.search-bar {\n  position: relative;\n  background-color: #D60101;\n}\n\n.search-bar-input {\n  width: 180px;\n  padding: 12px;\n  border-radius: 5px;\n  border: 1px solid black;\n  margin-right: 15px;\n  background-color: white;\n  margin-right: -5px;\n}\n\n.search-bar-input:focus {\n  width: 290px;\n  transition: width 0.3s ease-in-out;\n}\n  \n.dropdown {\n  position: absolute;\n  top: 100%;\n  left: 0;\n  width: 100%;\n  background-color: white;\n  overflow-y: auto;\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  z-index: 1001;\n  width: 290px;\n}\n  \n.result {\n  padding: 9px;\n  cursor: pointer;\n  background: lightskyblue;\n  color: black;\n  border-bottom: 1px solid #3C3B3B;\n  font-size: 17.5px;\n}\n\n.result-name {\n  background-color: lightskyblue;\n}\n\n.result:last-child {\n  border-bottom: none;\n}\n\n.result:hover {\n  background-color: #FFFFA6;\n}\n\n.result:hover .result-name{\n  background-color: #FFFFA6;\n}\n\n.tabs {\n  margin-right: 0px;\n}\n\n.tabs-ul-list {\n  display: flex;\n  list-style-type: none;\n  padding: 0;\n  margin: 0;\n}\n\n.tab {\n  font-size: 24px;\n  cursor: pointer;\n  position: relative;\n}\n\n.tab-link {\n  height: 80px;\n  padding: 0 12px; \n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: #D60101;\n}\n  \n.tab-link:hover {\n  background-color: lightskyblue;\n}\n\n.tab-name {\n  background-color: #D60101;\n}\n\n.tab-link:hover .tab-name {\n  background-color: lightskyblue;\n}\n\n.tab-link {\n  color: #fff;\n  text-decoration: none;\n  transition: color 0.2s ease-in-out;\n}\n  \n.tab-link:hover {\n  color: #FFFF7A;\n}\n\n.tab-link:active {\n  text-decoration: underline;\n}\n",
                        "CopyCode": "html, body {\n  margin: 0;\n  padding: 0;\n  width: 100%;\n}\n\nbody {\n  padding-top: 90px;\n}\n\n.navbar {\n  position: fixed;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 10px 30px;\n  background-color: #D60101;\n  color: #fff;\n  width: 100%;\n  box-sizing: border-box;\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 1001;\n  height: 80px;\n}\n\n.left-section {\n  display: flex;\n  align-items: center;\n}\n\n.navbar-title {\n  font-size: 36px;\n  color: #fff;\n  margin: 0;\n  padding: 0;\n  background-color: #D60101;\n  font-family: Georgia, 'Times New Roman', Times, serif;\n}\n  \n.overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.7);\n  z-index: 1000;\n}\n  \n.logo {\n  height: 70px;\n}\n\n.right-section {\n  display: flex;\n  align-items: center;\n  background-color: #D60101;\n  justify-content: flex-end;\n  gap: 20px;\n}\n  \n.search-bar {\n  position: relative;\n  background-color: #D60101;\n}\n\n.search-bar-input {\n  width: 180px;\n  padding: 12px;\n  border-radius: 5px;\n  border: 1px solid black;\n  margin-right: 15px;\n  background-color: white;\n  margin-right: -5px;\n}\n\n.search-bar-input:focus {\n  width: 290px;\n  transition: width 0.3s ease-in-out;\n}\n  \n.dropdown {\n  position: absolute;\n  top: 100%;\n  left: 0;\n  width: 100%;\n  background-color: white;\n  overflow-y: auto;\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  z-index: 1001;\n  width: 290px;\n}\n  \n.result {\n  padding: 9px;\n  cursor: pointer;\n  background: lightskyblue;\n  color: black;\n  border-bottom: 1px solid #3C3B3B;\n  font-size: 17.5px;\n}\n\n.result-name {\n  background-color: lightskyblue;\n}\n\n.result:last-child {\n  border-bottom: none;\n}\n\n.result:hover {\n  background-color: #FFFFA6;\n}\n\n.result:hover .result-name{\n  background-color: #FFFFA6;\n}\n\n.tabs {\n  margin-right: 0px;\n}\n\n.tabs-ul-list {\n  display: flex;\n  list-style-type: none;\n  padding: 0;\n  margin: 0;\n}\n\n.tab {\n  font-size: 24px;\n  cursor: pointer;\n  position: relative;\n}\n\n.tab-link {\n  height: 80px;\n  padding: 0 12px; \n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: #D60101;\n}\n  \n.tab-link:hover {\n  background-color: lightskyblue;\n}\n\n.tab-name {\n  background-color: #D60101;\n}\n\n.tab-link:hover .tab-name {\n  background-color: lightskyblue;\n}\n\n.tab-link {\n  color: #fff;\n  text-decoration: none;\n  transition: color 0.2s ease-in-out;\n}\n  \n.tab-link:hover {\n  color: #FFFF7A;\n}\n\n.tab-link:active {\n  text-decoration: underline;\n}\n"
                    }
                },
                {
                    "id": 25,
                    "instruction": "Open the \"SuperheroCard.module.css\" file and paste in the following styles.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Javascript",
                        "DisplayLang": "CSS",
                        "FormatCode": ".superhero-card {\n  border: 2px solid #ddd;\n  border-radius: 10px;\n  padding: 20px;\n  width: 300px;\n  background-color: white;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n.hoverable:hover {\n  border: 2px solid blue;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n}\n\n.superhero-card img {\n  border-radius: 5px;\n  margin-bottom: 10px;\n  margin-left: 25px;\n  border: 2px solid black;\n}\n\n.superhero-card h2 {\n  font-size: 24px;\n  background-color: rgb(182, 209, 255);\n  margin-bottom: 10px;\n  text-align: center;\n}\n\n.superhero-card strong {\n  margin: 5px 0;\n  background-color: white;\n}\n\n.superhero-card p {\n  margin: 5px 0;\n  background-color: white;\n}\n\n.superhero-card h3 {\n  margin-top: 15px;\n  font-size: 20px;\n  background-color: white;\n  color: #333;\n}\n\n.superhero-card ul {\n  list-style-type: none;\n  padding: 0;\n  background-color: white;\n}\n\n.superhero-card ul li {\n  background-color: #eee;\n  border-radius: 5px;\n  margin: 5px 0;\n  padding: 5px;\n  font-weight: bold;\n}\n",
                        "CopyCode": ".superhero-card {\n  border: 2px solid #ddd;\n  border-radius: 10px;\n  padding: 20px;\n  width: 300px;\n  background-color: white;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n.hoverable:hover {\n  border: 2px solid blue;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);\n}\n\n.superhero-card img {\n  border-radius: 5px;\n  margin-bottom: 10px;\n  margin-left: 25px;\n  border: 2px solid black;\n}\n\n.superhero-card h2 {\n  font-size: 24px;\n  background-color: rgb(182, 209, 255);\n  margin-bottom: 10px;\n  text-align: center;\n}\n\n.superhero-card strong {\n  margin: 5px 0;\n  background-color: white;\n}\n\n.superhero-card p {\n  margin: 5px 0;\n  background-color: white;\n}\n\n.superhero-card h3 {\n  margin-top: 15px;\n  font-size: 20px;\n  background-color: white;\n  color: #333;\n}\n\n.superhero-card ul {\n  list-style-type: none;\n  padding: 0;\n  background-color: white;\n}\n\n.superhero-card ul li {\n  background-color: #eee;\n  border-radius: 5px;\n  margin: 5px 0;\n  padding: 5px;\n  font-weight: bold;\n}\n"
                    }
                },
                {
                    "id": 26,
                    "instruction": "Now we'll implement our CSS styles for our views."
                },
                {
                    "id": 27,
                    "instruction": "Go to src -> styles -> views. We're going to create the stylesheets for our views."
                },
                {
                    "id": 28,
                    "instruction": "Open the \"Add.module.css\" file and paste in the following styles.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Javascript",
                        "DisplayLang": "CSS",
                        "FormatCode": ".outside-container {\n  padding-top: 10px;\n  padding-bottom: 30px;\n}\n\n.form-container {\n  max-width: 500px;\n  margin: 0 auto;\n  padding: 20px;\n  background-color: lightblue;\n  border-radius: 10px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n.field-wrapper {\n  padding: 7px 0;\n  background-color: lightblue;\n}\n  \n.add-title {\n  text-align: center;\n  margin-bottom: 20px;\n  font-size: 24px;\n  color: black;\n  background-color: lightblue;\n}\n  \n.add-field-label {\n  display: block;\n  font-weight: bold;\n  margin-bottom: 8px;\n  color: black;\n  background-color: lightblue;\n}\n  \n.add-field-input {\n  width: 100%;\n  padding: 10px;\n  margin-bottom: 15px;\n  border: 1px solid #ccc;\n  background-color: #fff;\n  border-radius: 5px;\n  font-size: 16px;\n}\n\ninput[type=\"checkbox\"] {\n  margin-right: 10px;\n}\n\n.power-container {\n  background-color: lightblue;\n}\n\n.file-input {\n  background-color: lightblue;\n  padding-bottom: 10px;\n}\n  \n.add-submit-button {\n  width: 100%;\n  padding: 12px;\n  background-color: #007BFF;\n  color: white;\n  border: none;\n  border-radius: 5px;\n  font-size: 16px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n}\n\n.add-submit-button:disabled {\n  background-color: #ccc;\n}\n\n.add-submit-button:hover:enabled {\n  background-color: #0056b3;\n}\n\n\n.error-border {\n  border-color: red;\n}\n\n.error-message {\n  color: red;\n  margin-top: -10px;\n  margin-bottom: 15px;\n  font-size: 14px;\n}\n",
                        "CopyCode": ".outside-container {\n  padding-top: 10px;\n  padding-bottom: 30px;\n}\n\n.form-container {\n  max-width: 500px;\n  margin: 0 auto;\n  padding: 20px;\n  background-color: lightblue;\n  border-radius: 10px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n.field-wrapper {\n  padding: 7px 0;\n  background-color: lightblue;\n}\n  \n.add-title {\n  text-align: center;\n  margin-bottom: 20px;\n  font-size: 24px;\n  color: black;\n  background-color: lightblue;\n}\n  \n.add-field-label {\n  display: block;\n  font-weight: bold;\n  margin-bottom: 8px;\n  color: black;\n  background-color: lightblue;\n}\n  \n.add-field-input {\n  width: 100%;\n  padding: 10px;\n  margin-bottom: 15px;\n  border: 1px solid #ccc;\n  background-color: #fff;\n  border-radius: 5px;\n  font-size: 16px;\n}\n\ninput[type=\"checkbox\"] {\n  margin-right: 10px;\n}\n\n.power-container {\n  background-color: lightblue;\n}\n\n.file-input {\n  background-color: lightblue;\n  padding-bottom: 10px;\n}\n  \n.add-submit-button {\n  width: 100%;\n  padding: 12px;\n  background-color: #007BFF;\n  color: white;\n  border: none;\n  border-radius: 5px;\n  font-size: 16px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n}\n\n.add-submit-button:disabled {\n  background-color: #ccc;\n}\n\n.add-submit-button:hover:enabled {\n  background-color: #0056b3;\n}\n\n\n.error-border {\n  border-color: red;\n}\n\n.error-message {\n  color: red;\n  margin-top: -10px;\n  margin-bottom: 15px;\n  font-size: 14px;\n}\n"
                    }
                },
                {
                    "id": 29,
                    "instruction": "Open the \"Admin.module.css\" file and paste in the following styles.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Javascript",
                        "DisplayLang": "CSS",
                        "FormatCode": "body {\n  background-color: lavenderblush;\n}\n\n.container {\n  margin: 20px;\n  padding-bottom: 70px;\n}\n\n.title {\n  text-align: left;\n  padding-left: 40px;\n  margin-bottom: 20px;\n}",
                        "CopyCode": "body {\n  background-color: lavenderblush;\n}\n\n.container {\n  margin: 20px;\n  padding-bottom: 70px;\n}\n\n.title {\n  text-align: left;\n  padding-left: 40px;\n  margin-bottom: 20px;\n}"
                    }
                },
                {
                    "id": 30,
                    "instruction": "Open the \"CharacterPage.module.css\" file and paste in the following styles.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Javascript",
                        "DisplayLang": "CSS",
                        "FormatCode": ".character-page-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n.title {\n  margin-bottom: 8px;\n  background-color: #BCEEFF;\n  color: black;\n}\n\n.content-container {\n  background-color: #BCEEFF;\n  padding: 20px;\n  border-radius: 20px;\n  border: 0.75px solid black;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: 50px;\n  margin-top: 10px;\n}\n\n.button-container {\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n  margin-top: 20px;\n  background-color: #BCEEFF;\n  margin-bottom: 5px;\n}\n\n.green-button, .red-button, .blue-button, .purple-button {\n  width: 170px;\n  text-align: center;\n  color: white;\n  padding: 10px 0;\n  font-size: 17px;\n  border: 1px solid white;\n  border-radius: 50px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n.green-button {\n  background-color: #00B300;\n}\n\n.green-button:hover {\n  background-color: darkgreen;\n}\n\n.red-button {\n  background-color: red;\n}\n\n.red-button:hover {\n  background-color: darkred;\n}\n\n.blue-button {\n  background-color: #155CFF;\n}\n\n.blue-button:hover {\n  background-color: darkblue;\n}\n\n.purple-button {\n  background-color: purple;\n}\n\n.purple-button:hover {\n  background-color: #540054;\n}\n\n.remove-db-button {\n  margin-top: 15px;\n  margin-bottom: 5px;\n  font-weight: 600px;\n  color: red;\n  background: none;\n  border: none;\n  text-decoration: underline;\n  cursor: pointer;\n  padding: 0;\n  font-size: inherit;\n}\n\n.remove-db-button:hover {\n  color: darkred;\n}\n",
                        "CopyCode": ".character-page-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n.title {\n  margin-bottom: 8px;\n  background-color: #BCEEFF;\n  color: black;\n}\n\n.content-container {\n  background-color: #BCEEFF;\n  padding: 20px;\n  border-radius: 20px;\n  border: 0.75px solid black;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  margin-bottom: 50px;\n  margin-top: 10px;\n}\n\n.button-container {\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n  margin-top: 20px;\n  background-color: #BCEEFF;\n  margin-bottom: 5px;\n}\n\n.green-button, .red-button, .blue-button, .purple-button {\n  width: 170px;\n  text-align: center;\n  color: white;\n  padding: 10px 0;\n  font-size: 17px;\n  border: 1px solid white;\n  border-radius: 50px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n}\n\n.green-button {\n  background-color: #00B300;\n}\n\n.green-button:hover {\n  background-color: darkgreen;\n}\n\n.red-button {\n  background-color: red;\n}\n\n.red-button:hover {\n  background-color: darkred;\n}\n\n.blue-button {\n  background-color: #155CFF;\n}\n\n.blue-button:hover {\n  background-color: darkblue;\n}\n\n.purple-button {\n  background-color: purple;\n}\n\n.purple-button:hover {\n  background-color: #540054;\n}\n\n.remove-db-button {\n  margin-top: 15px;\n  margin-bottom: 5px;\n  font-weight: 600px;\n  color: red;\n  background: none;\n  border: none;\n  text-decoration: underline;\n  cursor: pointer;\n  padding: 0;\n  font-size: inherit;\n}\n\n.remove-db-button:hover {\n  color: darkred;\n}\n"
                    }
                },
                {
                    "id": 31,
                    "instruction": "Open the \"HomePage.module.css\" file and paste in the following styles.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Javascript",
                        "DisplayLang": "CSS",
                        "FormatCode": ".red-line {\n  width: 100%;\n  height: 4px;\n  background-color: red;\n  margin: 20px 0;\n}\n\n.superheroes-grid {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  gap: 20px;\n  padding: 20px;\n}",
                        "CopyCode": ".red-line {\n  width: 100%;\n  height: 4px;\n  background-color: red;\n  margin: 20px 0;\n}\n\n.superheroes-grid {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  gap: 20px;\n  padding: 20px;\n}"
                    }
                },
                {
                    "id": 32,
                    "instruction": "Open the \"Powers.module.css\" file and paste in the following styles.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Javascript",
                        "DisplayLang": "CSS",
                        "FormatCode": ".superhero-power-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n.superhero-power-container > * {\n  margin-bottom: 20px;\n}\n\n.power-selector {\n  padding: 10px;\n  border-radius: 5px;\n  border: 1px solid #ccc;\n  font-size: 16px;\n  background-color: #f8f9fa;\n  cursor: pointer;\n  outline: none;\n  transition: border-color 0.3s ease;\n  width: 250px;\n  margin-bottom: 20px;\n  margin-top: -5px;\n  display: block; \n  margin-left: auto;\n  margin-right: auto;\n}\n\n.power-selector:focus {\n  border-color: #007bff;\n}\n\n.option-text {\n  font-size: 16px;\n}\n\n.powers-page {\n  padding: 20px;\n}\n\n.powers-title {\n  margin-bottom: 20px;\n  text-align: center;\n}\n\n.selected-power {\n  margin-top: 5px;\n  margin-bottom: 20px;\n  text-align: center;\n}",
                        "CopyCode": ".superhero-power-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n}\n\n.superhero-power-container > * {\n  margin-bottom: 20px;\n}\n\n.power-selector {\n  padding: 10px;\n  border-radius: 5px;\n  border: 1px solid #ccc;\n  font-size: 16px;\n  background-color: #f8f9fa;\n  cursor: pointer;\n  outline: none;\n  transition: border-color 0.3s ease;\n  width: 250px;\n  margin-bottom: 20px;\n  margin-top: -5px;\n  display: block; \n  margin-left: auto;\n  margin-right: auto;\n}\n\n.power-selector:focus {\n  border-color: #007bff;\n}\n\n.option-text {\n  font-size: 16px;\n}\n\n.powers-page {\n  padding: 20px;\n}\n\n.powers-title {\n  margin-bottom: 20px;\n  text-align: center;\n}\n\n.selected-power {\n  margin-top: 5px;\n  margin-bottom: 20px;\n  text-align: center;\n}"
                    }
                },
                {
                    "id": 33,
                    "instruction": "Open the \"Register.module.css\" file and paste in the following styles.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Javascript",
                        "DisplayLang": "CSS",
                        "FormatCode": ".register-container {\n  max-width: 400px;\n  margin: auto;\n  padding: 20px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  text-align: center;\n}\n\n.input-group {\n  margin-bottom: 15px;\n  text-align: left;\n}\n\n.field-label {\n  display: block;\n  margin-bottom: 5px;\n}\n\n.name-textfield,\n.username-textfield,\n.password-textfield {\n  width: 100%;\n  padding: 8px;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n}\n\n.register-button {\n  width: 100%;\n  padding: 10px;\n  background-color: #007BFF;\n  color: white;\n  border: none;\n  border-radius: 3px;\n  cursor: pointer;\n}\n  \n.register-button:hover {\n  background-color: #0056b3;\n}\n\n.sign-in-link {\n  display: block;\n  margin-top: 20px;\n  color: #007BFF;\n  text-decoration: none;\n}\n \n.sign-in-link:hover {\n  color: #0056b3;\n}",
                        "CopyCode": ".register-container {\n  max-width: 400px;\n  margin: auto;\n  padding: 20px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  text-align: center;\n}\n\n.input-group {\n  margin-bottom: 15px;\n  text-align: left;\n}\n\n.field-label {\n  display: block;\n  margin-bottom: 5px;\n}\n\n.name-textfield,\n.username-textfield,\n.password-textfield {\n  width: 100%;\n  padding: 8px;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n}\n\n.register-button {\n  width: 100%;\n  padding: 10px;\n  background-color: #007BFF;\n  color: white;\n  border: none;\n  border-radius: 3px;\n  cursor: pointer;\n}\n  \n.register-button:hover {\n  background-color: #0056b3;\n}\n\n.sign-in-link {\n  display: block;\n  margin-top: 20px;\n  color: #007BFF;\n  text-decoration: none;\n}\n \n.sign-in-link:hover {\n  color: #0056b3;\n}"
                    }
                },
                {
                    "id": 34,
                    "instruction": "Open the \"SignIn.module.css\" file and paste in the following styles.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Javascript",
                        "DisplayLang": "CSS",
                        "FormatCode": ".sign-in-container {\n  max-width: 400px;\n  margin: auto;\n  padding: 20px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  text-align: center;\n}\n\n.input-group {\n  margin-bottom: 15px;\n  text-align: left;\n}\n\n.field-label {\n  display: block;\n  margin-bottom: 5px;\n}\n  \n.text-field,\n.password-field {\n  width: 100%;\n  padding: 8px;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n}\n\n.sign-in-button {\n  width: 100%;\n  padding: 10px;\n  background-color: #007BFF;\n  color: white;\n  border: none;\n  border-radius: 3px;\n  cursor: pointer;\n}\n\n.sign-in-button:hover {\n  background-color: #0056b3;\n}\n\n.register-link {\n  display: block;\n  margin-top: 20px;\n  color: #007BFF;\n  text-decoration: none;\n}\n\n.register-link:hover {\n  color: #0056b3;\n}",
                        "CopyCode": ".sign-in-container {\n  max-width: 400px;\n  margin: auto;\n  padding: 20px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  text-align: center;\n}\n\n.input-group {\n  margin-bottom: 15px;\n  text-align: left;\n}\n\n.field-label {\n  display: block;\n  margin-bottom: 5px;\n}\n  \n.text-field,\n.password-field {\n  width: 100%;\n  padding: 8px;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n}\n\n.sign-in-button {\n  width: 100%;\n  padding: 10px;\n  background-color: #007BFF;\n  color: white;\n  border: none;\n  border-radius: 3px;\n  cursor: pointer;\n}\n\n.sign-in-button:hover {\n  background-color: #0056b3;\n}\n\n.register-link {\n  display: block;\n  margin-top: 20px;\n  color: #007BFF;\n  text-decoration: none;\n}\n\n.register-link:hover {\n  color: #0056b3;\n}"
                    }
                },
                {
                    "id": 35,
                    "instruction": "Open the \"Team.module.css\" file and paste in the following styles.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Javascript",
                        "DisplayLang": "CSS",
                        "FormatCode": ".container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  padding: 20px;\n}\n\n.superhero-list {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  gap: 20px;\n  justify-content: center;\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\n.superhero-item {\n  list-style-type: none;\n  background-color: navy;\n  display: flex;\n  flex-direction: column;\n  padding: 15px;\n  border-radius: 10px;\n  justify-content: space-between;\n  margin-bottom: 15px;\n  height: 100%;\n}\n\n.button {\n  background-color: red;\n  color: white;\n  border: none;\n  padding: 10px 20px;\n  font-size: 20px;\n  margin-top: auto;\n  cursor: pointer;\n  text-align: center;\n  border-radius: 5px;\n  width: 100%;\n}\n\n.button:hover {\n  background-color: darkred;\n}\n",
                        "CopyCode": ".container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  padding: 20px;\n}\n\n.superhero-list {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  gap: 20px;\n  justify-content: center;\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\n.superhero-item {\n  list-style-type: none;\n  background-color: navy;\n  display: flex;\n  flex-direction: column;\n  padding: 15px;\n  border-radius: 10px;\n  justify-content: space-between;\n  margin-bottom: 15px;\n  height: 100%;\n}\n\n.button {\n  background-color: red;\n  color: white;\n  border: none;\n  padding: 10px 20px;\n  font-size: 20px;\n  margin-top: auto;\n  cursor: pointer;\n  text-align: center;\n  border-radius: 5px;\n  width: 100%;\n}\n\n.button:hover {\n  background-color: darkred;\n}\n"
                    }
                },
                {
                    "id": 36,
                    "instruction": "Push your changes to GitHub.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Superhero-Frontend\ngit add .\ngit commit -m \"Styles\"\ngit push",
                        "CopyCode": "cd Superhero-Frontend\ngit add .\ngit commit -m \"Styles\"\ngit push"
                    }
                },
                {
                    "id": 37,
                    "instruction": "Go to src -> states. We're going to implement our states and stores."
                },
                {
                    "id": 38,
                    "instruction": "Open the \"team.js\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "FormatCode": "import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = JSON.parse(localStorage.getItem('team')) || [];\n\nconst teamSlice = createSlice({\n  name: 'team',\n  initialState,\n  reducers: {\n    addTeamSuperhero: (state, action) => {\n      const newSuperhero = { ...action.payload, team: true };\n      state.push(newSuperhero);\n      localStorage.setItem('team', JSON.stringify(state));\n    },\n    removeTeamSuperhero: (state, action) => {\n      const newState = state.filter(hero => hero.superId !== action.payload.superId);\n      localStorage.setItem('team', JSON.stringify(newState));\n      return newState;\n    },\n    clearTeam: (state) => {\n      localStorage.removeItem('team');\n      return [];\n    },\n  },\n});\n\nexport const getAllSuperheroes = (state) => state.team;\n\nexport const isSuperheroInTeam = (state, superId) => state.team.some(hero => hero.superId === superId);\n\nexport const { addTeamSuperhero, removeTeamSuperhero, clearTeam } = teamSlice.actions;\n\nexport default teamSlice.reducer;\n",
                        "CopyCode": "import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = JSON.parse(localStorage.getItem('team')) || [];\n\nconst teamSlice = createSlice({\n  name: 'team',\n  initialState,\n  reducers: {\n    addTeamSuperhero: (state, action) => {\n      const newSuperhero = { ...action.payload, team: true };\n      state.push(newSuperhero);\n      localStorage.setItem('team', JSON.stringify(state));\n    },\n    removeTeamSuperhero: (state, action) => {\n      const newState = state.filter(hero => hero.superId !== action.payload.superId);\n      localStorage.setItem('team', JSON.stringify(newState));\n      return newState;\n    },\n    clearTeam: (state) => {\n      localStorage.removeItem('team');\n      return [];\n    },\n  },\n});\n\nexport const getAllSuperheroes = (state) => state.team;\n\nexport const isSuperheroInTeam = (state, superId) => state.team.some(hero => hero.superId === superId);\n\nexport const { addTeamSuperhero, removeTeamSuperhero, clearTeam } = teamSlice.actions;\n\nexport default teamSlice.reducer;\n"
                    }
                },
                {
                    "id": 39,
                    "instruction": "Open the \"store.js\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "FormatCode": "import { configureStore } from '@reduxjs/toolkit';\nimport teamReducer from './team';\n\nconst store = configureStore({\n  reducer: {\n    team: teamReducer,\n  },\n});\n\nexport default store;",
                        "CopyCode": "import { configureStore } from '@reduxjs/toolkit';\nimport teamReducer from './team';\n\nconst store = configureStore({\n  reducer: {\n    team: teamReducer,\n  },\n});\n\nexport default store;"
                    }
                },
                {
                    "id": 40,
                    "instruction": "Open the \"auth.jsx\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "FormatCode": "import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { clearTeam } from '../states/team';\n\nconst AuthContext = createContext(null);\n\nexport const AuthProvider = ({ children = null }) => {\n  const dispatch = useDispatch();\n\n  const [user, setUser] = useState(() => {\n    const storedUser = localStorage.getItem('user');\n    return storedUser\n      ? JSON.parse(storedUser)\n      : {\n          username: null,\n          name: null,\n          userId: null,\n          superheroes: [],\n        };\n  });\n\n  useEffect(() => {\n    localStorage.setItem('user', JSON.stringify(user));\n  }, [user]);\n\n  const login = (userData, token) => {\n    setUser({\n      ...userData,\n      superheroes: [],\n    });\n\n    localStorage.setItem('token', token); \n\n    dispatch(clearTeam());\n  };\n\n  const logout = () => {\n    setUser({\n      username: null,\n      name: null,\n      userId: null,\n      superheroes: [],\n    });\n\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n  };\n\n  const setSuperheroes = (superheroes) => {\n    setUser((prevUser) => ({\n      ...prevUser,\n      superheroes,\n    }));\n  };\n\n  const getSuperheroes = () => {\n    const storedUser = localStorage.getItem('user');\n    return storedUser ? JSON.parse(storedUser).superheroes : [];\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, login, logout, setSuperheroes, getSuperheroes }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => useContext(AuthContext);\n",
                        "CopyCode": "import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { clearTeam } from '../states/team';\n\nconst AuthContext = createContext(null);\n\nexport const AuthProvider = ({ children = null }) => {\n  const dispatch = useDispatch();\n\n  const [user, setUser] = useState(() => {\n    const storedUser = localStorage.getItem('user');\n    return storedUser\n      ? JSON.parse(storedUser)\n      : {\n          username: null,\n          name: null,\n          userId: null,\n          superheroes: [],\n        };\n  });\n\n  useEffect(() => {\n    localStorage.setItem('user', JSON.stringify(user));\n  }, [user]);\n\n  const login = (userData, token) => {\n    setUser({\n      ...userData,\n      superheroes: [],\n    });\n\n    localStorage.setItem('token', token); \n\n    dispatch(clearTeam());\n  };\n\n  const logout = () => {\n    setUser({\n      username: null,\n      name: null,\n      userId: null,\n      superheroes: [],\n    });\n\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n  };\n\n  const setSuperheroes = (superheroes) => {\n    setUser((prevUser) => ({\n      ...prevUser,\n      superheroes,\n    }));\n  };\n\n  const getSuperheroes = () => {\n    const storedUser = localStorage.getItem('user');\n    return storedUser ? JSON.parse(storedUser).superheroes : [];\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, login, logout, setSuperheroes, getSuperheroes }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => useContext(AuthContext);\n"
                    }
                },
                {
                    "id": 41,
                    "instruction": "Push your changes to GitHub.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Superhero-Frontend\ngit add .\ngit commit -m \"States and Stores\"\ngit push",
                        "CopyCode": "cd Superhero-Frontend\ngit add .\ngit commit -m \"States and Stores\"\ngit push"
                    }
                },
                {
                    "id": 42,
                    "instruction": "Go to src -> views. We're going to implement our placeholder views. We'll change these later."
                },
                {
                    "id": 43,
                    "instruction": "Open the \"Add.jsx\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "React",
                        "FormatCode": "import React from \"react\";\n\nfunction AddCharacterForm() {\n  return (\n    <div>\n      <h1>Register</h1>\n    </div>\n  );\n};\n\nexport default AddCharacterForm;",
                        "CopyCode": "import React from \"react\";\n\nfunction AddCharacterForm() {\n  return (\n    <div>\n      <h1>Register</h1>\n    </div>\n  );\n};\n\nexport default AddCharacterForm;"
                    }
                },
                {
                    "id": 44,
                    "instruction": "Open the \"AdminDashboard.jsx\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "React",
                        "FormatCode": "import React from \"react\";\n\nfunction AdminDashboard() {\n  return (\n    <div>\n      <h1>Admin Dashboard</h1>\n    </div>\n  );\n};\n\nexport default AdminDashboard;",
                        "CopyCode": "import React from \"react\";\n\nfunction AdminDashboard() {\n  return (\n    <div>\n      <h1>Admin Dashboard</h1>\n    </div>\n  );\n};\n\nexport default AdminDashboard;"
                    }
                },
                {
                    "id": 45,
                    "instruction": "Open the \"CharacterPage.jsx\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "React",
                        "FormatCode": "import React from \"react\";\n\nfunction CharacterPage() {\n  return (\n    <div>\n      <h1>Character</h1>\n    </div>\n  );\n};\n\nexport default CharacterPage;",
                        "CopyCode": "import React from \"react\";\n\nfunction CharacterPage() {\n  return (\n    <div>\n      <h1>Character</h1>\n    </div>\n  );\n};\n\nexport default CharacterPage;"
                    }
                },
                {
                    "id": 46,
                    "instruction": "Open the \"HomePage.jsx\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "React",
                        "FormatCode": "import React from \"react\";\n\nfunction HomePage() {\n  return (\n    <div>\n      <h1>Home</h1>\n    </div>\n  );\n};\n\nexport default HomePage;",
                        "CopyCode": "import React from \"react\";\n\nfunction HomePage() {\n  return (\n    <div>\n      <h1>Home</h1>\n    </div>\n  );\n};\n\nexport default HomePage;"
                    }
                },
                {
                    "id": 47,
                    "instruction": "Open the \"Powers.jsx\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "React",
                        "FormatCode": "import React from \"react\";\n\nfunction Powers() {\n  return (\n    <div>\n      <h1>Powers</h1>\n    </div>\n  );\n};\n\nexport default Powers;",
                        "CopyCode": "import React from \"react\";\n\nfunction Powers() {\n  return (\n    <div>\n      <h1>Powers</h1>\n    </div>\n  );\n};\n\nexport default Powers;"
                    }
                },
                {
                    "id": 48,
                    "instruction": "Open the \"Register.jsx\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "React",
                        "FormatCode": "import React from \"react\";\n\nfunction Register() {\n  return (\n    <div>\n      <h1>Register</h1>\n    </div>\n  );\n};\n\nexport default Register;",
                        "CopyCode": "import React from \"react\";\n\nfunction Register() {\n  return (\n    <div>\n      <h1>Register</h1>\n    </div>\n  );\n};\n\nexport default Register;"
                    }
                },
                {
                    "id": 49,
                    "instruction": "Open the \"SignIn.jsx\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "React",
                        "FormatCode": "import React from \"react\";\n\nfunction SignIn() {\n  return (\n    <div>\n      <h1>Sign In</h1>\n    </div>\n  );\n};\n\nexport default SignIn;",
                        "CopyCode": "import React from \"react\";\n\nfunction SignIn() {\n  return (\n    <div>\n      <h1>Sign In</h1>\n    </div>\n  );\n};\n\nexport default SignIn;"
                    }
                },
                {
                    "id": 50,
                    "instruction": "Open the \"Team.jsx\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "React",
                        "FormatCode": "import React from \"react\";\n\nfunction SuperheroTeam() {\n  return (\n    <div>\n      <h1>Team</h1>\n    </div>\n  );\n};\n\nexport default SuperheroTeam;",
                        "CopyCode": "import React from \"react\";\n\nfunction SuperheroTeam() {\n  return (\n    <div>\n      <h1>Team</h1>\n    </div>\n  );\n};\n\nexport default SuperheroTeam;"
                    }
                },
                {
                    "id": 51,
                    "instruction": "Go to src -> router. Open the \"index.jsx\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "FormatCode": "import { Routes, Route } from 'react-router-dom';\n\nimport Add from '../views/Add.jsx';\nimport CharacterPage from '../views/CharacterPage.jsx';\nimport HomePage from '../views/HomePage.jsx';\nimport Powers from '../views/Powers.jsx';\nimport Register from '../views/Register.jsx';\nimport SignIn from '../views/SignIn.jsx';\nimport Team from '../views/Team.jsx';\nimport AdminDashboard from '../views/AdminDashboard.jsx';\n\nfunction AppRouter() {\n  return (\n    <Routes>\n      <Route path=\"/\" element={<SignIn />} />\n      <Route path=\"/Register\" element={<Register />} />\n      <Route path=\"/Home\" element={<HomePage />} />\n      <Route path=\"/Powers\" element={<Powers />} />\n      <Route path=\"/Team\" element={<Team />} />\n      <Route path=\"/Add\" element={<Add />} />\n      <Route path=\"/Character\" element={<CharacterPage />} />\n      <Route path=\"/AdminDashboard\" element={<AdminDashboard />} />\n    </Routes>\n  );\n}\n\nexport default AppRouter;",
                        "CopyCode": "import { Routes, Route } from 'react-router-dom';\n\nimport Add from '../views/Add.jsx';\nimport CharacterPage from '../views/CharacterPage.jsx';\nimport HomePage from '../views/HomePage.jsx';\nimport Powers from '../views/Powers.jsx';\nimport Register from '../views/Register.jsx';\nimport SignIn from '../views/SignIn.jsx';\nimport Team from '../views/Team.jsx';\nimport AdminDashboard from '../views/AdminDashboard.jsx';\n\nfunction AppRouter() {\n  return (\n    <Routes>\n      <Route path=\"/\" element={<SignIn />} />\n      <Route path=\"/Register\" element={<Register />} />\n      <Route path=\"/Home\" element={<HomePage />} />\n      <Route path=\"/Powers\" element={<Powers />} />\n      <Route path=\"/Team\" element={<Team />} />\n      <Route path=\"/Add\" element={<Add />} />\n      <Route path=\"/Character\" element={<CharacterPage />} />\n      <Route path=\"/AdminDashboard\" element={<AdminDashboard />} />\n    </Routes>\n  );\n}\n\nexport default AppRouter;"
                    }
                },
                {
                    "id": 52,
                    "instruction": "Push your changes to GitHub.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Superhero-Frontend\ngit add .\ngit commit -m \"Placeholder Views and Router\"\ngit push",
                        "CopyCode": "cd Superhero-Frontend\ngit add .\ngit commit -m \"Placeholder Views and Router\"\ngit push"
                    }
                },
                {
                    "id": 53,
                    "instruction": "Go to src -> components. We're going to implement our components."
                },
                {
                    "id": 54,
                    "instruction": "Open the \"CustomAlert.jsx\" file. Paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "React",
                        "FormatCode": "import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from '../styles/components/CustomAlert.module.css';\n\nconst CustomAlert = ({ \n  message, \n  subtext = '', \n  onClose, \n  action, \n  closeButtonColor = 'red', \n  buttonText = 'Close', \n  cancelButton = false\n}) => {\n\n  const [visible, setVisible] = useState(true);\n\n  const handleOnlyClose = () => {\n    setVisible(false);\n    if (onClose) onClose();\n  };\n\n  const handleMainButton = () => {\n    setVisible(false);\n    if (onClose) onClose();\n    if (action) action();\n  };\n\n  const handleCancelButton = () => {\n    setVisible(false);\n    if (onClose) onClose();\n  };\n\n  if (!visible) return null;\n\n  return (\n    <>\n      <div className={styles.overlay} />\n      <div className={styles.modal}>\n        <button className={styles['close-button']} onClick={handleOnlyClose}>\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\">\n            <path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" d=\"M3 3L21 21M3 21L21 3\" />\n          </svg>\n        </button>\n        <div className={styles['message-container']}>\n          <span className={styles['alert-msg']}>{message}</span>\n          {subtext && <div className={styles['sub-msg']}>{subtext}</div>}\n        </div>\n        {cancelButton && (\n          <div className={styles['button-container']}>\n            <button\n              className={styles['cancel-button']}\n              onClick={handleCancelButton}\n            >\n              Cancel\n            </button>\n            <button\n              style={{ backgroundColor: closeButtonColor }}\n              className={styles['alert-button']}\n              onClick={handleMainButton}\n            >\n              {buttonText}\n            </button>\n          </div>\n        )}\n        { !cancelButton && (\n            <button\n              style={{ backgroundColor: closeButtonColor }}\n              className={styles['alert-button']}\n              onClick={handleMainButton}\n            >\n              {buttonText}\n            </button>\n        )}\n      </div>\n    </>\n  );\n};\n\nCustomAlert.propTypes = {\n  message: PropTypes.string.isRequired,\n  onClose: PropTypes.func,\n  action: PropTypes.func,\n  closeButtonColor: PropTypes.string,\n  buttonText: PropTypes.string,\n  cancelButton: PropTypes.bool,\n};\n\nexport default CustomAlert;\n",
                        "CopyCode": "import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from '../styles/components/CustomAlert.module.css';\n\nconst CustomAlert = ({ \n  message, \n  subtext = '', \n  onClose, \n  action, \n  closeButtonColor = 'red', \n  buttonText = 'Close', \n  cancelButton = false\n}) => {\n\n  const [visible, setVisible] = useState(true);\n\n  const handleOnlyClose = () => {\n    setVisible(false);\n    if (onClose) onClose();\n  };\n\n  const handleMainButton = () => {\n    setVisible(false);\n    if (onClose) onClose();\n    if (action) action();\n  };\n\n  const handleCancelButton = () => {\n    setVisible(false);\n    if (onClose) onClose();\n  };\n\n  if (!visible) return null;\n\n  return (\n    <>\n      <div className={styles.overlay} />\n      <div className={styles.modal}>\n        <button className={styles['close-button']} onClick={handleOnlyClose}>\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\">\n            <path fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" d=\"M3 3L21 21M3 21L21 3\" />\n          </svg>\n        </button>\n        <div className={styles['message-container']}>\n          <span className={styles['alert-msg']}>{message}</span>\n          {subtext && <div className={styles['sub-msg']}>{subtext}</div>}\n        </div>\n        {cancelButton && (\n          <div className={styles['button-container']}>\n            <button\n              className={styles['cancel-button']}\n              onClick={handleCancelButton}\n            >\n              Cancel\n            </button>\n            <button\n              style={{ backgroundColor: closeButtonColor }}\n              className={styles['alert-button']}\n              onClick={handleMainButton}\n            >\n              {buttonText}\n            </button>\n          </div>\n        )}\n        { !cancelButton && (\n            <button\n              style={{ backgroundColor: closeButtonColor }}\n              className={styles['alert-button']}\n              onClick={handleMainButton}\n            >\n              {buttonText}\n            </button>\n        )}\n      </div>\n    </>\n  );\n};\n\nCustomAlert.propTypes = {\n  message: PropTypes.string.isRequired,\n  onClose: PropTypes.func,\n  action: PropTypes.func,\n  closeButtonColor: PropTypes.string,\n  buttonText: PropTypes.string,\n  cancelButton: PropTypes.bool,\n};\n\nexport default CustomAlert;\n"
                    }
                },
                {
                    "id": 55,
                    "instruction": "Open the \"NavBar.jsx\" file. Paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "React",
                        "FormatCode": "import React, { useState, useEffect, useRef } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { SuperheroService } from \"../services/superheroService\";\nimport { useAuth } from '../states/auth';\nimport CustomAlert from './CustomAlert';\nimport styles from \"../styles/components/NavBar.module.css\";\n\nconst Navbar = () => {\n  const { logout } = useAuth();\n  const navigate = useNavigate();\n\n  const [showAlert, setShowAlert] = useState(false);\n  \n  const [searchQuery, setSearchQuery] = useState('');\n  const [showDropdown, setShowDropdown] = useState(false);\n  const [filteredResults, setFilteredResults] = useState([]);\n  const [superheroes, setSuperheroes] = useState([]);\n\n  const searchInput = useRef(null);\n  const dropdownRef = useRef(null);\n\n  const fetchSuperheroes = async () => {\n    try {\n      const superheroesData = await SuperheroService.getAllSuperheroes();\n      setSuperheroes(superheroesData);\n    } catch (error) {\n      console.error('Error fetching superheroes:', error);\n    }\n  };\n  \n  const filterResults = (query) => {\n    const trimmedQuery = query.trim();\n  \n    if (trimmedQuery === '') {\n      setFilteredResults([]);\n      setShowDropdown(false);\n      return;\n    }\n  \n    const filtered = superheroes.filter(superhero => {\n      const lowerCaseName = superhero.name.toLowerCase();\n      return lowerCaseName.includes(trimmedQuery.toLowerCase());\n    });\n  \n    const exactMatches = filtered.filter(superhero =>\n      superhero.name.toLowerCase() === trimmedQuery.toLowerCase()\n    );\n\n    const otherMatches = filtered.filter(superhero =>\n      superhero.name.toLowerCase() !== trimmedQuery.toLowerCase()\n    );\n  \n    setFilteredResults([...exactMatches, ...otherMatches]);\n    \n    setShowDropdown(filtered.length > 0);\n  };\n  \n  const hideDropdown = (e) => {\n      setShowDropdown(false);\n      setSearchQuery('');\n      setFilteredResults([]);\n  };\n\n  const handleSignOut = () => {\n    logout();\n    navigate('/')\n  };\n\n  const handleItemClick = (itemName) => {\n\n    const selectedHero = superheroes.find(superhero => superhero.name === itemName);\n\n    if (selectedHero) {\n      navigate('/Character', { state: { superhero: selectedHero } });\n    }\n\n    setShowDropdown(false);\n    setSearchQuery('');\n    searchInput.current.blur();\n  };\n\n\n  const closeSearchBar = () => {\n    searchInput.current.blur();\n  };\n\n  const handleKeydown = (event) => {\n    if (event.key === 'Escape') {\n      closeSearchBar();\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeydown);\n    return () => {\n      window.removeEventListener('keydown', handleKeydown);\n    };\n  }, []);\n\n  return (\n    <div>\n      {showDropdown && <div className={styles[\"overlay\"]} onClick={() => setShowDropdown(false)}></div>}\n  \n      <nav className={styles[\"navbar\"]}>\n        <div className={styles[\"left-section\"]}>\n          <h1 className={styles[\"navbar-title\"]}>Superheroes</h1>\n        </div>\n        <div className={styles[\"right-section\"]}>\n          <div className={styles[\"search-bar\"]}>\n          <input\n              ref={searchInput}\n              type=\"text\"\n              className={styles[\"search-bar-input\"]}\n              value={searchQuery}\n              placeholder=\"Search...\"\n              onChange={(e) => {\n                const newQuery = e.target.value;\n                setSearchQuery(newQuery);\n                filterResults(newQuery);\n              }}\n              onFocus={async () => {\n                await fetchSuperheroes();\n                if (searchQuery) setShowDropdown(true);\n              }}\n              onBlur={hideDropdown}\n            />\n            {showDropdown && (\n              <ul className={styles[\"dropdown\"]} ref={dropdownRef}>\n                {filteredResults.map((result, index) => (\n                  <li\n                    key={index}\n                    className={styles[\"result\"]}\n                    onMouseDown={() => handleItemClick(result.name)}\n                  >\n                    <span className={styles[\"result-name\"]}>{result.name}</span>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </div>\n          <div className={styles.tabs}>\n            <ul className={styles[\"tabs-ul-list\"]}>\n              <li className={styles.tab}>\n                <Link to=\"/Home\" className={styles[\"tab-link\"]}>\n                  <p className={styles[\"tab-name\"]}>Home</p>\n                </Link>\n              </li>\n              <li className={styles.tab}>\n                <Link to=\"/Powers\" className={styles[\"tab-link\"]}>\n                  <p className={styles[\"tab-name\"]}>Powers</p>\n                </Link>\n              </li>\n              <li className={styles.tab}>\n                <Link to=\"/Team\" className={styles[\"tab-link\"]}>\n                  <p className={styles[\"tab-name\"]}>Team</p>\n                </Link>\n              </li>\n              <li className={styles.tab}>\n                <Link to=\"/Add\" className={styles[\"tab-link\"]}>\n                  <p className={styles[\"tab-name\"]}>Add</p>\n                </Link>\n              </li>\n              <li className={styles.tab} onClick={() => setShowAlert(true)}>\n                <Link className={styles[\"tab-link\"]}>\n                  <p className={styles[\"tab-name\"]}>Sign Out</p>\n                </Link>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </nav>\n      {showAlert && (\n        <CustomAlert\n          message=\"Log Out?\"\n          subtext='Are you sure you want to sign out?'\n          closeButtonColor='red'\n          onClose={() => setShowAlert(false)}\n          action={handleSignOut}\n          cancelButton={true}\n          buttonText='Sign Out'\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Navbar;\n",
                        "CopyCode": "import React, { useState, useEffect, useRef } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { SuperheroService } from \"../services/superheroService\";\nimport { useAuth } from '../states/auth';\nimport CustomAlert from './CustomAlert';\nimport styles from \"../styles/components/NavBar.module.css\";\n\nconst Navbar = () => {\n  const { logout } = useAuth();\n  const navigate = useNavigate();\n\n  const [showAlert, setShowAlert] = useState(false);\n  \n  const [searchQuery, setSearchQuery] = useState('');\n  const [showDropdown, setShowDropdown] = useState(false);\n  const [filteredResults, setFilteredResults] = useState([]);\n  const [superheroes, setSuperheroes] = useState([]);\n\n  const searchInput = useRef(null);\n  const dropdownRef = useRef(null);\n\n  const fetchSuperheroes = async () => {\n    try {\n      const superheroesData = await SuperheroService.getAllSuperheroes();\n      setSuperheroes(superheroesData);\n    } catch (error) {\n      console.error('Error fetching superheroes:', error);\n    }\n  };\n  \n  const filterResults = (query) => {\n    const trimmedQuery = query.trim();\n  \n    if (trimmedQuery === '') {\n      setFilteredResults([]);\n      setShowDropdown(false);\n      return;\n    }\n  \n    const filtered = superheroes.filter(superhero => {\n      const lowerCaseName = superhero.name.toLowerCase();\n      return lowerCaseName.includes(trimmedQuery.toLowerCase());\n    });\n  \n    const exactMatches = filtered.filter(superhero =>\n      superhero.name.toLowerCase() === trimmedQuery.toLowerCase()\n    );\n\n    const otherMatches = filtered.filter(superhero =>\n      superhero.name.toLowerCase() !== trimmedQuery.toLowerCase()\n    );\n  \n    setFilteredResults([...exactMatches, ...otherMatches]);\n    \n    setShowDropdown(filtered.length > 0);\n  };\n  \n  const hideDropdown = (e) => {\n      setShowDropdown(false);\n      setSearchQuery('');\n      setFilteredResults([]);\n  };\n\n  const handleSignOut = () => {\n    logout();\n    navigate('/')\n  };\n\n  const handleItemClick = (itemName) => {\n\n    const selectedHero = superheroes.find(superhero => superhero.name === itemName);\n\n    if (selectedHero) {\n      navigate('/Character', { state: { superhero: selectedHero } });\n    }\n\n    setShowDropdown(false);\n    setSearchQuery('');\n    searchInput.current.blur();\n  };\n\n\n  const closeSearchBar = () => {\n    searchInput.current.blur();\n  };\n\n  const handleKeydown = (event) => {\n    if (event.key === 'Escape') {\n      closeSearchBar();\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeydown);\n    return () => {\n      window.removeEventListener('keydown', handleKeydown);\n    };\n  }, []);\n\n  return (\n    <div>\n      {showDropdown && <div className={styles[\"overlay\"]} onClick={() => setShowDropdown(false)}></div>}\n  \n      <nav className={styles[\"navbar\"]}>\n        <div className={styles[\"left-section\"]}>\n          <h1 className={styles[\"navbar-title\"]}>Superheroes</h1>\n        </div>\n        <div className={styles[\"right-section\"]}>\n          <div className={styles[\"search-bar\"]}>\n          <input\n              ref={searchInput}\n              type=\"text\"\n              className={styles[\"search-bar-input\"]}\n              value={searchQuery}\n              placeholder=\"Search...\"\n              onChange={(e) => {\n                const newQuery = e.target.value;\n                setSearchQuery(newQuery);\n                filterResults(newQuery);\n              }}\n              onFocus={async () => {\n                await fetchSuperheroes();\n                if (searchQuery) setShowDropdown(true);\n              }}\n              onBlur={hideDropdown}\n            />\n            {showDropdown && (\n              <ul className={styles[\"dropdown\"]} ref={dropdownRef}>\n                {filteredResults.map((result, index) => (\n                  <li\n                    key={index}\n                    className={styles[\"result\"]}\n                    onMouseDown={() => handleItemClick(result.name)}\n                  >\n                    <span className={styles[\"result-name\"]}>{result.name}</span>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </div>\n          <div className={styles.tabs}>\n            <ul className={styles[\"tabs-ul-list\"]}>\n              <li className={styles.tab}>\n                <Link to=\"/Home\" className={styles[\"tab-link\"]}>\n                  <p className={styles[\"tab-name\"]}>Home</p>\n                </Link>\n              </li>\n              <li className={styles.tab}>\n                <Link to=\"/Powers\" className={styles[\"tab-link\"]}>\n                  <p className={styles[\"tab-name\"]}>Powers</p>\n                </Link>\n              </li>\n              <li className={styles.tab}>\n                <Link to=\"/Team\" className={styles[\"tab-link\"]}>\n                  <p className={styles[\"tab-name\"]}>Team</p>\n                </Link>\n              </li>\n              <li className={styles.tab}>\n                <Link to=\"/Add\" className={styles[\"tab-link\"]}>\n                  <p className={styles[\"tab-name\"]}>Add</p>\n                </Link>\n              </li>\n              <li className={styles.tab} onClick={() => setShowAlert(true)}>\n                <Link className={styles[\"tab-link\"]}>\n                  <p className={styles[\"tab-name\"]}>Sign Out</p>\n                </Link>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </nav>\n      {showAlert && (\n        <CustomAlert\n          message=\"Log Out?\"\n          subtext='Are you sure you want to sign out?'\n          closeButtonColor='red'\n          onClose={() => setShowAlert(false)}\n          action={handleSignOut}\n          cancelButton={true}\n          buttonText='Sign Out'\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Navbar;\n"
                    }
                },
                {
                    "id": 56,
                    "instruction": "Open the \"DisplayTable.jsx\" file. Paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "React",
                        "FormatCode": "import React, { useState } from 'react';\nimport CustomAlert from './CustomAlert';\nimport styles from '../styles/components/DisplayTable.module.css';\n\nconst DisplayTable = ({ data, onRemove }) => {\n  const [showAlert, setShowAlert] = useState(false);\n  const [selectedUser, setSelectedUser] = useState(null);\n\n  const handleRemoveClick = (user) => {\n    setSelectedUser(user);\n    setShowAlert(true);\n  };\n\n  const handleConfirmDelete = () => {\n    onRemove(selectedUser.userId);\n    setShowAlert(false);\n  };\n\n  return (\n    <div className={styles[\"table-container\"]}>\n      <table className={styles.table}>\n        <thead>\n          <tr>\n            {Object.keys(data[0]).map((key) => (\n              <th key={key} className={styles[\"header-cell\"]}>\n                {key}\n              </th>\n            ))}\n            <th>Delete</th>\n          </tr>\n        </thead>\n        <tbody>\n          {data.map((item) => (\n            <tr key={item.userId} className={styles['table-row']}>\n              {Object.keys(item).map((key) => (\n                <td key={`${item.userId}-${key}`} className={styles.cell}>\n                  {item[key]}\n                </td>\n              ))}\n              <td className={styles[\"actions-cell\"]}>\n                <button\n                  className={styles[\"remove-btn\"]}\n                  onClick={() => handleRemoveClick(item)}\n                >\n                  &minus;\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      {showAlert && selectedUser && (\n        <CustomAlert\n          message=\"Delete User\"\n          subtext={`Are you sure you want to delete the user: \"${selectedUser.name}\"?`} \n          closeButtonColor=\"red\"\n          onClose={() => setShowAlert(false)}\n          action={handleConfirmDelete}\n          cancelButton={true}\n          buttonText=\"Delete user\"\n        />\n      )}\n    </div>\n  );\n};\n\nexport default DisplayTable;\n",
                        "CopyCode": "import React, { useState } from 'react';\nimport CustomAlert from './CustomAlert';\nimport styles from '../styles/components/DisplayTable.module.css';\n\nconst DisplayTable = ({ data, onRemove }) => {\n  const [showAlert, setShowAlert] = useState(false);\n  const [selectedUser, setSelectedUser] = useState(null);\n\n  const handleRemoveClick = (user) => {\n    setSelectedUser(user);\n    setShowAlert(true);\n  };\n\n  const handleConfirmDelete = () => {\n    onRemove(selectedUser.userId);\n    setShowAlert(false);\n  };\n\n  return (\n    <div className={styles[\"table-container\"]}>\n      <table className={styles.table}>\n        <thead>\n          <tr>\n            {Object.keys(data[0]).map((key) => (\n              <th key={key} className={styles[\"header-cell\"]}>\n                {key}\n              </th>\n            ))}\n            <th>Delete</th>\n          </tr>\n        </thead>\n        <tbody>\n          {data.map((item) => (\n            <tr key={item.userId} className={styles['table-row']}>\n              {Object.keys(item).map((key) => (\n                <td key={`${item.userId}-${key}`} className={styles.cell}>\n                  {item[key]}\n                </td>\n              ))}\n              <td className={styles[\"actions-cell\"]}>\n                <button\n                  className={styles[\"remove-btn\"]}\n                  onClick={() => handleRemoveClick(item)}\n                >\n                  &minus;\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      {showAlert && selectedUser && (\n        <CustomAlert\n          message=\"Delete User\"\n          subtext={`Are you sure you want to delete the user: \"${selectedUser.name}\"?`} \n          closeButtonColor=\"red\"\n          onClose={() => setShowAlert(false)}\n          action={handleConfirmDelete}\n          cancelButton={true}\n          buttonText=\"Delete user\"\n        />\n      )}\n    </div>\n  );\n};\n\nexport default DisplayTable;\n"
                    }
                },
                {
                    "id": 57,
                    "instruction": "Open the \"Layout.jsx\" file. Paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "React",
                        "FormatCode": "import { useLocation } from 'react-router-dom';\nimport NavBar from './NavBar.jsx';\n\nconst Layout = ({ children }) => {\n  const location = useLocation();\n\n  const noNavBarRoutes = [\"/\", \"/Register\", \"/Register/\"];\n\n  return (\n    <>\n      {!noNavBarRoutes.includes(location.pathname) && <NavBar />}\n      \n      {children}\n    </>\n  );\n};\n\nexport default Layout;",
                        "CopyCode": "import { useLocation } from 'react-router-dom';\nimport NavBar from './NavBar.jsx';\n\nconst Layout = ({ children }) => {\n  const location = useLocation();\n\n  const noNavBarRoutes = [\"/\", \"/Register\", \"/Register/\"];\n\n  return (\n    <>\n      {!noNavBarRoutes.includes(location.pathname) && <NavBar />}\n      \n      {children}\n    </>\n  );\n};\n\nexport default Layout;"
                    }
                },
                {
                    "id": 58,
                    "instruction": "Open the \"SuperheroCard.jsx\" file. Paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "React",
                        "FormatCode": "import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styles from \"../styles/components/SuperheroCard.module.css\";\n\nconst SuperheroCard = ({ superhero, canNavigate = false, fullLength = true }) => {\n  const { name, realName, universe, yearCreated, image, powers } = superhero;\n  const navigate = useNavigate();\n\n  const handleClick = () => {\n    if (canNavigate) {\n      navigate('/Character', { state: { superhero } });\n    } else {\n      console.log('Navigation is disabled.');\n    }\n  };\n\n  const displayPowers = fullLength ? [\n    ...powers,\n    ...Array.from({ length: 3 - powers.length }).map(() => ({\n      powerId: Math.floor(Math.random() * 2) + 2,\n      name: 'No power'\n    }))\n  ] : powers\n\n  const handleImageError = (event) => {\n    console.error(`Failed to load image for ${name}`, event);\n  };\n\n  return (\n    <div\n      className={`${styles[\"superhero-card\"]} ${canNavigate ? styles[\"hoverable\"] : \"\"}`}\n      onClick={handleClick}\n      style={{ cursor: canNavigate ? 'pointer' : 'default' }}\n    >\n      <h2>{name}</h2>\n      <img\n        src={`${import.meta.env.VITE_S3_BUCKET}/${image.storedFilename}`}\n        alt={name}\n        style={{ height: '220px', width: '200px' }}\n        onError={handleImageError}\n      />\n      <p><strong>Real Name:</strong> {realName}</p>\n      <p><strong>Universe:</strong> {universe}</p>\n      <p><strong>Year Created:</strong> {yearCreated}</p>\n      <h3>Powers:</h3>\n      <ul>\n        {displayPowers.map((power, index) => (\n          <li\n            key={index}\n            style={{ opacity: power.name === 'No power' ? 0 : 1 }}\n          >\n            {power.name}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n  \n};\n\nexport default SuperheroCard;\n",
                        "CopyCode": "import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styles from \"../styles/components/SuperheroCard.module.css\";\n\nconst SuperheroCard = ({ superhero, canNavigate = false, fullLength = true }) => {\n  const { name, realName, universe, yearCreated, image, powers } = superhero;\n  const navigate = useNavigate();\n\n  const handleClick = () => {\n    if (canNavigate) {\n      navigate('/Character', { state: { superhero } });\n    } else {\n      console.log('Navigation is disabled.');\n    }\n  };\n\n  const displayPowers = fullLength ? [\n    ...powers,\n    ...Array.from({ length: 3 - powers.length }).map(() => ({\n      powerId: Math.floor(Math.random() * 2) + 2,\n      name: 'No power'\n    }))\n  ] : powers\n\n  const handleImageError = (event) => {\n    console.error(`Failed to load image for ${name}`, event);\n  };\n\n  return (\n    <div\n      className={`${styles[\"superhero-card\"]} ${canNavigate ? styles[\"hoverable\"] : \"\"}`}\n      onClick={handleClick}\n      style={{ cursor: canNavigate ? 'pointer' : 'default' }}\n    >\n      <h2>{name}</h2>\n      <img\n        src={`${import.meta.env.VITE_S3_BUCKET}/${image.storedFilename}`}\n        alt={name}\n        style={{ height: '220px', width: '200px' }}\n        onError={handleImageError}\n      />\n      <p><strong>Real Name:</strong> {realName}</p>\n      <p><strong>Universe:</strong> {universe}</p>\n      <p><strong>Year Created:</strong> {yearCreated}</p>\n      <h3>Powers:</h3>\n      <ul>\n        {displayPowers.map((power, index) => (\n          <li\n            key={index}\n            style={{ opacity: power.name === 'No power' ? 0 : 1 }}\n          >\n            {power.name}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n  \n};\n\nexport default SuperheroCard;\n"
                    }
                },
                {
                    "id": 59,
                    "instruction": "Go to src. Open \"App.jsx\" and delete it's contents. Then paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "React",
                        "FormatCode": "import { BrowserRouter as Router } from 'react-router-dom';\nimport AppRouter from './router';\nimport './App.css';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { AuthProvider } from './states/auth.jsx';\nimport Layout from '../src/components/Layout.jsx';\n\nconst App = () => {\n  return (\n    <AuthProvider> \n      <Router>\n        <Layout>\n          <AppRouter />\n          <ToastContainer\n            position=\"top-right\"\n            autoClose={5000}\n            hideProgressBar={false}\n            newestOnTop={false}\n            closeOnClick\n            rtl={false}\n            pauseOnFocusLoss\n            draggable\n            pauseOnHover\n          />\n        </Layout>\n      </Router>\n    </AuthProvider>\n  );\n};\n\nexport default App;\n",
                        "CopyCode": "import { BrowserRouter as Router } from 'react-router-dom';\nimport AppRouter from './router';\nimport './App.css';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { AuthProvider } from './states/auth.jsx';\nimport Layout from '../src/components/Layout.jsx';\n\nconst App = () => {\n  return (\n    <AuthProvider> \n      <Router>\n        <Layout>\n          <AppRouter />\n          <ToastContainer\n            position=\"top-right\"\n            autoClose={5000}\n            hideProgressBar={false}\n            newestOnTop={false}\n            closeOnClick\n            rtl={false}\n            pauseOnFocusLoss\n            draggable\n            pauseOnHover\n          />\n        </Layout>\n      </Router>\n    </AuthProvider>\n  );\n};\n\nexport default App;\n"
                    }
                },
                {
                    "id": 60,
                    "instruction": "Go to src. Open \"main.tsx\" and delete it's contents. Then paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "TypeScript",
                        "FormatCode": "import { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Provider } from 'react-redux';\n\n// @ts-ignore\nimport store from './states/store';\n\n// @ts-ignore\nimport App from './App.jsx';\n\ncreateRoot(document.getElementById('root')!).render(\n  <StrictMode>\n    <Provider store={store}> \n      <App />\n    </Provider>\n  </StrictMode>\n);",
                        "CopyCode": "import { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Provider } from 'react-redux';\n\n// @ts-ignore\nimport store from './states/store';\n\n// @ts-ignore\nimport App from './App.jsx';\n\ncreateRoot(document.getElementById('root')!).render(\n  <StrictMode>\n    <Provider store={store}> \n      <App />\n    </Provider>\n  </StrictMode>\n);"
                    }
                },
                {
                    "id": 61,
                    "instruction": "Push your changes to GitHub.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Superhero-Frontend\ngit add .\ngit commit -m \"Components, App, and Main\"\ngit push",
                        "CopyCode": "cd Superhero-Frontend\ngit add .\ngit commit -m \"Components, App, and Main\"\ngit push"
                    }
                },
                {
                    "id": 62,
                    "instruction": "Go to src -> views. Now we're going to actually implement our views."
                },
                {
                    "id": 63,
                    "instruction": "Open the \"Add.jsx\" file and delete it's contents. Then paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "React",
                        "FormatCode": "import React, { useState, useEffect } from \"react\";\nimport MaskedInput from 'react-text-mask';\nimport { useNavigate } from 'react-router-dom';\nimport { SuperheroService } from \"../services/superheroService\";\nimport styles from \"../styles/views/Add.module.css\";\nimport { PowerService } from \"../services/powerService\";\nimport { useAuth } from '../states/auth';\nimport CustomAlert from \"../components/CustomAlert\";\n\nfunction AddCharacterForm() {\n  const { user } = useAuth();\n  const navigate = useNavigate();\n\n  const [showAlert, setShowAlert] = useState(false);\n  const [message, setMessage] = useState('');\n  const [btnColor, setBtnColor] = useState('');\n  const [type, setType] = useState('');\n\n  const [superhero, setSuperhero] = useState({\n    name: \"\",\n    realName: \"\",\n    universe: \"\",\n    yearCreated: \"\",\n    canDelete: true,\n    powerIds: [],\n    image: null,\n  });\n\n  const [availablePowers, setAvailablePowers] = useState([]);\n  const [formIsValid, setFormIsValid] = useState(false);\n  const [yearError, setYearError] = useState(false);\n\n  useEffect(() => {\n    const fetchPowers = async () => {\n      const powers = await PowerService.getAllPowers();\n      setAvailablePowers(powers);\n    };\n    fetchPowers();\n  }, []);\n\n  useEffect(() => {\n    validateForm();\n  }, [superhero.name, \n      superhero.realName, \n      superhero.yearCreated, \n      superhero.universe, \n      superhero.powerIds, \n      superhero.image]);\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setSuperhero((prev) => ({ ...prev, [name]: value }));\n  };\n\n  const handleFileChange = (e) => {\n    const file = e.target.files[0];\n    if (file && (file.type === \"image/jpeg\" || file.type === \"image/png\")) {\n      setSuperhero((prev) => ({ ...prev, image: file }));\n    }\n  };\n\n  const handlePowerChange = (powerId) => {\n    let powerIds;\n    \n    if (superhero.powerIds.includes(powerId)) {\n      powerIds = superhero.powerIds.filter((id) => id !== powerId);\n    } else {\n      powerIds = [...superhero.powerIds, powerId];\n    }\n\n    setSuperhero((prev) => ({ ...prev, powerIds }));\n  };\n\n  const validateForm = () => {\n    const nameValid = /^[A-Za-z\\s]+$/.test(superhero.name);\n    const realNameValid = /^[A-Za-z\\s]+$/.test(superhero.realName);\n    const universeValid = superhero.universe !== \"\";\n    const yearValid = /^\\d{4}$/.test(superhero.yearCreated) && +superhero.yearCreated >= 1938 && +superhero.yearCreated <= 2025;\n    const powersSelected = superhero.powerIds.length > 0;\n    const imageValid = superhero.image !== null;\n\n    setYearError(!yearValid && superhero.yearCreated.length !== 0);\n    setFormIsValid(nameValid && realNameValid && universeValid && yearValid && powersSelected && imageValid);\n  };\n\n  const navigateAfterClose = () => {\n    if (type == 'success') {\n      navigate('/Home');\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (formIsValid) {\n      try {\n        await SuperheroService.addNewSuperhero(user.userId, superhero);\n        setType('success');\n        setMessage(\"Successfully Created Superhero!\");\n        setBtnColor('green');\n        setShowAlert(true);\n      } catch (error) {\n        setType('error');\n        setMessage(\"Failed to Create Superhero! See Console\");\n        setBtnColor('red');\n        setShowAlert(true);\n        console.error(\"Failed to create superhero:\", error);\n      }\n    }\n  };\n\n  return (\n    <div className={styles[\"outside-container\"]}>\n      <div className={styles[\"form-container\"]}>\n        <h2 className={styles[\"add-title\"]}>Add Character</h2>\n        <form onSubmit={handleSubmit} encType=\"multipart/form-data\">\n          <div className={styles[\"field-wrapper\"]}>\n            <label htmlFor=\"name\" className={styles[\"add-field-label\"]}>Character Name:</label>\n            <input\n              type=\"text\"\n              name=\"name\"\n              value={superhero.name}\n              maxLength=\"100\"\n              className={styles[\"add-field-input\"]}\n              onChange={handleInputChange}\n              required\n            />\n          </div>\n\n          <div className={styles[\"field-wrapper\"]}>\n            <label htmlFor=\"realName\" className={styles[\"add-field-label\"]}>Real Name:</label>\n            <input\n              type=\"text\"\n              name=\"realName\"\n              value={superhero.realName}\n              maxLength=\"100\"\n              className={styles[\"add-field-input\"]}\n              onChange={handleInputChange}\n              required\n            />\n          </div>\n\n          <div className={styles[\"field-wrapper\"]}>\n            <label htmlFor=\"universe\" className={styles[\"add-field-label\"]}>Universe:</label>\n            <select\n              name=\"universe\"\n              value={superhero.universe}\n              className={styles[\"add-field-input\"]}\n              onChange={handleInputChange}\n              required\n            >\n              <option value=\"\">Select Universe</option>\n              <option value=\"DC\">DC</option>\n              <option value=\"Marvel\">Marvel</option>\n            </select>\n          </div>\n\n          <div className={styles[\"field-wrapper\"]}>\n            <label htmlFor=\"yearCreated\" className={styles[\"add-field-label\"]}>Year Created:</label>\n            <MaskedInput\n              mask={[/\\d/, /\\d/, /\\d/, /\\d/]}\n              value={superhero.yearCreated}\n              onChange={handleInputChange}\n              className={`${styles[\"add-field-input\"]} ${yearError ? styles[\"error-border\"] : \"\"}`}\n              name=\"yearCreated\"\n            />\n            {yearError && (\n              <p className={styles[\"error-message\"]}>\n                Year must be between 1938 and 2025.\n              </p>\n            )}\n          </div>\n\n          <div className={styles[\"field-wrapper\"]}>\n            <label htmlFor=\"powers\" className={styles[\"add-field-label\"]}>Select Powers:</label>\n            {availablePowers.map((power) => (\n              <div key={power.powerId} className={styles[\"power-container\"]}>\n                <input\n                  type=\"checkbox\"\n                  value={power.powerId}\n                  checked={superhero.powerIds.includes(power.powerId)}\n                  onChange={() => handlePowerChange(power.powerId)}\n                />\n                {power.name}\n              </div>\n            ))}\n          </div>\n\n          <div className={styles[\"field-wrapper\"]}>\n            <label htmlFor=\"image\" className={styles[\"add-field-label\"]}>Upload Image (jpg or png):</label>\n            <input \n              type=\"file\" \n              accept=\".jpg,.jpeg,.png\" \n              className={styles[\"file-input\"]}\n              onChange={handleFileChange} \n              required \n            />\n          </div>\n\n          <button type=\"submit\" disabled={!formIsValid} className={styles['add-submit-button']}>\n            Submit\n          </button>\n          \n          {showAlert && (\n            <CustomAlert\n              message={message}\n              closeButtonColor={btnColor}\n              onClose={() => setShowAlert(false)}\n              action={navigateAfterClose}\n            />\n          )}\n\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default AddCharacterForm;\n",
                        "CopyCode": "import React, { useState, useEffect } from \"react\";\nimport MaskedInput from 'react-text-mask';\nimport { useNavigate } from 'react-router-dom';\nimport { SuperheroService } from \"../services/superheroService\";\nimport styles from \"../styles/views/Add.module.css\";\nimport { PowerService } from \"../services/powerService\";\nimport { useAuth } from '../states/auth';\nimport CustomAlert from \"../components/CustomAlert\";\n\nfunction AddCharacterForm() {\n  const { user } = useAuth();\n  const navigate = useNavigate();\n\n  const [showAlert, setShowAlert] = useState(false);\n  const [message, setMessage] = useState('');\n  const [btnColor, setBtnColor] = useState('');\n  const [type, setType] = useState('');\n\n  const [superhero, setSuperhero] = useState({\n    name: \"\",\n    realName: \"\",\n    universe: \"\",\n    yearCreated: \"\",\n    canDelete: true,\n    powerIds: [],\n    image: null,\n  });\n\n  const [availablePowers, setAvailablePowers] = useState([]);\n  const [formIsValid, setFormIsValid] = useState(false);\n  const [yearError, setYearError] = useState(false);\n\n  useEffect(() => {\n    const fetchPowers = async () => {\n      const powers = await PowerService.getAllPowers();\n      setAvailablePowers(powers);\n    };\n    fetchPowers();\n  }, []);\n\n  useEffect(() => {\n    validateForm();\n  }, [superhero.name, \n      superhero.realName, \n      superhero.yearCreated, \n      superhero.universe, \n      superhero.powerIds, \n      superhero.image]);\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setSuperhero((prev) => ({ ...prev, [name]: value }));\n  };\n\n  const handleFileChange = (e) => {\n    const file = e.target.files[0];\n    if (file && (file.type === \"image/jpeg\" || file.type === \"image/png\")) {\n      setSuperhero((prev) => ({ ...prev, image: file }));\n    }\n  };\n\n  const handlePowerChange = (powerId) => {\n    let powerIds;\n    \n    if (superhero.powerIds.includes(powerId)) {\n      powerIds = superhero.powerIds.filter((id) => id !== powerId);\n    } else {\n      powerIds = [...superhero.powerIds, powerId];\n    }\n\n    setSuperhero((prev) => ({ ...prev, powerIds }));\n  };\n\n  const validateForm = () => {\n    const nameValid = /^[A-Za-z\\s]+$/.test(superhero.name);\n    const realNameValid = /^[A-Za-z\\s]+$/.test(superhero.realName);\n    const universeValid = superhero.universe !== \"\";\n    const yearValid = /^\\d{4}$/.test(superhero.yearCreated) && +superhero.yearCreated >= 1938 && +superhero.yearCreated <= 2025;\n    const powersSelected = superhero.powerIds.length > 0;\n    const imageValid = superhero.image !== null;\n\n    setYearError(!yearValid && superhero.yearCreated.length !== 0);\n    setFormIsValid(nameValid && realNameValid && universeValid && yearValid && powersSelected && imageValid);\n  };\n\n  const navigateAfterClose = () => {\n    if (type == 'success') {\n      navigate('/Home');\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (formIsValid) {\n      try {\n        await SuperheroService.addNewSuperhero(user.userId, superhero);\n        setType('success');\n        setMessage(\"Successfully Created Superhero!\");\n        setBtnColor('green');\n        setShowAlert(true);\n      } catch (error) {\n        setType('error');\n        setMessage(\"Failed to Create Superhero! See Console\");\n        setBtnColor('red');\n        setShowAlert(true);\n        console.error(\"Failed to create superhero:\", error);\n      }\n    }\n  };\n\n  return (\n    <div className={styles[\"outside-container\"]}>\n      <div className={styles[\"form-container\"]}>\n        <h2 className={styles[\"add-title\"]}>Add Character</h2>\n        <form onSubmit={handleSubmit} encType=\"multipart/form-data\">\n          <div className={styles[\"field-wrapper\"]}>\n            <label htmlFor=\"name\" className={styles[\"add-field-label\"]}>Character Name:</label>\n            <input\n              type=\"text\"\n              name=\"name\"\n              value={superhero.name}\n              maxLength=\"100\"\n              className={styles[\"add-field-input\"]}\n              onChange={handleInputChange}\n              required\n            />\n          </div>\n\n          <div className={styles[\"field-wrapper\"]}>\n            <label htmlFor=\"realName\" className={styles[\"add-field-label\"]}>Real Name:</label>\n            <input\n              type=\"text\"\n              name=\"realName\"\n              value={superhero.realName}\n              maxLength=\"100\"\n              className={styles[\"add-field-input\"]}\n              onChange={handleInputChange}\n              required\n            />\n          </div>\n\n          <div className={styles[\"field-wrapper\"]}>\n            <label htmlFor=\"universe\" className={styles[\"add-field-label\"]}>Universe:</label>\n            <select\n              name=\"universe\"\n              value={superhero.universe}\n              className={styles[\"add-field-input\"]}\n              onChange={handleInputChange}\n              required\n            >\n              <option value=\"\">Select Universe</option>\n              <option value=\"DC\">DC</option>\n              <option value=\"Marvel\">Marvel</option>\n            </select>\n          </div>\n\n          <div className={styles[\"field-wrapper\"]}>\n            <label htmlFor=\"yearCreated\" className={styles[\"add-field-label\"]}>Year Created:</label>\n            <MaskedInput\n              mask={[/\\d/, /\\d/, /\\d/, /\\d/]}\n              value={superhero.yearCreated}\n              onChange={handleInputChange}\n              className={`${styles[\"add-field-input\"]} ${yearError ? styles[\"error-border\"] : \"\"}`}\n              name=\"yearCreated\"\n            />\n            {yearError && (\n              <p className={styles[\"error-message\"]}>\n                Year must be between 1938 and 2025.\n              </p>\n            )}\n          </div>\n\n          <div className={styles[\"field-wrapper\"]}>\n            <label htmlFor=\"powers\" className={styles[\"add-field-label\"]}>Select Powers:</label>\n            {availablePowers.map((power) => (\n              <div key={power.powerId} className={styles[\"power-container\"]}>\n                <input\n                  type=\"checkbox\"\n                  value={power.powerId}\n                  checked={superhero.powerIds.includes(power.powerId)}\n                  onChange={() => handlePowerChange(power.powerId)}\n                />\n                {power.name}\n              </div>\n            ))}\n          </div>\n\n          <div className={styles[\"field-wrapper\"]}>\n            <label htmlFor=\"image\" className={styles[\"add-field-label\"]}>Upload Image (jpg or png):</label>\n            <input \n              type=\"file\" \n              accept=\".jpg,.jpeg,.png\" \n              className={styles[\"file-input\"]}\n              onChange={handleFileChange} \n              required \n            />\n          </div>\n\n          <button type=\"submit\" disabled={!formIsValid} className={styles['add-submit-button']}>\n            Submit\n          </button>\n          \n          {showAlert && (\n            <CustomAlert\n              message={message}\n              closeButtonColor={btnColor}\n              onClose={() => setShowAlert(false)}\n              action={navigateAfterClose}\n            />\n          )}\n\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default AddCharacterForm;\n"
                    }
                },
                {
                    "id": 64,
                    "instruction": "Open the \"AdminDashboard.jsx\" file and delete it's contents. Then paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "React",
                        "FormatCode": "import React, { useEffect, useState } from 'react';\nimport DisplayTable from '../components/DisplayTable';\nimport { UserService } from '../services/userService';\nimport styles from '../styles/views/Admin.module.css';\n\nfunction AdminDashboard() {\n  const [users, setUsers] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchUsers = async () => {\n      try {\n        const fetchedUsers = await UserService.getAllUsers();\n        const nonAdminUsers = fetchedUsers.filter((user) => user.role !== 'Admin');\n        setUsers(nonAdminUsers);\n      } catch (error) {\n        console.error('Error fetching users:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchUsers();\n  }, []);\n\n  const handleRemove = async (userId) => {\n    try {\n      await UserService.deleteUser(userId);\n      setUsers((prevUsers) => prevUsers.filter((user) => user.userId !== userId));\n    } catch (error) {\n      console.error('Error deleting user:', error);\n    }\n  };\n\n  if (loading) {\n    return <div>Loading users...</div>;\n  }\n\n  return (\n    <div className={styles.container}>\n      <h1 className={styles.title}>Admin Dashboard</h1>\n      <DisplayTable data={users} onRemove={handleRemove} />\n    </div>\n  );\n}\n\nexport default AdminDashboard;\n",
                        "CopyCode": "import React, { useEffect, useState } from 'react';\nimport DisplayTable from '../components/DisplayTable';\nimport { UserService } from '../services/userService';\nimport styles from '../styles/views/Admin.module.css';\n\nfunction AdminDashboard() {\n  const [users, setUsers] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchUsers = async () => {\n      try {\n        const fetchedUsers = await UserService.getAllUsers();\n        const nonAdminUsers = fetchedUsers.filter((user) => user.role !== 'Admin');\n        setUsers(nonAdminUsers);\n      } catch (error) {\n        console.error('Error fetching users:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchUsers();\n  }, []);\n\n  const handleRemove = async (userId) => {\n    try {\n      await UserService.deleteUser(userId);\n      setUsers((prevUsers) => prevUsers.filter((user) => user.userId !== userId));\n    } catch (error) {\n      console.error('Error deleting user:', error);\n    }\n  };\n\n  if (loading) {\n    return <div>Loading users...</div>;\n  }\n\n  return (\n    <div className={styles.container}>\n      <h1 className={styles.title}>Admin Dashboard</h1>\n      <DisplayTable data={users} onRemove={handleRemove} />\n    </div>\n  );\n}\n\nexport default AdminDashboard;\n"
                    }
                },
                {
                    "id": 65,
                    "instruction": "Open the \"CharacterPage.jsx\" file and delete it's contents. Then paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "React",
                        "FormatCode": "import { useLocation } from 'react-router-dom';\nimport SuperheroCard from '../components/SuperheroCard';\nimport styles from \"../styles/views/CharacterPage.module.css\";\nimport { useCallback, useEffect, useState } from 'react';\nimport { addTeamSuperhero, removeTeamSuperhero, isSuperheroInTeam } from '../states/team';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { UserSuperheroService } from '../services/userSuperheroService';\nimport { SuperheroService } from '../services/superheroService';\nimport { useAuth } from '../states/auth';\nimport { useNavigate } from 'react-router-dom';\nimport CustomAlert from '../components/CustomAlert';\n\nfunction CharacterPage() {\n  const [showAlert, setShowAlert] = useState(false);\n\n  const location = useLocation();\n  const { superhero } = location.state || {};\n\n  const { user } = useAuth();\n  const userId = user.userId;\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  \n  const [isUserSuperhero, setIsUserSuperhero] = useState(false);\n\n  const isInTeam = useSelector((state) => isSuperheroInTeam(state, superhero?.superId));\n\n  useEffect(() => {\n    if (superhero) {\n      const checkUserSuperhero = async () => {\n        const result = await UserSuperheroService.isUserSuperhero(userId, superhero.superId);\n        setIsUserSuperhero(result);\n      };\n      checkUserSuperhero();\n    }\n  }, [superhero, userId]);\n\n\n  const handleAddSuperheroClick = useCallback(async () => {\n    if (superhero) {\n      try {\n        if (isUserSuperhero) {\n          const result = await UserSuperheroService.removeSuperheroFromUser(userId, superhero.superId);\n          setIsUserSuperhero(false);\n        } else {\n          const result = await UserSuperheroService.addSuperheroToUser(userId, superhero.superId);\n          setIsUserSuperhero(true);\n        }\n      } catch (error) {\n        console.log(\"An error occurred:\", error);\n      }\n    } else {\n      console.log(\"No superhero data available\");\n    }\n  }, [superhero, isUserSuperhero, userId]);\n\n\n  const handleTeamButtonClick = useCallback(() => {\n    if (superhero) {\n      if (isInTeam) {\n        dispatch(removeTeamSuperhero({ superId: superhero.superId }));\n      } else {\n        dispatch(addTeamSuperhero(superhero));\n      }\n    } else {\n      console.log(\"No superhero data available\");\n    }\n  }, [superhero, isInTeam, dispatch]);\n\n\n  const handleDeleteFromDatabase = () => {\n    SuperheroService.deleteCharacterFromDatabase(superhero.superId).then(() => {\n      navigate('/Home');\n    }).catch(error => {\n      console.error(\"Error deleting character:\", error);\n    });\n  };\n\n  return (\n    <div className={styles[\"character-page-container\"]}>\n      \n      <div className={styles[\"content-container\"]}>\n        <h1 className={styles.title}>Character</h1>\n\n        \n          {superhero && <SuperheroCard key={superhero.superId} superhero={superhero} fullLength={false}/>}\n          \n          <div className={styles[\"button-container\"]}>\n            <button \n              className={`${styles[\"green-button\"]} ${isUserSuperhero ? styles[\"red-button\"]: ''}`}\n              onClick={handleAddSuperheroClick}>\n              {isUserSuperhero ? \"Remove Superhero\" : \"Add Superhero\"}\n            </button>\n\n            <button\n              className={`${styles[\"blue-button\"]} ${isInTeam ? styles[\"purple-button\"] : ''}`}\n              onClick={handleTeamButtonClick}\n            >\n              {isInTeam ? 'Remove from Team' : 'Add to Team'}\n            </button>\n          </div>\n          {superhero?.canDelete && (\n            <button \n              className={styles[\"remove-db-button\"]}\n              onClick={() => setShowAlert(true)}>Delete Character From Database\n            </button>\n            )\n          }\n          {showAlert && (\n            <CustomAlert\n              message=\"Delete Character From Database?\"\n              closeButtonColor='red'\n              onClose={() => setShowAlert(false)}\n              action={handleDeleteFromDatabase}\n              buttonText='Permanently Delete'\n            />\n          )}\n      </div>\n    </div>\n  );\n}\n\nexport default CharacterPage;\n",
                        "CopyCode": "import { useLocation } from 'react-router-dom';\nimport SuperheroCard from '../components/SuperheroCard';\nimport styles from \"../styles/views/CharacterPage.module.css\";\nimport { useCallback, useEffect, useState } from 'react';\nimport { addTeamSuperhero, removeTeamSuperhero, isSuperheroInTeam } from '../states/team';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { UserSuperheroService } from '../services/userSuperheroService';\nimport { SuperheroService } from '../services/superheroService';\nimport { useAuth } from '../states/auth';\nimport { useNavigate } from 'react-router-dom';\nimport CustomAlert from '../components/CustomAlert';\n\nfunction CharacterPage() {\n  const [showAlert, setShowAlert] = useState(false);\n\n  const location = useLocation();\n  const { superhero } = location.state || {};\n\n  const { user } = useAuth();\n  const userId = user.userId;\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  \n  const [isUserSuperhero, setIsUserSuperhero] = useState(false);\n\n  const isInTeam = useSelector((state) => isSuperheroInTeam(state, superhero?.superId));\n\n  useEffect(() => {\n    if (superhero) {\n      const checkUserSuperhero = async () => {\n        const result = await UserSuperheroService.isUserSuperhero(userId, superhero.superId);\n        setIsUserSuperhero(result);\n      };\n      checkUserSuperhero();\n    }\n  }, [superhero, userId]);\n\n\n  const handleAddSuperheroClick = useCallback(async () => {\n    if (superhero) {\n      try {\n        if (isUserSuperhero) {\n          const result = await UserSuperheroService.removeSuperheroFromUser(userId, superhero.superId);\n          setIsUserSuperhero(false);\n        } else {\n          const result = await UserSuperheroService.addSuperheroToUser(userId, superhero.superId);\n          setIsUserSuperhero(true);\n        }\n      } catch (error) {\n        console.log(\"An error occurred:\", error);\n      }\n    } else {\n      console.log(\"No superhero data available\");\n    }\n  }, [superhero, isUserSuperhero, userId]);\n\n\n  const handleTeamButtonClick = useCallback(() => {\n    if (superhero) {\n      if (isInTeam) {\n        dispatch(removeTeamSuperhero({ superId: superhero.superId }));\n      } else {\n        dispatch(addTeamSuperhero(superhero));\n      }\n    } else {\n      console.log(\"No superhero data available\");\n    }\n  }, [superhero, isInTeam, dispatch]);\n\n\n  const handleDeleteFromDatabase = () => {\n    SuperheroService.deleteCharacterFromDatabase(superhero.superId).then(() => {\n      navigate('/Home');\n    }).catch(error => {\n      console.error(\"Error deleting character:\", error);\n    });\n  };\n\n  return (\n    <div className={styles[\"character-page-container\"]}>\n      \n      <div className={styles[\"content-container\"]}>\n        <h1 className={styles.title}>Character</h1>\n\n        \n          {superhero && <SuperheroCard key={superhero.superId} superhero={superhero} fullLength={false}/>}\n          \n          <div className={styles[\"button-container\"]}>\n            <button \n              className={`${styles[\"green-button\"]} ${isUserSuperhero ? styles[\"red-button\"]: ''}`}\n              onClick={handleAddSuperheroClick}>\n              {isUserSuperhero ? \"Remove Superhero\" : \"Add Superhero\"}\n            </button>\n\n            <button\n              className={`${styles[\"blue-button\"]} ${isInTeam ? styles[\"purple-button\"] : ''}`}\n              onClick={handleTeamButtonClick}\n            >\n              {isInTeam ? 'Remove from Team' : 'Add to Team'}\n            </button>\n          </div>\n          {superhero?.canDelete && (\n            <button \n              className={styles[\"remove-db-button\"]}\n              onClick={() => setShowAlert(true)}>Delete Character From Database\n            </button>\n            )\n          }\n          {showAlert && (\n            <CustomAlert\n              message=\"Delete Character From Database?\"\n              closeButtonColor='red'\n              onClose={() => setShowAlert(false)}\n              action={handleDeleteFromDatabase}\n              buttonText='Permanently Delete'\n            />\n          )}\n      </div>\n    </div>\n  );\n}\n\nexport default CharacterPage;\n"
                    }
                },
                {
                    "id": 66,
                    "instruction": "Open the \"HomePage.jsx\" file and delete it's contents. Then paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "React",
                        "FormatCode": "import React, { useState, useEffect } from 'react';\nimport { UserSuperheroService } from '../services/userSuperheroService';\nimport { useAuth } from '../states/auth';\nimport SuperheroCard from '../components/SuperheroCard';\nimport styles from '../styles/views/HomePage.module.css';\n\nfunction HomePage() {\n  const { user } = useAuth();\n  const [superheroes, setSuperheroes] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchSuperheroes = async () => {\n      try {\n        const data = await UserSuperheroService.getUserSuperheroes(user.userId);\n        if (data) {\n          setSuperheroes(data);\n        }\n      } catch (error) {\n        console.error('Failed to fetch superheroes:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (user && user.userId) {\n      fetchSuperheroes();\n    }\n  }, [user]);\n\n  return (\n    <div>\n      <div className={styles['superheroes-grid']}>\n        {loading ? (\n          <p>Loading superheroes...</p>\n        ) : superheroes.length > 0 ? (\n          superheroes.map((superhero) => (\n            <SuperheroCard key={superhero.superId} superhero={superhero} canNavigate={true} />\n          ))\n        ) : (\n          <p>No Superheroes yet! Go ahead and add some!</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default HomePage;\n",
                        "CopyCode": "import React, { useState, useEffect } from 'react';\nimport { UserSuperheroService } from '../services/userSuperheroService';\nimport { useAuth } from '../states/auth';\nimport SuperheroCard from '../components/SuperheroCard';\nimport styles from '../styles/views/HomePage.module.css';\n\nfunction HomePage() {\n  const { user } = useAuth();\n  const [superheroes, setSuperheroes] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchSuperheroes = async () => {\n      try {\n        const data = await UserSuperheroService.getUserSuperheroes(user.userId);\n        if (data) {\n          setSuperheroes(data);\n        }\n      } catch (error) {\n        console.error('Failed to fetch superheroes:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    if (user && user.userId) {\n      fetchSuperheroes();\n    }\n  }, [user]);\n\n  return (\n    <div>\n      <div className={styles['superheroes-grid']}>\n        {loading ? (\n          <p>Loading superheroes...</p>\n        ) : superheroes.length > 0 ? (\n          superheroes.map((superhero) => (\n            <SuperheroCard key={superhero.superId} superhero={superhero} canNavigate={true} />\n          ))\n        ) : (\n          <p>No Superheroes yet! Go ahead and add some!</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default HomePage;\n"
                    }
                },
                {
                    "id": 67,
                    "instruction": "Open the \"Powers.jsx\" file and delete it's contents. Then paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "React",
                        "FormatCode": "import React, { useState, useEffect } from 'react';\nimport { PowerService } from '../services/powerService';\nimport { SuperheroService } from '../services/superheroService';\nimport SuperheroCard from '../components/SuperheroCard';\nimport styles from '../styles/views/Powers.module.css';\n\n\nfunction Powers() {\n  const [powers, setPowers] = useState([]);\n  const [selectedPowerId, setSelectedPowerId] = useState('');\n  const [superheroes, setSuperheroes] = useState([]);\n\n  useEffect(() => {\n    PowerService.getAllPowers()\n      .then(response => {\n        setPowers(response);\n      })\n      .catch(error => {\n        console.error('Error fetching powers:', error);\n      });\n  }, []);\n\n  const handlePowerChange = (event) => {\n    const selectedId = event.target.value;\n    setSelectedPowerId(selectedId);\n\n    SuperheroService.getAllSuperheroesByPower(selectedId)\n      .then(response => {\n        setSuperheroes(response);\n      })\n      .catch(error => {\n        console.error('Error fetching superheroes:', error);\n      });\n  };\n\n  return (\n    <div className={styles[\"powers-page\"]}>\n      <h1 className={styles[\"powers-title\"]}>Powers</h1>\n      <select value={selectedPowerId} onChange={handlePowerChange} className={styles[\"power-selector\"]}>\n        <option className={styles[\"option-text\"]} value=\"\" disabled>Select a power</option>\n        {powers.map(power => (\n          <option key={power.powerId} value={power.powerId} className={styles[\"option-text\"]}>\n            {power.name}\n          </option>\n        ))}\n      </select>\n\n      {selectedPowerId && (\n        <h2 className={styles[\"selected-power\"]}>\n          You selected: {powers.find(power => power.powerId === parseInt(selectedPowerId))?.name} ({superheroes.length} result{superheroes.length > 1 ? 's' : ''})\n        </h2>\n      )}\n\n      <div className={styles[\"superhero-power-container\"]}>\n        {superheroes.length > 0 ? (\n          superheroes.map(superhero => (\n            <SuperheroCard \n              key={superhero.superId} \n              superhero={superhero} \n              canNavigate={true}\n              fullLength={false}\n            />\n          ))\n        ) : (\n          selectedPowerId && <p>No superheroes found for this power.</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Powers;\n",
                        "CopyCode": "import React, { useState, useEffect } from 'react';\nimport { PowerService } from '../services/powerService';\nimport { SuperheroService } from '../services/superheroService';\nimport SuperheroCard from '../components/SuperheroCard';\nimport styles from '../styles/views/Powers.module.css';\n\n\nfunction Powers() {\n  const [powers, setPowers] = useState([]);\n  const [selectedPowerId, setSelectedPowerId] = useState('');\n  const [superheroes, setSuperheroes] = useState([]);\n\n  useEffect(() => {\n    PowerService.getAllPowers()\n      .then(response => {\n        setPowers(response);\n      })\n      .catch(error => {\n        console.error('Error fetching powers:', error);\n      });\n  }, []);\n\n  const handlePowerChange = (event) => {\n    const selectedId = event.target.value;\n    setSelectedPowerId(selectedId);\n\n    SuperheroService.getAllSuperheroesByPower(selectedId)\n      .then(response => {\n        setSuperheroes(response);\n      })\n      .catch(error => {\n        console.error('Error fetching superheroes:', error);\n      });\n  };\n\n  return (\n    <div className={styles[\"powers-page\"]}>\n      <h1 className={styles[\"powers-title\"]}>Powers</h1>\n      <select value={selectedPowerId} onChange={handlePowerChange} className={styles[\"power-selector\"]}>\n        <option className={styles[\"option-text\"]} value=\"\" disabled>Select a power</option>\n        {powers.map(power => (\n          <option key={power.powerId} value={power.powerId} className={styles[\"option-text\"]}>\n            {power.name}\n          </option>\n        ))}\n      </select>\n\n      {selectedPowerId && (\n        <h2 className={styles[\"selected-power\"]}>\n          You selected: {powers.find(power => power.powerId === parseInt(selectedPowerId))?.name} ({superheroes.length} result{superheroes.length > 1 ? 's' : ''})\n        </h2>\n      )}\n\n      <div className={styles[\"superhero-power-container\"]}>\n        {superheroes.length > 0 ? (\n          superheroes.map(superhero => (\n            <SuperheroCard \n              key={superhero.superId} \n              superhero={superhero} \n              canNavigate={true}\n              fullLength={false}\n            />\n          ))\n        ) : (\n          selectedPowerId && <p>No superheroes found for this power.</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Powers;\n"
                    }
                },
                {
                    "id": 68,
                    "instruction": "Open the \"Register.jsx\" file and delete it's contents. Then paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "React",
                        "FormatCode": "import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { UserService } from \"../services/userService\";\nimport { useAuth } from \"../states/auth\";\nimport styles from \"../styles/views/Register.module.css\";\n\nfunction Register() {\n  const [name, setName] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const navigate = useNavigate();\n  const authStore = useAuth();\n\n  const handleRegister = async (e) => {\n    e.preventDefault();\n    try {\n      const userData = { name, username, password };\n      const response = await UserService.addUser(userData);\n\n      if (response) {\n        const result = await UserService.authenticateUser({ username, password });\n        \n        if (result) {\n          const { user, token } = result;\n        \n          authStore.logout();\n          authStore.login(user, token);\n          navigate(\"/Home\");  \n        } else {\n          setErrorMessage(\"Failed to log in after registration\");\n        }\n      } else {\n        setErrorMessage(\"Registration failed\");\n      }\n    } catch (error) {\n      console.error(error);\n      setErrorMessage(\"An error occurred during registration\");\n    }\n  };\n\n  return (\n    <div className={styles[\"register-container\"]}>\n      <h1>Register</h1>\n      <form onSubmit={handleRegister}>\n        <div className={styles[\"input-group\"]}>\n          <label className={styles[\"field-label\"]} htmlFor=\"name\">Name:</label>\n          <input\n            type=\"text\"\n            id=\"name\"\n            className={styles[\"name-textfield\"]}\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n            required\n          />\n        </div>\n        <div className={styles[\"input-group\"]}>\n          <label className={styles[\"field-label\"]} htmlFor=\"username\">Username:</label>\n          <input\n            type=\"text\"\n            id=\"username\"\n            className={styles[\"username-textfield\"]}\n            value={username}\n            onChange={(e) => setUsername(e.target.value)}\n            required\n          />\n        </div>\n        <div className={styles[\"input-group\"]}>\n          <label className={styles[\"field-label\"]} htmlFor=\"password\">Password:</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            className={styles[\"password-textfield\"]}\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            required\n          />\n        </div>\n        <button className={styles[\"register-button\"]} type=\"submit\">Register</button>\n      </form>\n      <p>\n        <a href=\"/\" className={styles[\"sign-in-link\"]}>Already Have an Account? Sign In</a>\n      </p>\n\n      {errorMessage && <p>{errorMessage}</p>}\n    </div>\n  );\n};\n\nexport default Register;\n",
                        "CopyCode": "import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { UserService } from \"../services/userService\";\nimport { useAuth } from \"../states/auth\";\nimport styles from \"../styles/views/Register.module.css\";\n\nfunction Register() {\n  const [name, setName] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const navigate = useNavigate();\n  const authStore = useAuth();\n\n  const handleRegister = async (e) => {\n    e.preventDefault();\n    try {\n      const userData = { name, username, password };\n      const response = await UserService.addUser(userData);\n\n      if (response) {\n        const result = await UserService.authenticateUser({ username, password });\n        \n        if (result) {\n          const { user, token } = result;\n        \n          authStore.logout();\n          authStore.login(user, token);\n          navigate(\"/Home\");  \n        } else {\n          setErrorMessage(\"Failed to log in after registration\");\n        }\n      } else {\n        setErrorMessage(\"Registration failed\");\n      }\n    } catch (error) {\n      console.error(error);\n      setErrorMessage(\"An error occurred during registration\");\n    }\n  };\n\n  return (\n    <div className={styles[\"register-container\"]}>\n      <h1>Register</h1>\n      <form onSubmit={handleRegister}>\n        <div className={styles[\"input-group\"]}>\n          <label className={styles[\"field-label\"]} htmlFor=\"name\">Name:</label>\n          <input\n            type=\"text\"\n            id=\"name\"\n            className={styles[\"name-textfield\"]}\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n            required\n          />\n        </div>\n        <div className={styles[\"input-group\"]}>\n          <label className={styles[\"field-label\"]} htmlFor=\"username\">Username:</label>\n          <input\n            type=\"text\"\n            id=\"username\"\n            className={styles[\"username-textfield\"]}\n            value={username}\n            onChange={(e) => setUsername(e.target.value)}\n            required\n          />\n        </div>\n        <div className={styles[\"input-group\"]}>\n          <label className={styles[\"field-label\"]} htmlFor=\"password\">Password:</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            className={styles[\"password-textfield\"]}\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            required\n          />\n        </div>\n        <button className={styles[\"register-button\"]} type=\"submit\">Register</button>\n      </form>\n      <p>\n        <a href=\"/\" className={styles[\"sign-in-link\"]}>Already Have an Account? Sign In</a>\n      </p>\n\n      {errorMessage && <p>{errorMessage}</p>}\n    </div>\n  );\n};\n\nexport default Register;\n"
                    }
                },
                {
                    "id": 69,
                    "instruction": "Open the \"SignIn.jsx\" file and delete it's contents. Then paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "React",
                        "FormatCode": "import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { UserService } from '../services/userService';\nimport { useAuth } from '../states/auth.jsx';\nimport styles from \"../styles/views/SignIn.module.css\";\n\nfunction SignIn() {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const navigate = useNavigate();\n  const { login, logout } = useAuth();\n\n  const handleSignIn = async (e) => {\n    e.preventDefault();\n    try {\n      const userData = { username, password };\n      const result = await UserService.authenticateUser(userData);\n\n      if (result) {\n        const { user, token } = result;\n\n        logout();\n        login(user, token);\n        \n        if (user.role === \"User\") {\n          navigate('/Home');\n        } else if (user.role === \"Admin\") {\n          navigate('/AdminDashboard');\n        }\n      } else {\n        setErrorMessage('Invalid username or password');\n      }\n    } catch (error) {\n      console.error(error);\n      setErrorMessage('An error occurred during sign-in');\n    }\n  };\n\n  useEffect(() => {\n    logout();\n  }, []);\n\n  return (\n    <div className={styles[\"sign-in-container\"]}>\n      <h1>Sign In</h1>\n      <form onSubmit={handleSignIn}>\n        <div className={styles[\"input-group\"]}>\n          <label className={styles[\"field-label\"]} htmlFor=\"username\">Username:</label>\n          <input\n            type=\"text\"\n            id=\"username\"\n            className={styles[\"text-field\"]}\n            value={username}\n            onChange={(e) => setUsername(e.target.value)}\n            required\n          />\n        </div>\n        <div className={styles[\"input-group\"]}>\n          <label className={styles[\"field-label\"]} htmlFor=\"password\">Password:</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            className={styles[\"password-field\"]}\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            required\n          />\n        </div>\n        <button className={styles[\"sign-in-button\"]} type=\"submit\">Sign In</button>\n      </form>\n      <a href=\"/Register\" className={styles[\"register-link\"]}>\n        Don't Have an Account? Sign up\n      </a>\n\n      {errorMessage && <p>{errorMessage}</p>}\n    </div>\n  );\n};\n\nexport default SignIn;\n",
                        "CopyCode": "import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { UserService } from '../services/userService';\nimport { useAuth } from '../states/auth.jsx';\nimport styles from \"../styles/views/SignIn.module.css\";\n\nfunction SignIn() {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const navigate = useNavigate();\n  const { login, logout } = useAuth();\n\n  const handleSignIn = async (e) => {\n    e.preventDefault();\n    try {\n      const userData = { username, password };\n      const result = await UserService.authenticateUser(userData);\n\n      if (result) {\n        const { user, token } = result;\n\n        logout();\n        login(user, token);\n        \n        if (user.role === \"User\") {\n          navigate('/Home');\n        } else if (user.role === \"Admin\") {\n          navigate('/AdminDashboard');\n        }\n      } else {\n        setErrorMessage('Invalid username or password');\n      }\n    } catch (error) {\n      console.error(error);\n      setErrorMessage('An error occurred during sign-in');\n    }\n  };\n\n  useEffect(() => {\n    logout();\n  }, []);\n\n  return (\n    <div className={styles[\"sign-in-container\"]}>\n      <h1>Sign In</h1>\n      <form onSubmit={handleSignIn}>\n        <div className={styles[\"input-group\"]}>\n          <label className={styles[\"field-label\"]} htmlFor=\"username\">Username:</label>\n          <input\n            type=\"text\"\n            id=\"username\"\n            className={styles[\"text-field\"]}\n            value={username}\n            onChange={(e) => setUsername(e.target.value)}\n            required\n          />\n        </div>\n        <div className={styles[\"input-group\"]}>\n          <label className={styles[\"field-label\"]} htmlFor=\"password\">Password:</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            className={styles[\"password-field\"]}\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            required\n          />\n        </div>\n        <button className={styles[\"sign-in-button\"]} type=\"submit\">Sign In</button>\n      </form>\n      <a href=\"/Register\" className={styles[\"register-link\"]}>\n        Don't Have an Account? Sign up\n      </a>\n\n      {errorMessage && <p>{errorMessage}</p>}\n    </div>\n  );\n};\n\nexport default SignIn;\n"
                    }
                },
                {
                    "id": 70,
                    "instruction": "Open the \"Team.jsx\" file and delete it's contents. Then paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "React",
                        "FormatCode": "import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getAllSuperheroes, removeTeamSuperhero } from '../states/team';\nimport SuperheroCard from '../components/SuperheroCard';\nimport styles from '../styles/views/Team.module.css';\n\nfunction SuperheroTeam() {\n  const superheroes = useSelector(getAllSuperheroes);\n  const dispatch = useDispatch();\n\n  const unaddHero = (superhero) => {\n    dispatch(removeTeamSuperhero(superhero));\n  };\n\n  return (\n    <div className={styles.container}>\n      <h1>Your Superhero Team</h1>\n      <ul className={styles['superhero-list']}>\n        {superheroes.map(hero => (\n          <li key={hero.superId} className={styles['superhero-item']}>\n            <SuperheroCard superhero={hero} />\n            <button onClick={() => unaddHero(hero)} className={styles.button}>Remove</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default SuperheroTeam;\n",
                        "CopyCode": "import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getAllSuperheroes, removeTeamSuperhero } from '../states/team';\nimport SuperheroCard from '../components/SuperheroCard';\nimport styles from '../styles/views/Team.module.css';\n\nfunction SuperheroTeam() {\n  const superheroes = useSelector(getAllSuperheroes);\n  const dispatch = useDispatch();\n\n  const unaddHero = (superhero) => {\n    dispatch(removeTeamSuperhero(superhero));\n  };\n\n  return (\n    <div className={styles.container}>\n      <h1>Your Superhero Team</h1>\n      <ul className={styles['superhero-list']}>\n        {superheroes.map(hero => (\n          <li key={hero.superId} className={styles['superhero-item']}>\n            <SuperheroCard superhero={hero} />\n            <button onClick={() => unaddHero(hero)} className={styles.button}>Remove</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default SuperheroTeam;\n"
                    }
                },
                {
                    "id": 71,
                    "instruction": "Push your changes to GitHub.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "React",
                        "FormatCode": "cd Superhero-Frontend\ngit add .\ngit commit -m \"Views\"\ngit push",
                        "CopyCode": "cd Superhero-Frontend\ngit add .\ngit commit -m \"Views\"\ngit push"
                    }
                },
                {
                    "id": 72,
                    "instruction": "Go to src -> tests. We're going to implement the tests for our project."
                },
                {
                    "id": 73,
                    "instruction": "Open the \"SignIn.test.js\" file and paste in the following code. This is how we'll test our code using Jest.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "FormatCode": "import React from 'react';\nimport { render, fireEvent, screen, waitFor } from '@testing-library/react';\nimport { useNavigate } from 'react-router-dom';\nimport { UserService } from '../services/userService.tsx';\nimport { useAuth } from '../states/auth.jsx';\nimport SignIn from '../views/SignIn';\nimport '@testing-library/jest-dom';\n\njest.mock('react-router-dom', () => ({\n  useNavigate: jest.fn(),\n}));\njest.mock('../services/userService');\njest.mock('../states/auth', () => ({\n  useAuth: jest.fn(),\n}));\n\ndescribe('SignIn Component', () => {\n  let navigateMock;\n  let loginMock;\n  let logoutMock;\n\n  beforeEach(() => {\n    navigateMock = jest.fn();\n    loginMock = jest.fn();\n    logoutMock = jest.fn();\n\n    consoleErrorMock = jest.spyOn(console, 'error').mockImplementation(() => {});\n\n\n    useNavigate.mockReturnValue(navigateMock);\n    useAuth.mockReturnValue({\n      login: loginMock,\n      logout: logoutMock,\n    });\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n    consoleErrorMock.mockRestore();\n  });\n\n  it('should render the SignIn form', () => {\n    render(<SignIn />);\n    \n    expect(screen.getByLabelText(/username/i)).toBeInTheDocument();\n    expect(screen.getByLabelText(/password/i)).toBeInTheDocument();\n    expect(screen.getByRole('button', { name: /sign in/i })).toBeInTheDocument();\n  });\n\n\n  it('should allow the user to type in the username and password fields', () => {\n    render(<SignIn />);\n\n    const usernameInput = screen.getByLabelText(/username/i);\n    const passwordInput = screen.getByLabelText(/password/i);\n\n    fireEvent.change(usernameInput, { target: { value: 'testuser' } });\n    fireEvent.change(passwordInput, { target: { value: 'password123' } });\n\n    expect(usernameInput.value).toBe('testuser');\n    expect(passwordInput.value).toBe('password123');\n  });\n\n\n  it('should submit the form and call the login function on successful sign in', async () => {\n    const mockUser = { username: 'testuser' };\n    UserService.authenticateUser.mockResolvedValue(mockUser);\n\n    render(<SignIn />);\n\n    const usernameInput = screen.getByLabelText(/username/i);\n    const passwordInput = screen.getByLabelText(/password/i);\n    const signInButton = screen.getByRole('button', { name: /sign in/i });\n\n    fireEvent.change(usernameInput, { target: { value: 'testuser' } });\n    fireEvent.change(passwordInput, { target: { value: 'password123' } });\n\n    fireEvent.click(signInButton);\n\n    await waitFor(() => expect(UserService.authenticateUser).toHaveBeenCalledWith({\n      username: 'testuser',\n      password: 'password123',\n    }));\n\n    expect(logoutMock).toHaveBeenCalled();\n    expect(loginMock).toHaveBeenCalledWith(mockUser);\n    expect(navigateMock).toHaveBeenCalledWith('/Home');\n  });\n\n\n  it('should display an error message on failed sign in', async () => {\n    UserService.authenticateUser.mockResolvedValue(null);\n\n    render(<SignIn />);\n\n    const usernameInput = screen.getByLabelText(/username/i);\n    const passwordInput = screen.getByLabelText(/password/i);\n    const signInButton = screen.getByRole('button', { name: /sign in/i });\n\n    fireEvent.change(usernameInput, { target: { value: 'wronguser' } });\n    fireEvent.change(passwordInput, { target: { value: 'wrongpassword' } });\n\n    fireEvent.click(signInButton);\n\n    await waitFor(() => expect(screen.getByText(/invalid username or password/i)).toBeInTheDocument());\n  });\n\n\n  it('should handle errors during sign-in process', async () => {\n    UserService.authenticateUser.mockRejectedValue(new Error('An error occurred'));\n\n    render(<SignIn />);\n\n    const usernameInput = screen.getByLabelText(/username/i);\n    const passwordInput = screen.getByLabelText(/password/i);\n    const signInButton = screen.getByRole('button', { name: /sign in/i });\n\n    fireEvent.change(usernameInput, { target: { value: 'testuser' } });\n    fireEvent.change(passwordInput, { target: { value: 'password123' } });\n\n    fireEvent.click(signInButton);\n\n    await waitFor(() => expect(screen.getByText(/an error occurred during sign-in/i)).toBeInTheDocument());\n  });\n  \n});\n",
                        "CopyCode": "import React from 'react';\nimport { render, fireEvent, screen, waitFor } from '@testing-library/react';\nimport { useNavigate } from 'react-router-dom';\nimport { UserService } from '../services/userService.tsx';\nimport { useAuth } from '../states/auth.jsx';\nimport SignIn from '../views/SignIn';\nimport '@testing-library/jest-dom';\n\njest.mock('react-router-dom', () => ({\n  useNavigate: jest.fn(),\n}));\njest.mock('../services/userService');\njest.mock('../states/auth', () => ({\n  useAuth: jest.fn(),\n}));\n\ndescribe('SignIn Component', () => {\n  let navigateMock;\n  let loginMock;\n  let logoutMock;\n\n  beforeEach(() => {\n    navigateMock = jest.fn();\n    loginMock = jest.fn();\n    logoutMock = jest.fn();\n\n    consoleErrorMock = jest.spyOn(console, 'error').mockImplementation(() => {});\n\n\n    useNavigate.mockReturnValue(navigateMock);\n    useAuth.mockReturnValue({\n      login: loginMock,\n      logout: logoutMock,\n    });\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n    consoleErrorMock.mockRestore();\n  });\n\n  it('should render the SignIn form', () => {\n    render(<SignIn />);\n    \n    expect(screen.getByLabelText(/username/i)).toBeInTheDocument();\n    expect(screen.getByLabelText(/password/i)).toBeInTheDocument();\n    expect(screen.getByRole('button', { name: /sign in/i })).toBeInTheDocument();\n  });\n\n\n  it('should allow the user to type in the username and password fields', () => {\n    render(<SignIn />);\n\n    const usernameInput = screen.getByLabelText(/username/i);\n    const passwordInput = screen.getByLabelText(/password/i);\n\n    fireEvent.change(usernameInput, { target: { value: 'testuser' } });\n    fireEvent.change(passwordInput, { target: { value: 'password123' } });\n\n    expect(usernameInput.value).toBe('testuser');\n    expect(passwordInput.value).toBe('password123');\n  });\n\n\n  it('should submit the form and call the login function on successful sign in', async () => {\n    const mockUser = { username: 'testuser' };\n    UserService.authenticateUser.mockResolvedValue(mockUser);\n\n    render(<SignIn />);\n\n    const usernameInput = screen.getByLabelText(/username/i);\n    const passwordInput = screen.getByLabelText(/password/i);\n    const signInButton = screen.getByRole('button', { name: /sign in/i });\n\n    fireEvent.change(usernameInput, { target: { value: 'testuser' } });\n    fireEvent.change(passwordInput, { target: { value: 'password123' } });\n\n    fireEvent.click(signInButton);\n\n    await waitFor(() => expect(UserService.authenticateUser).toHaveBeenCalledWith({\n      username: 'testuser',\n      password: 'password123',\n    }));\n\n    expect(logoutMock).toHaveBeenCalled();\n    expect(loginMock).toHaveBeenCalledWith(mockUser);\n    expect(navigateMock).toHaveBeenCalledWith('/Home');\n  });\n\n\n  it('should display an error message on failed sign in', async () => {\n    UserService.authenticateUser.mockResolvedValue(null);\n\n    render(<SignIn />);\n\n    const usernameInput = screen.getByLabelText(/username/i);\n    const passwordInput = screen.getByLabelText(/password/i);\n    const signInButton = screen.getByRole('button', { name: /sign in/i });\n\n    fireEvent.change(usernameInput, { target: { value: 'wronguser' } });\n    fireEvent.change(passwordInput, { target: { value: 'wrongpassword' } });\n\n    fireEvent.click(signInButton);\n\n    await waitFor(() => expect(screen.getByText(/invalid username or password/i)).toBeInTheDocument());\n  });\n\n\n  it('should handle errors during sign-in process', async () => {\n    UserService.authenticateUser.mockRejectedValue(new Error('An error occurred'));\n\n    render(<SignIn />);\n\n    const usernameInput = screen.getByLabelText(/username/i);\n    const passwordInput = screen.getByLabelText(/password/i);\n    const signInButton = screen.getByRole('button', { name: /sign in/i });\n\n    fireEvent.change(usernameInput, { target: { value: 'testuser' } });\n    fireEvent.change(passwordInput, { target: { value: 'password123' } });\n\n    fireEvent.click(signInButton);\n\n    await waitFor(() => expect(screen.getByText(/an error occurred during sign-in/i)).toBeInTheDocument());\n  });\n  \n});\n"
                    }
                },
                {
                    "id": 74,
                    "instruction": "Push your changes to GitHub.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Superhero-Frontend\ngit add .\ngit commit -m \"Testing\"\ngit push",
                        "CopyCode": "cd Superhero-Frontend\ngit add .\ngit commit -m \"Testing\"\ngit push"
                    }
                },
                {
                    "id": 75,
                    "instruction": "Now open a terminal and run your tests using the following commands.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Superhero-Frontend\nnpm test",
                        "CopyCode": "cd Superhero-Frontend\nnpm test"
                    }
                },
                {
                    "id": 76,
                    "instruction": "A test-report.html file should've been created in the previous command. Use the following command to open it in your browser.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "open test-report.html",
                        "CopyCode": "open test-report.html"
                    }
                },
                {
                    "id": 77,
                    "instruction": "Now close all your terminals."
                },
                {
                    "id": 78,
                    "instruction": "Open a new terminal and run your Rest Api using the following commands.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Superhero-Rest-Api\ngradle run",
                        "CopyCode": "cd Superhero-Rest-Api\ngradle run"
                    }
                },
                {
                    "id": 79,
                    "instruction": "Keep the other terminal running, but open a second one. Use the following commands to run your React app.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Superhero-Frontend\nnpm run dev",
                        "CopyCode": "cd Superhero-Frontend\nnpm run dev"
                    }
                },
                {
                    "id": 80,
                    "instruction": "Try out the features of the website. Register a new user, then add superheroes, add team superheroes, etc."
                },
                {
                    "id": 81,
                    "instruction": "Sign out and then sign in as an existing user with the following credentials. Then just try out features on the website.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "Credentials",
                        "FormatCode": "john_doe\npassword1",
                        "CopyCode": "john_doe\npassword1"
                    }
                },
                {
                    "id": 82,
                    "instruction": "After you're done, go back to the terminal running your rest api. Press \"control + c\" to stop the process then close then terminal. Then go to the terminal running your frontend and close it."
                },
                {
                    "id": 83,
                    "instruction": "Now login to your database and run the following commands and queries to see your changes. Enter your password when prompted.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customsql",
                        "DisplayLang": "SQL",
                        "FormatCode": "mysql -u superhero_user -p superhero_db\n\nSELECT * FROM users;\nSELECT * FROM superheroes;\nSELECT * FROM powers;\nSELECT * FROM images;\nSELECT * FROM user_superheroes;\nSELECT * FROM superhero_powers;",
                        "CopyCode": "mysql -u superhero_user -p superhero_db\n\nSELECT * FROM users;\nSELECT * FROM superheroes;\nSELECT * FROM powers;\nSELECT * FROM images;\nSELECT * FROM user_superheroes;\nSELECT * FROM superhero_powers;\n"
                    }
                },
                {
                    "id": 84,
                    "instruction": "Now run your frontend using the following commands.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Superhero-Frontend\nnpm run dev",
                        "CopyCode": "cd Superhero-Frontend\nnpm run dev"
                    }
                },
                {
                    "id": 85,
                    "instruction": "Sign in as an admin using the following credentials.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "Credentials",
                        "FormatCode": "username: admin_guy\npassword0",
                        "CopyCode": "username: admin_guy\npassword0"
                    }
                },
                {
                    "id": 86,
                    "instruction": "Sign in as an admin using the following credentials.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "Credentials",
                        "FormatCode": "username: admin_guy\npassword0",
                        "CopyCode": "username: admin_guy\npassword0"
                    }
                },
                {
                    "id": 87,
                    "instruction": "You can delete users in the admin UI view."
                },
                {
                    "id": 88,
                    "instruction": "These are some test user you can use to sign into the website as a regular user instead of an Admin. Some of these users may have been deleted with previous HTTP requests.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "Credentials",
                        "FormatCode": "john_doe\npassword1\n\njane_smith\npassword2\n\nmichael_jones\npassword3\n\nemily_clark\npassword4\n\ndavid_brown\npassword5\n\nsarah_davis\npassword6\n\nchris_wilson\npassword7\n\nlisa_martin\npassword8\n\ndaniel_moore\npassword9\n\nlaura_taylor\npassword10\n\njimmy_page\nguitarplayer123\n",
                        "CopyCode": "john_doe\npassword1\n\njane_smith\npassword2\n\nmichael_jones\npassword3\n\nemily_clark\npassword4\n\ndavid_brown\npassword5\n\nsarah_davis\npassword6\n\nchris_wilson\npassword7\n\nlisa_martin\npassword8\n\ndaniel_moore\npassword9\n\nlaura_taylor\npassword10\n\njimmy_page\nguitarplayer123\n"
                    }
                },
                {
                    "id": 89,
                    "instruction": "When you're done go back to your Rest Api and do \"control + c\" to stop running it"
                },
                {
                    "id": 90,
                    "instruction": "Congratulations! You should now be done building the website. Now we'll deploy our app in the &Deploy the React, Spring Boot and MySQL app to Amazon Web Services&[DeployMySqlLink] instruction set."
                }
            ]
        }
    ]
}