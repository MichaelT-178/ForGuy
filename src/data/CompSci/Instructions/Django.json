{
    "MultiSet": [
        {
            "Info": [
                {
                    "title": "How to Make a Complex Rest API using Angular, Django and PostgreSQL",
                    "desc": "Explains the process of setting up an Angular frontend with a Django Rest API backend.",
                    "ref": "django-PostgreSQL"
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "We'll build a full-stack web application step-by-step using Angular, Python, Django, and Postgres."
                },
                {
                    "id": 2,
                    "instruction": "A full video demo of this app can be found on my YouTube channel [here](FILL THIS IN)."
                },
                {
                    "id": 3,
                    "instruction": "Let's get started!"
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "Technologies We'll Use",
                    "desc": "This is the techstack we'll use to make this project"
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "<u><b>Angular</u></b> - The JavaScript Framework we'll use to build our user interface."
                },
                {
                    "id": 2,
                    "instruction": "<u><b>JavaScript</u></b> - The scripting language we'll use to add logic to our frontend."
                },
                {
                    "id": 3,
                    "instruction": "<u><b>Django</u></b> - The Python web framework we'll use to help build our Rest Api."
                },
                {
                    "id": 4,
                    "instruction": "<u><b>Python</u></b> - The programming language we'll use to develop our Rest Api."
                },
                {
                    "id": 5,
                    "instruction": "<u><b>SQL</u></b> - The language we'll use to help build and query our database."
                },
                {
                    "id": 6,
                    "instruction": "<u><b>PostgreSQL</u></b> - The database we'll use to store user information."
                },
                {
                    "id": 7,
                    "instruction": "<u><b>Visual Studio Code</u></b> - The code editor we'll use to help us build our project."
                },
                {
                    "id": 8,
                    "instruction": "<u><b>PyTest</u></b> - The Python testing framework we'll use to test our Rest Api."
                },
                {
                    "id": 9,
                    "instruction": "<u><b>Jasmine</u></b> - The built-in Angular testing framework we'll use to test our frontend code."
                },
                {
                    "id": 10,
                    "instruction": "<u><b>Github</u></b> - The platform we'll use for version control and collaborative software development."
                },
                {
                    "id": 11,
                    "instruction": "<u><b>Git</u></b> - The distributed version control system we'll use to track changes to our projects."
                },
                {
                    "id": 12,
                    "instruction": "<u><b>Homebrew</u></b> - MacOS package manager we'll use to install software. Optional to use."
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "Setup Technologies",
                    "desc": "Explanation of how to setup and verify all technologies."
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "Verify you have visual studio Code installed by running the following command in a terminal. If it outputs a version number you should have it installed.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "code --version",
                        "CopyCode": "code --version"
                    }
                },
                {
                    "id": 2,
                    "instruction": "If you haven't already download Visual Studio Code [Here](https://code.visualstudio.com/download). Download the version that matches your operating system."
                },
                {
                    "id": 3,
                    "instruction": "Verify that you have Homebrew installed on your computer by running this command in your terminal. If it outputs a version you should have it installed.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "brew --version",
                        "CopyCode": "brew --version"
                    }
                },
                {
                    "id": 4,
                    "instruction": "If you don't already have homebrew installed, install it using the following command.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"",
                        "CopyCode": "/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\""
                    }
                },
                {
                    "id": 5,
                    "instruction": "Verify that you have node and npm installed by running the following commands. If they output a version you should be good.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "node -v\nnpm -v",
                        "CopyCode": "node -v\nnpm -v"
                    }
                },
                {
                    "id": 6,
                    "instruction": "If node and npm didn't output a version, download them using homebrew. It's just one command.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "brew install node",
                        "CopyCode": "brew install node"
                    }
                },
                {
                    "id": 7,
                    "instruction": "Verify that you have Python3 installed.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "python3 --version",
                        "CopyCode": "python3 --version"
                    }
                },
                {
                    "id": 8,
                    "instruction": "If you don't have Python3 installed, download it [here](https://www.python.org/downloads/)"
                },
                {
                    "id": 9,
                    "instruction": "Install the following Python libraries",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "pip3 install django\npip3 install pytest\npip3 install pytest-html",
                        "CopyCode": "pip3 install django\npip3 install pytest\npip3 install pytest-html"
                    }
                },
                {
                    "id": 10,
                    "instruction": "Verify you have the Python packages installed by running the following commands. If it doesn't produce a \"WARNING: Package(s) not found\" error, you should be good.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "pip3 show django\npip3 show pytest",
                        "CopyCode": "pip3 show django\npip3 show pytest"
                    }
                },
                {
                    "id": 11,
                    "instruction": "Go to [github.com](https://github.com/) to see if you have an account. If you don't press the \"Sign Up\" button in the top-right and follow the prompts."
                },
                {
                    "id": 12,
                    "instruction": "Verify that git is installed by running the following command in a terminal. If it outputs a version you're good.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "git --version",
                        "CopyCode": "git --version"
                    }
                },
                {
                    "id": 13,
                    "instruction": "If you don't have git setup follow this instruction set (here)[/CompSci/GitHub#createGHAccount]."
                },
                {
                    "id": 14,
                    "instruction": "Verify that you have PostgreSQL installed by running the following command.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "psql --version",
                        "CopyCode": "psql --version"
                    }
                },
                {
                    "id": 15,
                    "instruction": "If the command in step 17 didn't output the version, see the next steps titled \"How to Install PostgreSQL\". Follow the instruction set that corresponds to your operating system."
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "How to Install PostgreSQL",
                    "desc": "Explains how to install PostgreSQL on MacOS."
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "Go [here](https://www.postgresql.org/download/) to see the instructions for how to download PostgreSQL. Press on the card that has the logo of your operating system. For mac you would just install it using the following commands. Make sure to upgrade brew first.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "brew install pkg-config\nbrew upgrade gh\nbrew upgrade\nbrew install postgresql@15",
                        "CopyCode": "brew install pkg-config\nbrew upgrade gh\nbrew upgrade\nbrew install postgresql@15"
                    }
                },
                {
                    "id": 2,
                    "instruction": "If you get an error that says \"error: externally-managed-environment\" when you try to run pip3 after upgrading brew, I'd honestly just recommend downloading the latest version of python [here](https://www.python.org/downloads/). Ignore the suggested fixes."
                },
                {
                    "id": 3,
                    "instruction": "Add PostgreSQL to your PATH",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "echo 'export PATH=\"/usr/local/opt/postgresql@15/bin:$PATH\"' >> ~/.zshrc\nsource ~/.zshrc",
                        "CopyCode": "echo 'export PATH=\"/usr/local/opt/postgresql@15/bin:$PATH\"' >> ~/.zshrc\nsource ~/.zshrc"
                    }
                },
                {
                    "id": 4,
                    "instruction": "Verify that you have PostgreSQL installed by running the following command.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "psql --version",
                        "CopyCode": "psql --version"
                    }
                },
                {
                    "id": 5,
                    "instruction": "If step 21 didn't work your path might be wrong. Run the following command and look for the echo command in the output.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "brew reinstall postgresql@15",
                        "CopyCode": "brew reinstall postgresql@15"
                    }
                },
                {
                    "id": 6,
                    "instruction": "If step 21 didn't work, open your ~/.zshrc file by running the following command and then delete the old path. Then press control + o, return/enter, control + x to save your changes",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "nano ~/.zshrc",
                        "CopyCode": "nano ~/.zshrc"
                    }
                },
                {
                    "id": 7,
                    "instruction": "If step 21 didn't work, run the following command to source your file. Then check that psql is installed.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "source ~/.zshrc\npsql --version",
                        "CopyCode": "source ~/.zshrc\npsql --version"
                    }
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "Design Your Database Schema",
                    "desc": "The first thing we'll do is design our database ER and Schema diagrams."
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "We'll be creating a notes app. We'll have users that each have their own set of notes. Each note will have it's individual attributes."
                },
                {
                    "id": 2,
                    "instruction": "To design our diagrams we'll use [erdplus.com](https://erdplus.com/). We used this tool in CSC 455 (now CSC 355) so you should be able to login using your UNCW credentials. Go to the \"Documents\" tab to create your diagram."
                },
                {
                    "id": 3,
                    "instruction": "This will be our &Schema Diagram&(/download/NotesSchema.png). Go to the \"Documents\" tab to create your diagram. Then name your diagram and select \"Relational Schema\". When you finished press \"Menu\" in the top-left. Select \"High Resolution (4x normal size)\" and then press Save. NOTE: I'm not 100% sure if this diagram is completely accurate."
                },
                {
                    "id": 4,
                    "instruction": "This will be our &ER Diagram&(/download/NotesSchema.png). Go to the \"Documents\" tab to create your diagram. Then name your diagram and select \"ER Diagram\". When you finished press \"Menu\" in the top-left. Select \"High Resolution (4x normal size)\" and then press Save. NOTE: I'm not 100% sure if this diagram is completely accurate."
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "Setup PostgreSQL Database",
                    "desc": "We'll Setup our PostgreSQL database for our project on MacOS."
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "Each user in your group will have to setup PostgreSQL on their own computer."
                },
                {
                    "id": 2,
                    "instruction": "Make sure every user has Postgres installed using the following command to confirm it's installed. If they don't have it installed, follow instructions in the \"How to Install PostgreSQL\" section",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "psql --version",
                        "CopyCode": "psql --version"
                    }
                },
                {
                    "id": 3,
                    "instruction": "Now you'll start your Postgres server. First list your brew services. If the status of Postgres is \"None\" than means your server is NOT running. Copy and record the name of your postgresql database. Mine was \"postgresql@15\".",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "brew services list",
                        "CopyCode": "brew services list"
                    }
                },
                {
                    "id": 4,
                    "instruction": "If your server isn't running, start it using the following command. Replace \"postgresql@15\" with the name from the previous command if it's different.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "brew services start postgresql@15",
                        "CopyCode": "brew services start postgresql@15"
                    }
                },
                {
                    "id": 5,
                    "instruction": "Initialize the database cluster using the following command.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "initdb /usr/local/var/postgres",
                        "CopyCode": "initdb /usr/local/var/postgres"
                    }
                },
                {
                    "id": 6,
                    "instruction": "Run the following command to confirm your cluster started. If the \"status\" says running you should be good.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "brew services list",
                        "CopyCode": "brew services list"
                    }
                },
                {
                    "id": 7,
                    "instruction": "Login as superuser. You don't have to change any part of the command.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "psql -U $(whoami) -d postgres",
                        "CopyCode": "psql -U $(whoami) -d postgres"
                    }
                },
                {
                    "id": 8,
                    "instruction": "Run the following command to see your username.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customsql",
                        "DisplayLang": "SQL",
                        "FormatCode": "SELECT current_user;",
                        "CopyCode": "SELECT current_user;"
                    }
                },
                {
                    "id": 9,
                    "instruction": "Run the following command to your list of roles and permissions. Press 'q' to exit.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "\\du",
                        "CopyCode": "\\du"
                    }
                },
                {
                    "id": 10,
                    "instruction": "Create your databases. There will be a development database and a test database. Press 'q' to exit.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customsql",
                        "DisplayLang": "SQL",
                        "FormatCode": "CREATE DATABASE notesapp_db;\nCREATE DATABASE notesapp_test_db;",
                        "CopyCode": "CREATE DATABASE notesapp_db;\nCREATE DATABASE notesapp_test_db;"
                    }
                },
                {
                    "id": 11,
                    "instruction": "List your current databases. You should see \"notesapp_db\" and \"notesapp_test_db\" in the table.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "\\l",
                        "CopyCode": "\\l"
                    }
                },
                {
                    "id": 12,
                    "instruction": "Now create your users. You will have a super user named \"postgres\" and a regular user and test user. You can change the usernames and passwords as you wish.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customsql",
                        "DisplayLang": "SQL",
                        "FormatCode": "CREATE ROLE postgres WITH SUPERUSER CREATEDB CREATEROLE LOGIN PASSWORD 'notes_super_password_123';\nCREATE ROLE notes_app_user WITH SUPERUSER CREATEDB CREATEROLE LOGIN PASSWORD 'notes_team_user_123';\nCREATE ROLE notes_app_test_user WITH SUPERUSER CREATEDB CREATEROLE LOGIN PASSWORD 'notes_test_user1';",
                        "CopyCode": "CREATE ROLE postgres WITH SUPERUSER CREATEDB CREATEROLE LOGIN PASSWORD 'notes_super_password_123';\nCREATE ROLE notes_app_user WITH SUPERUSER CREATEDB CREATEROLE LOGIN PASSWORD 'notes_team_user_123';\nCREATE ROLE notes_app_test_user WITH SUPERUSER CREATEDB CREATEROLE LOGIN PASSWORD 'notes_test_user1';"
                    }
                },
                {
                    "id": 13,
                    "instruction": "Now run the following command. You should see your new user in your database.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "\\du",
                        "CopyCode": "\\du"
                    }
                },
                {
                    "id": 14,
                    "instruction": "Now exit your Postgres session.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "exit",
                        "CopyCode": "exit"
                    }
                },
                {
                    "id": 15,
                    "instruction": "Now test that your URI is working. This isn't a command but this is what it should look like.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "Link",
                        "FormatCode": "postgresql://notes_app_user:notes_team_user_123@localhost/notesapp_test_db",
                        "CopyCode": "postgresql://notes_app_user:notes_team_user_123@localhost/notesapp_test_db"
                    }
                },
                {
                    "id": 16,
                    "instruction": "Now run the following command in your terminal to test your endpoint.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "psql postgresql://notes_app_user:notes_team_user_123@localhost/notesapp_db -c \"SELECT * FROM Users;\"",
                        "CopyCode": "psql postgresql://notes_app_user:notes_team_user_123@localhost/notesapp_db -c \"SELECT * FROM Users;\""
                    }
                },
                {
                    "id": 17,
                    "instruction": "Now ping your test database.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "psql postgresql://notes_app_test_user:notes_test_user1@localhost/notesapp_test_db -c \"SELECT * FROM Users;\"",
                        "CopyCode": "psql postgresql://notes_app_test_user:notes_test_user1@localhost/notesapp_test_db -c \"SELECT * FROM Users;\""
                    }
                },
                {
                    "id": 18,
                    "instruction": "Again make sure every member of your group does this instruction set."
                },
                {
                    "id": 19,
                    "instruction": "To recap, this is how you sign into your postgres server.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "psql -U postgres",
                        "CopyCode": "psql -U postgres"
                    }
                },
                {
                    "id": 20,
                    "instruction": "Do this after you sign into your server. This is how you sign into your regular database",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "\\c notesapp_db notes_app_user",
                        "CopyCode": "\\c notesapp_db notes_app_user"
                    }
                },
                {
                    "id": 21,
                    "instruction": "This is how you sign into your test database",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "\\c notesapp_test_db notes_app_test_user",
                        "CopyCode": "\\c notesapp_test_db notes_app_test_user"
                    }
                },
                {
                    "id": 22,
                    "instruction": "See all values in a table. Remember the colon at the end.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customsql",
                        "DisplayLang": "SQL",
                        "FormatCode": "SELECT * FROM Users;",
                        "CopyCode": "SELECT * FROM Users;"
                    }
                },
                {
                    "id": 23,
                    "instruction": "These are commonly used PostgreSQL commands.",
                    "Table": [
                        {
                            "Command": "\\dt",
                            "Description": "List all tables",
                            "Example": "\\dt"
                        },
                        {
                            "Command": "\\q",
                            "Description": "Quit/exit your database",
                            "Example": "\\q"
                        },
                        {
                            "Command": "\\du",
                            "Description": "list all users and roles",
                            "Example": "\\du"
                        },
                        {
                            "Command": "\\l",
                            "Description": "list all your databases",
                            "Example": "\\l"
                        }
                    ]
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "Setup your Git Repositories",
                    "desc": "Setup Your GitHub Repositories"
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "First make sure everyone in your group has a git setup on their computer. Also make sure everyone has a GitHub account.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "git --version",
                        "CopyCode": "git --version"
                    }
                },
                {
                    "id": 2,
                    "instruction": "If you don't have GitHub setup, go (here)[/CompSci/GitHub#createGHAccount] for instructions."
                },
                {
                    "id": 3,
                    "instruction": "Go to [github.com](https://github.com/) and sign in. Then click on the green \"New\" button. In the \"Create a new repository\" form enter the following values.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "Values",
                        "FormatCode": "Repository name: Django-Rest-Api\nDescription: Django-Rest-Api using Django and Postgres.\n\n* Do NOT check \\\"Add a README file\\\" *\n\n* Press the green \\\"Create repository\\\" button *\n",
                        "CopyCode": "Repository name: Django-Rest-Api\nDescription: Django-Rest-Api using Django and Postgres.\n\n* Do NOT check \\\"Add a README file\\\" *\n\n* Press the green \\\"Create repository\\\" button *\n"
                    }
                },
                {
                    "id": 4,
                    "instruction": "You should be taken to a new page. In the \"Quick setup — if you've done this kind of thing before\" section you should see the https link. Copy and record this link. Then go to your terminal and run the following command.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "git clone YOUR-HTTPS-LINK",
                        "CopyCode": "git clone YOUR-HTTPS-LINK"
                    }
                },
                {
                    "id": 5,
                    "instruction": "Now just add a readme file to your folder and push your changes as a test.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Django-Rest-Api\ntouch README.md\ngit add .\ngit commit -m \"Added Readme\"\ngit push",
                        "CopyCode": "cd Django-Rest-Api\ntouch README.md\ngit add .\ngit commit -m \"Added Readme\"\ngit push"
                    }
                },
                {
                    "id": 6,
                    "instruction": "If the previous steps worked, you should be good."
                },
                {
                    "id": 7,
                    "instruction": "Go back to [github.com](https://github.com/) and sign in. Then click on the green \"New\" button. In the \"Create a new repository\" form enter the following values.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "Values",
                        "FormatCode": "Repository name: Angular-Frontend\nDescription: Frontend for backend Django api.\n\n* Do NOT check \\\"Add a README file\\\" *\n\n* Press the green \\\"Create repository\\\" button *\n",
                        "CopyCode": "Repository name: Angular-Frontend\nDescription: Frontend for backend Django api.\n\n* Do NOT check \\\"Add a README file\\\" *\n\n* Press the green \\\"Create repository\\\" button *\n"
                    }
                },
                {
                    "id": 8,
                    "instruction": "We'll handle the rest of the Angular-Frontend repository setup later."
                },
                {
                    "id": 9,
                    "instruction": "Steps 8-13 are optional. Now go back to [github.com](https://github.com/) and open your \"Django-Rest-Api\" repository. You're going to add your team-members as collaborators."
                },
                {
                    "id": 10,
                    "instruction": "Click on the \"Settings\" tab on the right with the gear icon next to it."
                },
                {
                    "id": 11,
                    "instruction": "On the left-hand bar press on \"Collaborators\". Then press the green \"Add people\" tab. In the search bar look up the Github usernames of each of your team members. After you find them press the green \"Add *username* to this repository\"."
                },
                {
                    "id": 12,
                    "instruction": "After you send the invite tell your team members to check their email. Press the \"View invitation\" link in the email, then accept on GitHub."
                },
                {
                    "id": 13,
                    "instruction": "Add them for both your Rest api and frontend repositories."
                },
                {
                    "id": 14,
                    "instruction": "After that you should be good"
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "Django Rest API Folder Setup Explanation",
                    "desc": "Explains the purpose of the various folders and what code they should contain."
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "<u><b>django_rest_api/settings.py</u></b> - The settings for your Django app project."
                },
                {
                    "id": 2,
                    "instruction": "<u><b>django_rest_api/urls.py</u></b> - Where the url patterns for your endpoints will be."
                },
                {
                    "id": 3,
                    "instruction": "<u><b>notes_app/management</u></b> - Where we'll store files to help manage our database."
                },
                {
                    "id": 4,
                    "instruction": "<u><b>notes_app/migrations</u></b> - Where the database schema changes for your models are tracked and stored. These files will be automatically created by Django when you run certain commands."
                },
                {
                    "id": 5,
                    "instruction": "<u><b>notes_app/repositories</u></b> - Where we'll keep functions that directly query our database."
                },
                {
                    "id": 6,
                    "instruction": "<u><b>notes_app/services</u></b> - Where we'll call and add business logic to our repository functions."
                },
                {
                    "id": 7,
                    "instruction": "<u><b>notes_app/tests</u></b> - The tests for our Rest Api."
                },
                {
                    "id": 8,
                    "instruction": "<u><b>notes_app/routes</u></b> - The endpoints of our rest api that will call our service functions. Note that endpoints are called \"views\" in Django."
                },
                {
                    "id": 9,
                    "instruction": "<u><b>notes_app/exceptions.py</u></b> - The file where our custom errors will be."
                },
                {
                    "id": 10,
                    "instruction": "<u><b>notes_app/forms.py</u></b> - The equivalent to \"schemas\" in Flask. Allows us to handle user input by accepting JSON and converting it into a database model."
                },
                {
                    "id": 11,
                    "instruction": "<u><b>notes_app/models.py</u></b> - We're the database models (objects) and relationships will be defined."
                },
                {
                    "id": 12,
                    "instruction": "<u><b>notes_app/permissions.py</u></b> - Where the apps custom permissions will be stored."
                },
                {
                    "id": 13,
                    "instruction": "<u><b>notes_app/utils.py</u></b> - Common functions that are reused in various parts of your Rest API."
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "Create your Django Rest API",
                    "desc": "Explains how to create your Django Rest API and connect it to your PostgreSQL database."
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "Create your project in the Django-Rest-Api folder.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Django-Rest-Api\ndjango-admin startproject django_rest_api .",
                        "CopyCode": "cd Django-Rest-Api\ndjango-admin startproject django_rest_api ."
                    }
                },
                {
                    "id": 2,
                    "instruction": "Download the zappa library. Then start a python session and see what python versions zappa currently supports. If it doesn't raise a RuntimeError when you import it, it means the version of python3 you're using is supported.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "pip3 install zappa\n\n* Start a python session and try importing zappa *\npython3\nimport zappa\n\nexit()",
                        "CopyCode": "pip3 install zappa\n\n* Start a python session and try importing zappa *\npython3\nimport zappa\n\nexit()"
                    }
                },
                {
                    "id": 3,
                    "instruction": "Find the path to your python version. Copy and record the value for the next step.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "which python3.13",
                        "CopyCode": "which python3.13"
                    }
                },
                {
                    "id": 4,
                    "instruction": "Create your virtual environment. If you don't have python 3.13 installed you can download it [here](https://www.python.org/downloads/).<br><br>When I made this zappa didn't support python 3.13. You can see the source code [here](https://github.com/zappa/Zappa). You might need to use 3.12 in the command below if you got a RuntimeError in the previous step.<br><br> If your path from the previous step isn't \"/usr/local/bin/python3.13\", change the third command below to use your path instead.<br><br>Using the virtualenv library has multiple benefits over the native python way. It prevents like 3k+ files being modified everytime your download a package.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Django-Rest-Api\npip3 install virtualenv\nvirtualenv -p /usr/local/bin/python3.13 venv\nsource venv/bin/activate\n\nclear",
                        "CopyCode": "cd Django-Rest-Api\npip3 install virtualenv\nvirtualenv -p /usr/local/bin/python3.13 venv\nsource venv/bin/activate\n\nclear"
                    }
                },
                {
                    "id": 5,
                    "instruction": "While your virtual environment is activated install the following libraries.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "pip3 install django\npip3 install psycopg2\npip3 install psycopg2-binary\npip3 install djangorestframework\npip3 install djangorestframework-simplejwt\npip3 install django-cors-headers\npip3 install python-dotenv\npip3 install pytest\npip3 install pytest-django\npip3 install pytest-html\n\npip install --upgrade pip\n\nclear\n",
                        "CopyCode": "pip3 install django\npip3 install psycopg2\npip3 install psycopg2-binary\npip3 install djangorestframework\npip3 install djangorestframework-simplejwt\npip3 install django-cors-headers\npip3 install python-dotenv\npip3 install pytest\npip3 install pytest-django\npip3 install pytest-html\n\npip install --upgrade pip\n\nclear\n"
                    }
                },
                {
                    "id": 6,
                    "instruction": "Now run the following command in your folder.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "python3 manage.py migrate",
                        "CopyCode": "python3 manage.py migrate"
                    }
                },
                {
                    "id": 7,
                    "instruction": "Create a .gitignore, .gitattributes, and .env file in your project's root.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "touch .gitignore\ntouch .gitattributes\ntouch .env",
                        "CopyCode": "touch .gitignore\ntouch .gitattributes\ntouch .env"
                    }
                },
                {
                    "id": 8,
                    "instruction": "Open your \"Django-Rest-Api\" folder in VSCode. Paste in the following lines in the \".gitignore\" file . We haven't created some of these files yet, but that's ok.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": ".gitignore",
                        "FormatCode": "django_rest_api/settings.py\n\nnotes_app/management/commands/populate_data.py\n\n.env",
                        "CopyCode": "django_rest_api/settings.py\n\nnotes_app/management/commands/populate_data.py\n\n.env"
                    }
                },
                {
                    "id": 9,
                    "instruction": "Go to your \"django_rest_api\" folder and open the \"settings.py\" file. At the top of the file add the following import statements and line.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "import os\nfrom dotenv import load_dotenv\nfrom pathlib import Path\n\nload_dotenv()",
                        "CopyCode": "import os\nfrom dotenv import load_dotenv\nfrom pathlib import Path\n\nload_dotenv()"
                    }
                },
                {
                    "id": 10,
                    "instruction": "Scroll down in \"settings.py\" file. Find and delete the \"DATABASES\" dictionary and replace it with the following.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "DB_ENV = os.getenv('DB_ENV')\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'notesapp_db', \n        'USER': 'notes_app_user', \n        'PASSWORD': 'notes_team_user_123',\n        'HOST': 'localhost',    \n        'PORT': '5432'\n    },\n    'test': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'notesapp_test_db', \n        'USER': 'notes_app_test_user', \n        'PASSWORD': 'notes_test_user1',\n        'HOST': 'localhost',    \n        'PORT': '5432'\n    }\n}\n\nDATABASES['default'] = DATABASES[DB_ENV]",
                        "CopyCode": "DB_ENV = os.getenv('DB_ENV')\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'notesapp_db', \n        'USER': 'notes_app_user', \n        'PASSWORD': 'notes_team_user_123',\n        'HOST': 'localhost',    \n        'PORT': '5432'\n    },\n    'test': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'notesapp_test_db', \n        'USER': 'notes_app_test_user', \n        'PASSWORD': 'notes_test_user1',\n        'HOST': 'localhost',    \n        'PORT': '5432'\n    }\n}\n\nDATABASES['default'] = DATABASES[DB_ENV]"
                    }
                },
                {
                    "id": 11,
                    "instruction": "In the same \"settings.py\" file and add the following configuration.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n    'DEFAULT_PERMISSION_CLASSES': (\n        'rest_framework.permissions.AllowAny', # All views are accessible without authentication by default\n    ),\n}\n",
                        "CopyCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n    ),\n    'DEFAULT_PERMISSION_CLASSES': (\n        'rest_framework.permissions.AllowAny', # All views are accessible without authentication by default\n    ),\n}\n"
                    }
                },
                {
                    "id": 12,
                    "instruction": "In \"settings.py\" scroll up and add the following values to the end of the \"INSTALLED_APPS\" list",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "DisplayLang": "Python List Items",
                        "FormatCode": "'notes_app',\n'rest_framework',\n'rest_framework_simplejwt',\n'corsheaders',",
                        "CopyCode": "'notes_app',\n\t'rest_framework',\n\t'rest_framework_simplejwt',\n\t'corsheaders',"
                    }
                },
                {
                    "id": 13,
                    "instruction": "In \"settings.py\" scroll down and add the following values to the end of the \"MIDDLEWARE\" list. <br><br> THE ORDER MATTERS (in this case). Place the new item item BEFORE the 'django.middleware.common.CommonMiddleware' item which is already in the list.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "DisplayLang": "Python List Items",
                        "FormatCode": "'corsheaders.middleware.CorsMiddleware',\n\n# Place the Cors item before this item\n'django.middleware.common.CommonMiddleware',",
                        "CopyCode": "'corsheaders.middleware.CorsMiddleware',\n\n# Place the Cors item before this item\n'django.middleware.common.CommonMiddleware',"
                    }
                },
                {
                    "id": 14,
                    "instruction": "In \"settings.py\" add the following configurations.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "CORS_ALLOWED_ORIGINS = [\n    \"http://localhost:4200\"\n]\n\nCORS_ALLOW_METHODS = [\n    \"GET\", \n    \"POST\", \n    \"PUT\", \n    \"DELETE\", \n    \"OPTIONS\"\n]\n\nCORS_ALLOW_HEADERS = [\n    \"authorization\",\n    \"content-type\",\n]\n\nCORS_ALLOW_CREDENTIALS = True",
                        "CopyCode": "CORS_ALLOWED_ORIGINS = [\n    \"http://localhost:4200\"\n]\n\nCORS_ALLOW_METHODS = [\n    \"GET\", \n    \"POST\", \n    \"PUT\", \n    \"DELETE\", \n    \"OPTIONS\"\n]\n\nCORS_ALLOW_HEADERS = [\n    \"authorization\",\n    \"content-type\",\n]\n\nCORS_ALLOW_CREDENTIALS = True"
                    }
                },
                {
                    "id": 15,
                    "instruction": "Now open the \".env\" file found in the root of your project. Add the following value to the file",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "fxml",
                        "DisplayLang": "Env",
                        "FormatCode": "DB_ENV=default",
                        "CopyCode": "DB_ENV=default"
                    }
                },
                {
                    "id": 16,
                    "instruction": "Now create your app and a superuser.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Django-Rest-Api\nrm db.sqlite3\ndjango-admin startapp notes_app\nsource venv/bin/activate\npython3 manage.py migrate # This will create tables in your default database.\n\npython3 manage.py createsuperuser\n\n* Enter/create your credentials when prompted *\n",
                        "CopyCode": "cd Django-Rest-Api\nrm db.sqlite3\ndjango-admin startapp notes_app\nsource venv/bin/activate\npython3 manage.py migrate # This will create tables in your default database.\n\npython3 manage.py createsuperuser\n\n* Enter/create your credentials when prompted *\n"
                    }
                },
                {
                    "id": 17,
                    "instruction": "Go to the notes_app folder and open the \"models.py\" file. Delete its contents and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "from django.db import models\nfrom django.contrib.auth.models import User\n\n# Model for Notes\nclass Note(models.Model):\n    title = models.CharField(max_length=200, blank=True)\n    content = models.TextField(blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    user = models.ForeignKey(User, on_delete=models.CASCADE)  # Reference to Django's built-in User model\n\n    def __str__(self):\n        return self.title or \"Untitled\"\n\n# Model for Tags\nclass Tag(models.Model):\n    name = models.CharField(max_length=50, unique=True)\n\n    def __str__(self):\n        return self.name\n\n# Model for the Many-to-Many relationship between Notes and Tags\nclass NoteTag(models.Model):\n    note = models.ForeignKey(Note, on_delete=models.CASCADE)\n    tag = models.ForeignKey(Tag, on_delete=models.CASCADE)\n\n    class Meta:\n        unique_together = ('note', 'tag')\n\n    def __str__(self):\n        return f'{self.note.title} - {self.tag.name}'",
                        "CopyCode": "from django.db import models\nfrom django.contrib.auth.models import User\n\n# Model for Notes\nclass Note(models.Model):\n    title = models.CharField(max_length=200, blank=True)\n    content = models.TextField(blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    user = models.ForeignKey(User, on_delete=models.CASCADE)  # Reference to Django's built-in User model\n\n    def __str__(self):\n        return self.title or \"Untitled\"\n\n# Model for Tags\nclass Tag(models.Model):\n    name = models.CharField(max_length=50, unique=True)\n\n    def __str__(self):\n        return self.name\n\n# Model for the Many-to-Many relationship between Notes and Tags\nclass NoteTag(models.Model):\n    note = models.ForeignKey(Note, on_delete=models.CASCADE)\n    tag = models.ForeignKey(Tag, on_delete=models.CASCADE)\n\n    class Meta:\n        unique_together = ('note', 'tag')\n\n    def __str__(self):\n        return f'{self.note.title} - {self.tag.name}'"
                    }
                },
                {
                    "id": 18,
                    "instruction": "Go to your terminal and run the following commands to apply your changes.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Django-Rest-Api\nsource venv/bin/activate\n\npython3 manage.py makemigrations\npython3 manage.py migrate",
                        "CopyCode": "cd Django-Rest-Api\nsource venv/bin/activate\n\npython3 manage.py makemigrations\npython3 manage.py migrate"
                    }
                },
                {
                    "id": 19,
                    "instruction": "Now go back to your terminal and commit your changes to github",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "deactivate\ngit add .\ngit commit -m \"Created models\"\ngit push\n\nclear",
                        "CopyCode": "deactivate\ngit add .\ngit commit -m \"Created models\"\ngit push\n\nclear"
                    }
                },
                {
                    "id": 20,
                    "instruction": "Now create the following folders and files.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Django-Rest-Api\nsource venv/bin/activate\nmkdir -p notes_app/management/commands\ntouch notes_app/management/__init__.py\ntouch notes_app/management/commands/__init__.py\ntouch notes_app/management/commands/populate_data.py",
                        "CopyCode": "cd Django-Rest-Api\nsource venv/bin/activate\nmkdir -p notes_app/management/commands\ntouch notes_app/management/__init__.py\ntouch notes_app/management/commands/__init__.py\ntouch notes_app/management/commands/populate_data.py"
                    }
                },
                {
                    "id": 21,
                    "instruction": "Now go to notes_app -> management -> commands and open the \"populate_data.py\" file. Paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "from django.core.management.base import BaseCommand\nfrom django.contrib.auth.models import User\nfrom notes_app.models import Note, Tag, NoteTag\n\nclass Command(BaseCommand):\n    help = 'Populate initial data for the notes app'\n\n    def add_arguments(self, parser):\n        parser.add_argument(\n            '--database',\n            default='default',\n            help='Specifies the database to populate. Defaults to \"default\".'\n        )\n\n    def handle(self, *args, **options):\n        database = options['database']\n\n        # Create users\n        User.objects.db_manager(database).create_user(username='john_doe', email='john.doe@example.com', password='password123', first_name='John', last_name='Doe')\n        User.objects.db_manager(database).create_user(username='jane_smith', email='jane.smith@example.com', password='password123', first_name='Jane', last_name='Smith')\n        User.objects.db_manager(database).create_user(username='alice_jones', email='alice.jones@example.com', password='password123', first_name='Alice', last_name='Jones')\n        User.objects.db_manager(database).create_user(username='michael_jordan', email='michael.jordan@example.com', password='password123', first_name='Michael', last_name='Jordan')\n        User.objects.db_manager(database).create_user(username='tony_stark', email='tony.stark@example.com', password='password123', first_name='Tony', last_name='Stark')\n        User.objects.db_manager(database).create_user(username='chris_evans', email='chris.evans@example.com', password='password123', first_name='Chris', last_name='Evans')\n        User.objects.db_manager(database).create_user(username='harry_potter', email='harry.potter@example.com', password='password123', first_name='Harry', last_name='Potter')\n        User.objects.db_manager(database).create_user(username='james_bond', email='james.bond@example.com', password='password123', first_name='James', last_name='Bond')\n\n        # Create tags\n        Tag.objects.using(database).create(name='Work')\n        Tag.objects.using(database).create(name='Personal')\n        Tag.objects.using(database).create(name='Travel')\n        Tag.objects.using(database).create(name='Food')\n        Tag.objects.using(database).create(name='Books')\n\n        # Create notes for users\n        user_2 = User.objects.using(database).get(id=2)\n        user_3 = User.objects.using(database).get(id=3)\n\n        Note.objects.using(database).create(title='Meeting Notes', content='Discussed project milestones and deadlines.', user=user_2)\n        Note.objects.using(database).create(title='Shopping List', content='Eggs, Milk, Bread, Butter', user=user_2)\n        Note.objects.using(database).create(title='Daily Journal', content='Today I worked on my project and had a great lunch.', user=user_2)\n        Note.objects.using(database).create(title='Recipe Ideas', content='Spaghetti Carbonara, Grilled Chicken, Caesar Salad', user=user_2)\n        Note.objects.using(database).create(title='Books to Read', content='The Great Gatsby, 1984, To Kill a Mockingbird', user=user_2)\n        Note.objects.using(database).create(title='Travel Plans', content='Flight to NYC on Monday, Hotel reservation at Grand Hotel.', user=user_3)\n\n        # Create Note-Tag relationships\n        note_1 = Note.objects.using(database).get(id=1)\n        note_2 = Note.objects.using(database).get(id=2)\n        note_3 = Note.objects.using(database).get(id=3)\n        note_4 = Note.objects.using(database).get(id=4)\n        note_5 = Note.objects.using(database).get(id=5)\n        note_6 = Note.objects.using(database).get(id=6)\n\n        tag_1 = Tag.objects.using(database).get(id=1)\n        tag_2 = Tag.objects.using(database).get(id=2)\n        tag_3 = Tag.objects.using(database).get(id=3)\n        tag_4 = Tag.objects.using(database).get(id=4)\n        tag_5 = Tag.objects.using(database).get(id=5)\n\n        NoteTag.objects.using(database).create(note=note_1, tag=tag_1)\n        NoteTag.objects.using(database).create(note=note_2, tag=tag_2)\n        NoteTag.objects.using(database).create(note=note_3, tag=tag_2)\n        NoteTag.objects.using(database).create(note=note_4, tag=tag_4)\n        NoteTag.objects.using(database).create(note=note_5, tag=tag_5)\n        NoteTag.objects.using(database).create(note=note_6, tag=tag_3)\n\n        self.stdout.write(self.style.SUCCESS(f'Successfully populated the {database} database!'))\n",
                        "CopyCode": "from django.core.management.base import BaseCommand\nfrom django.contrib.auth.models import User\nfrom notes_app.models import Note, Tag, NoteTag\n\nclass Command(BaseCommand):\n    help = 'Populate initial data for the notes app'\n\n    def add_arguments(self, parser):\n        parser.add_argument(\n            '--database',\n            default='default',\n            help='Specifies the database to populate. Defaults to \"default\".'\n        )\n\n    def handle(self, *args, **options):\n        database = options['database']\n\n        # Create users\n        User.objects.db_manager(database).create_user(username='john_doe', email='john.doe@example.com', password='password123', first_name='John', last_name='Doe')\n        User.objects.db_manager(database).create_user(username='jane_smith', email='jane.smith@example.com', password='password123', first_name='Jane', last_name='Smith')\n        User.objects.db_manager(database).create_user(username='alice_jones', email='alice.jones@example.com', password='password123', first_name='Alice', last_name='Jones')\n        User.objects.db_manager(database).create_user(username='michael_jordan', email='michael.jordan@example.com', password='password123', first_name='Michael', last_name='Jordan')\n        User.objects.db_manager(database).create_user(username='tony_stark', email='tony.stark@example.com', password='password123', first_name='Tony', last_name='Stark')\n        User.objects.db_manager(database).create_user(username='chris_evans', email='chris.evans@example.com', password='password123', first_name='Chris', last_name='Evans')\n        User.objects.db_manager(database).create_user(username='harry_potter', email='harry.potter@example.com', password='password123', first_name='Harry', last_name='Potter')\n        User.objects.db_manager(database).create_user(username='james_bond', email='james.bond@example.com', password='password123', first_name='James', last_name='Bond')\n\n        # Create tags\n        Tag.objects.using(database).create(name='Work')\n        Tag.objects.using(database).create(name='Personal')\n        Tag.objects.using(database).create(name='Travel')\n        Tag.objects.using(database).create(name='Food')\n        Tag.objects.using(database).create(name='Books')\n\n        # Create notes for users\n        user_2 = User.objects.using(database).get(id=2)\n        user_3 = User.objects.using(database).get(id=3)\n\n        Note.objects.using(database).create(title='Meeting Notes', content='Discussed project milestones and deadlines.', user=user_2)\n        Note.objects.using(database).create(title='Shopping List', content='Eggs, Milk, Bread, Butter', user=user_2)\n        Note.objects.using(database).create(title='Daily Journal', content='Today I worked on my project and had a great lunch.', user=user_2)\n        Note.objects.using(database).create(title='Recipe Ideas', content='Spaghetti Carbonara, Grilled Chicken, Caesar Salad', user=user_2)\n        Note.objects.using(database).create(title='Books to Read', content='The Great Gatsby, 1984, To Kill a Mockingbird', user=user_2)\n        Note.objects.using(database).create(title='Travel Plans', content='Flight to NYC on Monday, Hotel reservation at Grand Hotel.', user=user_3)\n\n        # Create Note-Tag relationships\n        note_1 = Note.objects.using(database).get(id=1)\n        note_2 = Note.objects.using(database).get(id=2)\n        note_3 = Note.objects.using(database).get(id=3)\n        note_4 = Note.objects.using(database).get(id=4)\n        note_5 = Note.objects.using(database).get(id=5)\n        note_6 = Note.objects.using(database).get(id=6)\n\n        tag_1 = Tag.objects.using(database).get(id=1)\n        tag_2 = Tag.objects.using(database).get(id=2)\n        tag_3 = Tag.objects.using(database).get(id=3)\n        tag_4 = Tag.objects.using(database).get(id=4)\n        tag_5 = Tag.objects.using(database).get(id=5)\n\n        NoteTag.objects.using(database).create(note=note_1, tag=tag_1)\n        NoteTag.objects.using(database).create(note=note_2, tag=tag_2)\n        NoteTag.objects.using(database).create(note=note_3, tag=tag_2)\n        NoteTag.objects.using(database).create(note=note_4, tag=tag_4)\n        NoteTag.objects.using(database).create(note=note_5, tag=tag_5)\n        NoteTag.objects.using(database).create(note=note_6, tag=tag_3)\n\n        self.stdout.write(self.style.SUCCESS(f'Successfully populated the {database} database!'))\n"
                    }
                },
                {
                    "id": 22,
                    "instruction": "Run the following commands to create the tables in your test database.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Django-Rest-Api\nsource venv/bin/activate\n\npython3 manage.py migrate --database=test",
                        "CopyCode": "cd Django-Rest-Api\nsource venv/bin/activate\n\npython3 manage.py migrate --database=test"
                    }
                },
                {
                    "id": 23,
                    "instruction": "Populate your tables in your default database using the following command.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "python3 manage.py populate_data",
                        "CopyCode": "python3 manage.py populate_data"
                    }
                },
                {
                    "id": 24,
                    "instruction": "Open your .env file and change the value of DB_ENV to \"test\".",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "fxml",
                        "DisplayLang": "Env",
                        "FormatCode": "DB_ENV=test",
                        "CopyCode": "DB_ENV=test"
                    }
                },
                {
                    "id": 25,
                    "instruction": "Create a superuser in the test database using the following commands.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Django-Rest-Api\nsource venv/bin/activate\npython3 manage.py createsuperuser\n\n* Enter/create your credentials when prompted *",
                        "CopyCode": "cd Django-Rest-Api\nsource venv/bin/activate\npython3 manage.py createsuperuser\n\n* Enter/create your credentials when prompted *"
                    }
                },
                {
                    "id": 26,
                    "instruction": "Open your .env file again and change the value of DB_ENV back to default.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "fxml",
                        "DisplayLang": "Env",
                        "FormatCode": "DB_ENV=default",
                        "CopyCode": "DB_ENV=default"
                    }
                },
                {
                    "id": 27,
                    "instruction": "Populate your tables in your test database using the following command.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "fxml",
                        "DisplayLang": "Env",
                        "FormatCode": "python3 manage.py populate_data --database=test",
                        "CopyCode": "python3 manage.py populate_data --database=test"
                    }
                },
                {
                    "id": 28,
                    "instruction": "Now log into your databases. Check that databases we're populated.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command & SQL",
                        "FormatCode": "psql -U postgres    \n\\c notesapp_db notes_app_user\n\\c notesapp_test_db notes_app_test_user\n\n* Run the following queries *\n\nSELECT id, username, email, is_superuser FROM auth_user;\nSELECT * FROM notes_app_tag;\nSELECT * FROM notes_app_note;\nSELECT * FROM notes_app_notetag;\n\nexit;",
                        "CopyCode": "psql -U postgres    \n\\c notesapp_db notes_app_user\n\\c notesapp_test_db notes_app_test_user\n\n* Run the following queries *\n\nSELECT id, username, email, is_superuser FROM auth_user;\nSELECT * FROM notes_app_tag;\nSELECT * FROM notes_app_note;\nSELECT * FROM notes_app_notetag;\n\nexit;"
                    }
                },
                {
                    "id": 29,
                    "instruction": "If something went wrong, you can delete the postgres tables using the following command.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customsql",
                        "DisplayLang": "SQL",
                        "FormatCode": "DO $$ \nDECLARE \n    r RECORD;\nBEGIN\n    FOR r IN (SELECT tablename FROM pg_tables WHERE schemaname = 'public') LOOP\n        EXECUTE 'DROP TABLE IF EXISTS ' || quote_ident(r.tablename) || ' CASCADE';\n    END LOOP;\nEND $$;",
                        "CopyCode": "DO $$ \nDECLARE \n    r RECORD;\nBEGIN\n    FOR r IN (SELECT tablename FROM pg_tables WHERE schemaname = 'public') LOOP\n        EXECUTE 'DROP TABLE IF EXISTS ' || quote_ident(r.tablename) || ' CASCADE';\n    END LOOP;\nEND $$;"
                    }
                },
                {
                    "id": 30,
                    "instruction": "Now open a new terminal and run the following commands to make your new folders and files.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Django-Rest-Api\n\ntouch pytest.ini\n\ntouch notes_app/forms.py\ntouch notes_app/permissions.py\ntouch notes_app/exceptions.py\ntouch notes_app/utils.py\n\nmkdir notes_app/repositories\nmkdir notes_app/routes\nmkdir notes_app/services\nmkdir notes_app/tests\nmkdir notes_app/utils\n\ntouch notes_app/repositories/note_repository.py\ntouch notes_app/repositories/user_repository.py\n\ntouch notes_app/routes/views.py\n\ntouch notes_app/services/note_service.py\ntouch notes_app/services/user_service.py\n\ntouch notes_app/tests/tests.py",
                        "CopyCode": "cd Django-Rest-Api\n\ntouch pytest.ini\n\ntouch notes_app/forms.py\ntouch notes_app/permissions.py\ntouch notes_app/exceptions.py\ntouch notes_app/utils.py\n\nmkdir notes_app/repositories\nmkdir notes_app/routes\nmkdir notes_app/services\nmkdir notes_app/tests\nmkdir notes_app/utils\n\ntouch notes_app/repositories/note_repository.py\ntouch notes_app/repositories/user_repository.py\n\ntouch notes_app/routes/views.py\n\ntouch notes_app/services/note_service.py\ntouch notes_app/services/user_service.py\n\ntouch notes_app/tests/tests.py"
                    }
                },
                {
                    "id": 31,
                    "instruction": "Push your newly created files to GitHub",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "deactivate\ngit add .\ngit commit -m \"Added files\"\ngit push",
                        "CopyCode": "deactivate\ngit add .\ngit commit -m \"Added files\"\ngit push"
                    }
                },
                {
                    "id": 32,
                    "instruction": "In the notes_app folder open the \"forms.py\" file. Paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "from django import forms\n\nclass UserForm(forms.Form):\n    username = forms.CharField(\n        required=True,\n        max_length=80,\n        widget=forms.TextInput(),\n        error_messages={\n            'required': 'Username is required.',\n            'max_length': 'Username cannot exceed 80 characters.'\n        }\n    )\n\n    email = forms.EmailField(\n        required=True,\n        max_length=120,\n        widget=forms.EmailInput(),\n        error_messages={\n            'required': 'Email is required.',\n            'invalid': 'Enter a valid email address.',\n            'max_length': 'Email cannot exceed 120 characters.'\n        }\n    )\n\n    password = forms.CharField(\n        required=True,\n        min_length=6,\n        widget=forms.PasswordInput(),\n        error_messages={\n            'required': 'Password is required.',\n            'min_length': 'Password must be at least 6 characters long.'\n        }\n    )\n\n\nclass UserLoginForm(forms.Form):\n    username = forms.CharField(\n        required=True,\n        max_length=80,\n        widget=forms.TextInput(),\n        error_messages={\n            'required': 'Username is required.',\n            'max_length': 'Username cannot exceed 80 characters.'\n        }\n    )\n    \n    password = forms.CharField(\n        required=True,\n        min_length=6,\n        widget=forms.PasswordInput(),\n        error_messages={\n            'required': 'Password is required.',\n            'min_length': 'Password must be at least 6 characters long.'\n        }\n    )\n",
                        "CopyCode": "from django import forms\n\nclass UserForm(forms.Form):\n    username = forms.CharField(\n        required=True,\n        max_length=80,\n        widget=forms.TextInput(),\n        error_messages={\n            'required': 'Username is required.',\n            'max_length': 'Username cannot exceed 80 characters.'\n        }\n    )\n\n    email = forms.EmailField(\n        required=True,\n        max_length=120,\n        widget=forms.EmailInput(),\n        error_messages={\n            'required': 'Email is required.',\n            'invalid': 'Enter a valid email address.',\n            'max_length': 'Email cannot exceed 120 characters.'\n        }\n    )\n\n    password = forms.CharField(\n        required=True,\n        min_length=6,\n        widget=forms.PasswordInput(),\n        error_messages={\n            'required': 'Password is required.',\n            'min_length': 'Password must be at least 6 characters long.'\n        }\n    )\n\n\nclass UserLoginForm(forms.Form):\n    username = forms.CharField(\n        required=True,\n        max_length=80,\n        widget=forms.TextInput(),\n        error_messages={\n            'required': 'Username is required.',\n            'max_length': 'Username cannot exceed 80 characters.'\n        }\n    )\n    \n    password = forms.CharField(\n        required=True,\n        min_length=6,\n        widget=forms.PasswordInput(),\n        error_messages={\n            'required': 'Password is required.',\n            'min_length': 'Password must be at least 6 characters long.'\n        }\n    )\n"
                    }
                },
                {
                    "id": 33,
                    "instruction": "In the notes_app folder open the \"permissions.py\" file. Paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "from rest_framework.permissions import BasePermission\n\nclass IsAdminUser(BasePermission):\n    \"\"\"\n    Permission to only allow access to admin users.\n    \"\"\"\n\n    def has_permission(self, request, view):\n        return bool(request.user and request.user.is_staff)\n",
                        "CopyCode": "from rest_framework.permissions import BasePermission\n\nclass IsAdminUser(BasePermission):\n    \"\"\"\n    Permission to only allow access to admin users.\n    \"\"\"\n\n    def has_permission(self, request, view):\n        return bool(request.user and request.user.is_staff)\n"
                    }
                },
                {
                    "id": 34,
                    "instruction": "In the notes_app folder open the \"exceptions.py\" file. Paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "class NoNotesFoundError(Exception):\n\n    def __init__(self, message=\"No Notes found\"):\n        self.message = message\n        super().__init__(self.message)\n\n\nclass InvalidCredentialsError(Exception):\n    \n    def __init__(self, message=\"Invalid username or password\"):\n        self.message = message\n        super().__init__(self.message)",
                        "CopyCode": "class NoNotesFoundError(Exception):\n\n    def __init__(self, message=\"No Notes found\"):\n        self.message = message\n        super().__init__(self.message)\n\n\nclass InvalidCredentialsError(Exception):\n    \n    def __init__(self, message=\"Invalid username or password\"):\n        self.message = message\n        super().__init__(self.message)"
                    }
                },
                {
                    "id": 35,
                    "instruction": "In the notes_app folder open the \"utils.py\" file. Paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "from .models import Note\n\ndef verify_note_belongs_to_user(note_id: int, user_id: int) -> bool:\n    note = Note.objects.filter(id=note_id, user_id=user_id).first()\n    return note is not None",
                        "CopyCode": "from .models import Note\n\ndef verify_note_belongs_to_user(note_id: int, user_id: int) -> bool:\n    note = Note.objects.filter(id=note_id, user_id=user_id).first()\n    return note is not None"
                    }
                },
                {
                    "id": 36,
                    "instruction": "Go to notes_app -> repositories and open the \"note_repository.py\" file. Paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "from ..models import Note, Tag\n\ndef get_notes_by_user(user_id: int) -> list:\n    return Note.objects.filter(user_id=user_id)\n\ndef get_notes_by_tag(tag_name: str) -> list:\n    tag = Tag.objects.filter(name=tag_name).first()\n    if tag:\n        return Note.objects.filter(notetag__tag=tag)\n    return []\n",
                        "CopyCode": "from ..models import Note, Tag\n\ndef get_notes_by_user(user_id: int) -> list:\n    return Note.objects.filter(user_id=user_id)\n\ndef get_notes_by_tag(tag_name: str) -> list:\n    tag = Tag.objects.filter(name=tag_name).first()\n    if tag:\n        return Note.objects.filter(notetag__tag=tag)\n    return []\n"
                    }
                },
                {
                    "id": 37,
                    "instruction": "Go to notes_app -> repositories and open the \"user_repository.py\" file. Paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "from django.contrib.auth.models import User\nfrom django.db import IntegrityError\n\ndef create_user(username: str, email: str, password: str) -> User:\n    try:\n        new_user = User.objects.create_user(username=username, email=email, password=password)\n        return new_user\n    except IntegrityError as e:\n        raise e\n\n\ndef get_user_by_username(username: str) -> User:\n    return User.objects.filter(username=username).first()\n\n\ndef get_all_db_users():\n    try:\n        users = User.objects.filter(is_superuser=False)\n        return [{'id': user.id, 'username': user.username, 'email': user.email} for user in users]\n    except Exception as e:\n        raise e",
                        "CopyCode": "from django.contrib.auth.models import User\nfrom django.db import IntegrityError\n\ndef create_user(username: str, email: str, password: str) -> User:\n    try:\n        new_user = User.objects.create_user(username=username, email=email, password=password)\n        return new_user\n    except IntegrityError as e:\n        raise e\n\n\ndef get_user_by_username(username: str) -> User:\n    return User.objects.filter(username=username).first()\n\n\ndef get_all_db_users():\n    try:\n        users = User.objects.filter(is_superuser=False)\n        return [{'id': user.id, 'username': user.username, 'email': user.email} for user in users]\n    except Exception as e:\n        raise e"
                    }
                },
                {
                    "id": 38,
                    "instruction": "Go to notes_app -> services and open the \"note_service.py\" file. Paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "from notes_app.models import Tag\nfrom notes_app.repositories.note_repository import get_notes_by_tag, get_notes_by_user\n\n\ndef fetch_notes_by_user(user_id: int) -> list:\n    notes = get_notes_by_user(user_id)\n    return [{'id': note.id, 'title': note.title, 'content': note.content} for note in notes]\n\n\ndef fetch_notes_by_tag(tag_name: str) -> list:\n    notes = get_notes_by_tag(tag_name)\n    return [{'id': note.id, 'title': note.title, 'content': note.content} for note in notes]\n\n\ndef get_all_tags_from_users_notes(user_id: int) -> list:\n    notes = get_notes_by_user(user_id)\n    tags = set()\n\n    for note in notes:\n        note_tags = Tag.objects.filter(notetag__note=note)\n        for tag in note_tags:\n            tags.add(tag.name)\n    \n    return list(tags)\n",
                        "CopyCode": "from notes_app.models import Tag\nfrom notes_app.repositories.note_repository import get_notes_by_tag, get_notes_by_user\n\n\ndef fetch_notes_by_user(user_id: int) -> list:\n    notes = get_notes_by_user(user_id)\n    return [{'id': note.id, 'title': note.title, 'content': note.content} for note in notes]\n\n\ndef fetch_notes_by_tag(tag_name: str) -> list:\n    notes = get_notes_by_tag(tag_name)\n    return [{'id': note.id, 'title': note.title, 'content': note.content} for note in notes]\n\n\ndef get_all_tags_from_users_notes(user_id: int) -> list:\n    notes = get_notes_by_user(user_id)\n    tags = set()\n\n    for note in notes:\n        note_tags = Tag.objects.filter(notetag__note=note)\n        for tag in note_tags:\n            tags.add(tag.name)\n    \n    return list(tags)\n"
                    }
                },
                {
                    "id": 39,
                    "instruction": "Go to notes_app -> services and open the \"user_service.py\" file. Paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "from django.contrib.auth.models import User\nfrom django.db import IntegrityError\nfrom rest_framework_simplejwt.tokens import RefreshToken\nfrom ..exceptions import InvalidCredentialsError\nfrom ..forms import UserForm\n\ndef add_user(data: dict) -> dict:\n    form = UserForm(data)\n    \n    if form.is_valid():\n        user_data = form.cleaned_data\n        if get_user_by_username(user_data['username']):\n            return {'error': 'Username already exists'}\n\n        try:\n            user = User.objects.create_user(username=user_data['username'], email=user_data['email'], password=user_data['password'])\n\n            refresh = RefreshToken.for_user(user)\n\n            response = {\n                'user': {\n                    'id': user.id,\n                    'username': user.username,\n                    'email': user.email,\n                },\n                'refresh': str(refresh),\n                'access': str(refresh.access_token),\n            }\n\n            return response\n\n        except IntegrityError:\n            return {'error': 'Unable to create user'}\n    else:\n        return {'error': form.errors}\n\n\ndef sign_in_user(username: str, password: str) -> dict:\n    user = get_user_by_username(username)\n\n    if user and user.check_password(password):\n        refresh = RefreshToken.for_user(user)\n        \n        response = {\n            'user': {\n                'id': user.id,\n                'username': user.username,\n                'email': user.email\n            },\n            'refresh': str(refresh),\n            'access': str(refresh.access_token),\n        }\n\n        return response\n    else:\n        return {'error': 'Invalid credentials'}\n    \n\ndef get_user(username: str) -> dict:\n    user = get_user_by_username(username)\n    \n    if user:\n        return {\"id\": user.id, \"username\": user.username, \"email\": user.email}\n    else:\n        raise InvalidCredentialsError()\n\n\ndef get_user_by_username(username: str) -> User:\n    return User.objects.filter(username=username).first()\n",
                        "CopyCode": "from django.contrib.auth.models import User\nfrom django.db import IntegrityError\nfrom rest_framework_simplejwt.tokens import RefreshToken\nfrom ..exceptions import InvalidCredentialsError\nfrom ..forms import UserForm\n\ndef add_user(data: dict) -> dict:\n    form = UserForm(data)\n    \n    if form.is_valid():\n        user_data = form.cleaned_data\n        if get_user_by_username(user_data['username']):\n            return {'error': 'Username already exists'}\n\n        try:\n            user = User.objects.create_user(username=user_data['username'], email=user_data['email'], password=user_data['password'])\n\n            refresh = RefreshToken.for_user(user)\n\n            response = {\n                'user': {\n                    'id': user.id,\n                    'username': user.username,\n                    'email': user.email,\n                },\n                'refresh': str(refresh),\n                'access': str(refresh.access_token),\n            }\n\n            return response\n\n        except IntegrityError:\n            return {'error': 'Unable to create user'}\n    else:\n        return {'error': form.errors}\n\n\ndef sign_in_user(username: str, password: str) -> dict:\n    user = get_user_by_username(username)\n\n    if user and user.check_password(password):\n        refresh = RefreshToken.for_user(user)\n        \n        response = {\n            'user': {\n                'id': user.id,\n                'username': user.username,\n                'email': user.email\n            },\n            'refresh': str(refresh),\n            'access': str(refresh.access_token),\n        }\n\n        return response\n    else:\n        return {'error': 'Invalid credentials'}\n    \n\ndef get_user(username: str) -> dict:\n    user = get_user_by_username(username)\n    \n    if user:\n        return {\"id\": user.id, \"username\": user.username, \"email\": user.email}\n    else:\n        raise InvalidCredentialsError()\n\n\ndef get_user_by_username(username: str) -> User:\n    return User.objects.filter(username=username).first()\n"
                    }
                },
                {
                    "id": 40,
                    "instruction": "Go to notes_app -> routes and open the \"views.py\" file. Paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "from django.http import JsonResponse\nfrom rest_framework.decorators import api_view, permission_classes\nfrom rest_framework.permissions import IsAuthenticated\nfrom ..services.note_service import fetch_notes_by_tag, fetch_notes_by_user, get_all_tags_from_users_notes\nfrom ..services.user_service import add_user, sign_in_user, get_user\nfrom ..permissions import IsAdminUser\nfrom django.db import connection\nfrom ..repositories.user_repository import get_all_db_users\nfrom rest_framework import status\n\n\n@api_view(['GET'])\ndef home_page(request):\n    return JsonResponse('Hello from your Django Rest Api', safe=False)\n\n\n@api_view(['GET'])\ndef test_db_connection(request):\n    try:\n        with connection.cursor() as cursor:\n            cursor.execute('SELECT 1')\n            db_uri = connection.settings_dict['NAME']\n            return JsonResponse(f'Connection successful! Database URI: {db_uri}', safe=False)\n    except Exception as e:\n        return JsonResponse(f'Error: {str(e)}', safe=False)\n    \n@api_view(['GET'])\n@permission_classes([IsAuthenticated, IsAdminUser])\ndef get_all_users(request):\n    try:\n        users_list = get_all_db_users()\n        return JsonResponse(users_list, status=status.HTTP_200_OK, safe=False)\n    except Exception as e:\n        return JsonResponse({\"error\": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n\n@api_view(['POST'])\ndef register_user(request):\n    try:\n        user_response = add_user(request.data)\n        \n        if 'error' in user_response:\n            return JsonResponse(user_response, status=status.HTTP_400_BAD_REQUEST)\n\n        return JsonResponse(user_response, status=status.HTTP_201_CREATED)\n\n    except Exception as e:\n        return JsonResponse({\"error\": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n\n@api_view(['POST'])\ndef login_user(request):\n    try:\n        login_response = sign_in_user(request.data['username'], request.data['password'])\n        \n        if 'error' in login_response:\n            return JsonResponse(login_response, status=status.HTTP_400_BAD_REQUEST)\n\n        return JsonResponse(login_response, status=status.HTTP_200_OK)\n\n    except Exception as e:\n        return JsonResponse({\"error\": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n\n@api_view(['GET'])\ndef get_notes_by_user(request, user_id):\n    try:\n        notes = fetch_notes_by_user(user_id)\n        return JsonResponse(notes, status=status.HTTP_200_OK, safe=False)\n    except Exception as e:\n        return JsonResponse({\"error\": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n\n@api_view(['GET'])\ndef get_notes_by_tag(request, tag_name):\n    try:\n        notes = fetch_notes_by_tag(tag_name)\n        return JsonResponse(notes, status=status.HTTP_200_OK, safe=False)\n    except Exception as e:\n        return JsonResponse({\"error\": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n\n@api_view(['GET'])\ndef get_all_tags(request, user_id):\n    try:\n        tags = get_all_tags_from_users_notes(user_id)\n        return JsonResponse(tags, status=status.HTTP_200_OK, safe=False)\n    except Exception as e:\n        return JsonResponse({\"error\": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n\n@api_view(['GET'])\ndef get_user_by_username(request, username):\n    try:\n        user = get_user(username)\n        return JsonResponse(user, status=status.HTTP_200_OK)\n    except Exception as e:\n        return JsonResponse({\"error\": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n",
                        "CopyCode": "from django.http import JsonResponse\nfrom rest_framework.decorators import api_view, permission_classes\nfrom rest_framework.permissions import IsAuthenticated\nfrom ..services.note_service import fetch_notes_by_tag, fetch_notes_by_user, get_all_tags_from_users_notes\nfrom ..services.user_service import add_user, sign_in_user, get_user\nfrom ..permissions import IsAdminUser\nfrom django.db import connection\nfrom ..repositories.user_repository import get_all_db_users\nfrom rest_framework import status\n\n\n@api_view(['GET'])\ndef home_page(request):\n    return JsonResponse('Hello from your Django Rest Api', safe=False)\n\n\n@api_view(['GET'])\ndef test_db_connection(request):\n    try:\n        with connection.cursor() as cursor:\n            cursor.execute('SELECT 1')\n            db_uri = connection.settings_dict['NAME']\n            return JsonResponse(f'Connection successful! Database URI: {db_uri}', safe=False)\n    except Exception as e:\n        return JsonResponse(f'Error: {str(e)}', safe=False)\n    \n@api_view(['GET'])\n@permission_classes([IsAuthenticated, IsAdminUser])\ndef get_all_users(request):\n    try:\n        users_list = get_all_db_users()\n        return JsonResponse(users_list, status=status.HTTP_200_OK, safe=False)\n    except Exception as e:\n        return JsonResponse({\"error\": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n\n@api_view(['POST'])\ndef register_user(request):\n    try:\n        user_response = add_user(request.data)\n        \n        if 'error' in user_response:\n            return JsonResponse(user_response, status=status.HTTP_400_BAD_REQUEST)\n\n        return JsonResponse(user_response, status=status.HTTP_201_CREATED)\n\n    except Exception as e:\n        return JsonResponse({\"error\": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n\n@api_view(['POST'])\ndef login_user(request):\n    try:\n        login_response = sign_in_user(request.data['username'], request.data['password'])\n        \n        if 'error' in login_response:\n            return JsonResponse(login_response, status=status.HTTP_400_BAD_REQUEST)\n\n        return JsonResponse(login_response, status=status.HTTP_200_OK)\n\n    except Exception as e:\n        return JsonResponse({\"error\": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n\n@api_view(['GET'])\ndef get_notes_by_user(request, user_id):\n    try:\n        notes = fetch_notes_by_user(user_id)\n        return JsonResponse(notes, status=status.HTTP_200_OK, safe=False)\n    except Exception as e:\n        return JsonResponse({\"error\": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n\n@api_view(['GET'])\ndef get_notes_by_tag(request, tag_name):\n    try:\n        notes = fetch_notes_by_tag(tag_name)\n        return JsonResponse(notes, status=status.HTTP_200_OK, safe=False)\n    except Exception as e:\n        return JsonResponse({\"error\": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n\n@api_view(['GET'])\ndef get_all_tags(request, user_id):\n    try:\n        tags = get_all_tags_from_users_notes(user_id)\n        return JsonResponse(tags, status=status.HTTP_200_OK, safe=False)\n    except Exception as e:\n        return JsonResponse({\"error\": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n\n@api_view(['GET'])\ndef get_user_by_username(request, username):\n    try:\n        user = get_user(username)\n        return JsonResponse(user, status=status.HTTP_200_OK)\n    except Exception as e:\n        return JsonResponse({\"error\": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n"
                    }
                },
                {
                    "id": 41,
                    "instruction": "Now go to django_rest_api -> urls.py to setup your endpoints. Do NOT delete the docstring but delete the python code underneath it and replace it with the following.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "from django.contrib import admin\nfrom django.urls import path\n\nfrom notes_app.routes import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.home_page, name='home_page'),\n    path('test_db_connection/', views.test_db_connection, name='test_connection'),\n    path('get_users/', views.get_all_users, name='get_all_users'),\n    path('users/register/', views.register_user, name='register_user'),\n    path('users/login/', views.login_user, name='login_user'),\n    path('notes/users/<int:user_id>/notes/', views.get_notes_by_user, name='get_notes_by_user'),\n    path('notes/tag/<str:tag_name>/', views.get_notes_by_tag, name='get_notes_by_tag'),\n    path('notes/users/<int:user_id>/tags/', views.get_all_tags, name='get_all_tags'),\n    path('users/<str:username>/', views.get_user_by_username, name='get_user_by_username'),\n]",
                        "CopyCode": "from django.contrib import admin\nfrom django.urls import path\n\nfrom notes_app.routes import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.home_page, name='home_page'),\n    path('test_db_connection/', views.test_db_connection, name='test_connection'),\n    path('get_users/', views.get_all_users, name='get_all_users'),\n    path('users/register/', views.register_user, name='register_user'),\n    path('users/login/', views.login_user, name='login_user'),\n    path('notes/users/<int:user_id>/notes/', views.get_notes_by_user, name='get_notes_by_user'),\n    path('notes/tag/<str:tag_name>/', views.get_notes_by_tag, name='get_notes_by_tag'),\n    path('notes/users/<int:user_id>/tags/', views.get_all_tags, name='get_all_tags'),\n    path('users/<str:username>/', views.get_user_by_username, name='get_user_by_username'),\n]"
                    }
                },
                {
                    "id": 42,
                    "instruction": "Delete some of the unused files.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Django-Rest-Api\nrm notes_app/admin.py\nrm notes_app/tests.py\nrm notes_app/views.py",
                        "CopyCode": "cd Django-Rest-Api\nrm notes_app/admin.py\nrm notes_app/tests.py\nrm notes_app/views.py"
                    }
                },
                {
                    "id": 43,
                    "instruction": "Push your changes to Github.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "deactivate\ngit add .\ngit commit -m \"Working files\"\ngit push",
                        "CopyCode": "deactivate\ngit add .\ngit commit -m \"Working files\"\ngit push"
                    }
                },
                {
                    "id": 44,
                    "instruction": "Congratulations! You have successfully created your Rest Api for this project."
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "Call your Django Rest Api Endpoints",
                    "desc": "Explains how to call your endpoints using Thunder Client."
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "First, download the [Thunder Client](https://marketplace.visualstudio.com/items?itemName=rangav.vscode-thunder-client) VSCode extension if you haven't already. It's basically postman and it's good for testing endpoints."
                },
                {
                    "id": 2,
                    "instruction": "After you download and enable Thunder Client you should see a circle and lightning bolt icon on the left side of VSCode. Click on it."
                },
                {
                    "id": 3,
                    "instruction": "Press the \"New Request\" button. After you do that, you should see the UI for calling endpoints."
                },
                {
                    "id": 4,
                    "instruction": "Before starting open a new terminal and run the following commands to start your server.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Django-Rest-Api\nsource venv/bin/activate\npython3 manage.py runserver",
                        "CopyCode": "cd Django-Rest-Api\nsource venv/bin/activate\npython3 manage.py runserver"
                    }
                },
                {
                    "id": 5,
                    "instruction": "Go back to VSCode and try these GET HTTP requests in Thunder Client. Just paste the link in the field and press the \"Send\" button. Make sure the HTTP method is set to GET.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "HTTP Requests",
                        "FormatCode": "http://127.0.0.1:8000\n\nhttp://127.0.0.1:8000/test_db_connection\n\nhttp://127.0.0.1:8000/users/2/notes\n\nhttp://127.0.0.1:8000/notes/tag/Work\n\nhttp://127.0.0.1:8000/users/2/tags\n\nhttp://127.0.0.1:8000/users/john_doe",
                        "CopyCode": "http://127.0.0.1:8000\n\nhttp://127.0.0.1:8000/test_db_connection\n\nhttp://127.0.0.1:8000/users/2/notes\n\nhttp://127.0.0.1:8000/notes/tag/Work\n\nhttp://127.0.0.1:8000/users/2/tags\n\nhttp://127.0.0.1:8000/users/john_doe"
                    }
                },
                {
                    "id": 6,
                    "instruction": "Change the method to POST. You can use this data to sign in as an existing user. Paste the JSON in the \"JSON\" tab text area.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "HTTP Request",
                        "FormatCode": "http://127.0.0.1:8000/users/login/\n\n* Enter this data in the JSON Content textarea *\n\n{\n  \"username\": \"john_doe\",\n  \"password\": \"password123\"\n}",
                        "CopyCode": "http://127.0.0.1:8000/users/login/\n\n* Enter this data in the JSON Content textarea *\n\n{\n  \"username\": \"john_doe\",\n  \"password\": \"password123\"\n}"
                    }
                },
                {
                    "id": 7,
                    "instruction": "Keep the method as POST. You can register a new user using the following JSON data.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "HTTP Request",
                        "FormatCode": "http://127.0.0.1:8000/users/register/\n\n* Enter this data in the JSON Content textarea *\n\n\n{\n  \"username\": \"jimmy_page\",\n  \"email\": \"jimmy.page@example.com\",\n  \"password\": \"password123\"\n}",
                        "CopyCode": "http://127.0.0.1:8000/users/register/\n\n* Enter this data in the JSON Content textarea *\n\n\n{\n  \"username\": \"jimmy_page\",\n  \"email\": \"jimmy.page@example.com\",\n  \"password\": \"password123\"\n}"
                    }
                },
                {
                    "id": 8,
                    "instruction": "Now login in as your Superuser. Keep the method as POST.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "HTTP Request",
                        "FormatCode": "http://127.0.0.1:8000/users/login/\n\n* Enter this data in the JSON Content textarea *\n\n{\n  \"username\": \"superuser_username\",\n  \"password\": \"superuser_password\"\n}\n\n\n\n* Copy the value of the access attribute that's output *",
                        "CopyCode": "http://127.0.0.1:8000/users/login/\n\n* Enter this data in the JSON Content textarea *\n\n{\n  \"username\": \"superuser_username\",\n  \"password\": \"superuser_password\"\n}\n\n\n\n* Copy the value of the access attribute that's output *"
                    }
                },
                {
                    "id": 9,
                    "instruction": "In the output copy the value of the \"access\" attribute. This will be your JWT authorization token."
                },
                {
                    "id": 10,
                    "instruction": "Now in the \"Headers\" tab and an the following HTTP Header. Make sure your check the box next to the new value. Save when you're done using command + s.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "HTTP Header",
                        "FormatCode": "Authorization: Bearer YOUR-ACCESS-TOKEN",
                        "CopyCode": "Authorization: Bearer YOUR-ACCESS-TOKEN"
                    }
                },
                {
                    "id": 11,
                    "instruction": "Change the method to GET and paste the following link into the field. We're going to get all users which can only be used by an authorized admin. The admin user should NOT be returned in the list.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "HTTP Request",
                        "FormatCode": "http://127.0.0.1:8000/get_users",
                        "CopyCode": "http://127.0.0.1:8000/get_users"
                    }
                },
                {
                    "id": 12,
                    "instruction": "Congratulations! You should have now successfully called all your Rest Api endpoints."
                },
                {
                    "id": 13,
                    "instruction": "To make sure the Github language statistic percentages are right on Github you can do the steps 14-19."
                },
                {
                    "id": 14,
                    "instruction": "In your \"Django-Rest-Api\" folder go to the \".gitattributes\" file and add the following line.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": ".gitattribute",
                        "FormatCode": "*.html linguist-vendored",
                        "CopyCode": "*.html linguist-vendored"
                    }
                },
                {
                    "id": 15,
                    "instruction": "Push your changes to Github.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Django-Rest-Api\ngit add .\ngit commit -m \"Added gitattribute\"\ngit push",
                        "CopyCode": "cd Django-Rest-Api\ngit add .\ngit commit -m \"Added gitattribute\"\ngit push"
                    }
                },
                {
                    "id": 16,
                    "instruction": "Go back to the \".gitattributes\" file and add the following value.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": ".gitattribute",
                        "FormatCode": "*.css linguist-vendored",
                        "CopyCode": "*.css linguist-vendored"
                    }
                },
                {
                    "id": 17,
                    "instruction": "Push your changes to Github.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Django-Rest-Api\ngit add .\ngit commit -m \"Added gitattribute\"\ngit push",
                        "CopyCode": "cd Django-Rest-Api\ngit add .\ngit commit -m \"Added gitattribute\"\ngit push"
                    }
                },
                {
                    "id": 18,
                    "instruction": "Go back to the \".gitattributes\" file and add the following value.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": ".gitattribute",
                        "FormatCode": "*.js linguist-vendored",
                        "CopyCode": "*.js linguist-vendored"
                    }
                },
                {
                    "id": 19,
                    "instruction": "Push your changes to Github. Refresh the repository page to see your results. It should fix your Github language percentages.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Django-Rest-Api\ngit add .\ngit commit -m \"Added gitattribute\"\ngit push",
                        "CopyCode": "cd Django-Rest-Api\ngit add .\ngit commit -m \"Added gitattribute\"\ngit push"
                    }
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "Add Testing to your Django Rest Api",
                    "desc": "Explains how to write tests using the pytest framework for your Rest Api."
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "You should've already installed the necessary libraries in your environment. I included these just in case you haven't already installed them.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Commands",
                        "FormatCode": "cd Django-Rest-Api\nsource venv/bin/activate\n\npip3 install pytest\npip3 install pytest-django\npip3 install pytest-html\n\ndeactivate\n\nclear\n",
                        "CopyCode": "cd Django-Rest-Api\nsource venv/bin/activate\n\npip3 install pytest\npip3 install pytest-django\npip3 install pytest-html\n\ndeactivate\n\nclear\n"
                    }
                },
                {
                    "id": 2,
                    "instruction": "Open your \"Django-Rest-Api\" folder in VSCode."
                },
                {
                    "id": 3,
                    "instruction": "In your root directory open the \"pytest.ini\" folder. Paste in the following configuration data.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "Config Data",
                        "FormatCode": "[pytest]\nDJANGO_SETTINGS_MODULE = django_rest_api.settings\npython_files = tests.py test_*.py *_tests.py",
                        "CopyCode": "[pytest]\nDJANGO_SETTINGS_MODULE = django_rest_api.settings\npython_files = tests.py test_*.py *_tests.py"
                    }
                },
                {
                    "id": 4,
                    "instruction": "For future reference, test files can be named using the following conventions. You can change the conventions by modifying the \"pytest.ini\" file.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "Test Name Examples",
                        "FormatCode": "# Covention 1\ntests.py \n\n# Convention 2\ntest_views.py\n\n# Convention 3\nviews_tests.py",
                        "CopyCode": "# Covention 1\ntests.py \n\n# Convention 2\ntest_views.py\n\n# Convention 3\nviews_tests.py"
                    }
                },
                {
                    "id": 5,
                    "instruction": "Go notes_app -> tests and open the \"tests.py\" file. Paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "import pytest\nfrom django.urls import reverse\nfrom rest_framework.test import APIClient\nfrom rest_framework import status\nfrom django.contrib.auth.models import User\n\n\n@pytest.fixture\ndef api_client():\n    return APIClient()\n\n\n# Create a user and log in for authenticated endpoints\n@pytest.fixture\ndef create_admin_user(db):\n    return User.objects.create_superuser(username='admin', email='admin@test.com', password='adminpass')\n\n\n# Test home_page\n@pytest.mark.django_db\ndef test_home_page(api_client):\n    url = reverse('home_page')\n    response = api_client.get(url)\n\n    assert response.status_code == status.HTTP_200_OK\n    assert response.json() == \"Hello from your Django Rest Api\"\n\n\n# Test test_db_connection\n@pytest.mark.django_db\ndef test_db_connection(api_client):\n    url = reverse('test_connection')\n    response = api_client.get(url)\n\n    assert response.status_code == status.HTTP_200_OK\n    assert 'Connection successful!' in response.json()\n\n\n# Test register_user\n@pytest.mark.django_db\ndef test_register_user(api_client):\n    url = reverse('register_user')\n\n    data = {\n        'username': 'testuser',\n        'email': 'testuser@example.com',\n        'password': 'testpass123'\n    }\n\n    response = api_client.post(url, data, format='json')\n    assert response.status_code == status.HTTP_201_CREATED\n\n\n# Test login_user\n@pytest.mark.django_db\ndef test_login_user(api_client):\n    url = reverse('login_user')\n    User.objects.create_user(username='testuser', password='testpass123')\n    data = {\n        'username': 'testuser',\n        'password': 'testpass123'\n    }\n    response = api_client.post(url, data, format='json')\n    assert response.status_code == status.HTTP_200_OK\n\n\n# Test get_notes_by_user\n@pytest.mark.django_db\ndef test_get_notes_by_user(api_client):\n    user_id = 1\n    url = reverse('get_notes_by_user', args=[user_id])\n    response = api_client.get(url)\n\n    assert response.status_code == status.HTTP_200_OK\n\n\n# Test get_notes_by_tag\n@pytest.mark.django_db\ndef test_get_notes_by_tag(api_client):\n    url = reverse('get_notes_by_tag', args=['test-tag'])\n    response = api_client.get(url)\n    assert response.status_code == status.HTTP_200_OK\n\n\n# Test get_all_tags\n@pytest.mark.django_db\ndef test_get_all_tags(api_client):\n    user_id = 1\n    url = reverse('get_all_tags', args=[user_id])\n    response = api_client.get(url)\n    assert response.status_code == status.HTTP_200_OK\n\n\n# Test get_user_by_username\n@pytest.mark.django_db\ndef test_get_user_by_username(api_client):\n    User.objects.create_user(username='testuser', password='testpass123')\n    url = reverse('get_user_by_username', args=['testuser'])\n    response = api_client.get(url)\n    assert response.status_code == status.HTTP_200_OK\n",
                        "CopyCode": "import pytest\nfrom django.urls import reverse\nfrom rest_framework.test import APIClient\nfrom rest_framework import status\nfrom django.contrib.auth.models import User\n\n\n@pytest.fixture\ndef api_client():\n    return APIClient()\n\n\n# Create a user and log in for authenticated endpoints\n@pytest.fixture\ndef create_admin_user(db):\n    return User.objects.create_superuser(username='admin', email='admin@test.com', password='adminpass')\n\n\n# Test home_page\n@pytest.mark.django_db\ndef test_home_page(api_client):\n    url = reverse('home_page')\n    response = api_client.get(url)\n\n    assert response.status_code == status.HTTP_200_OK\n    assert response.json() == \"Hello from your Django Rest Api\"\n\n\n# Test test_db_connection\n@pytest.mark.django_db\ndef test_db_connection(api_client):\n    url = reverse('test_connection')\n    response = api_client.get(url)\n\n    assert response.status_code == status.HTTP_200_OK\n    assert 'Connection successful!' in response.json()\n\n\n# Test register_user\n@pytest.mark.django_db\ndef test_register_user(api_client):\n    url = reverse('register_user')\n\n    data = {\n        'username': 'testuser',\n        'email': 'testuser@example.com',\n        'password': 'testpass123'\n    }\n\n    response = api_client.post(url, data, format='json')\n    assert response.status_code == status.HTTP_201_CREATED\n\n\n# Test login_user\n@pytest.mark.django_db\ndef test_login_user(api_client):\n    url = reverse('login_user')\n    User.objects.create_user(username='testuser', password='testpass123')\n    data = {\n        'username': 'testuser',\n        'password': 'testpass123'\n    }\n    response = api_client.post(url, data, format='json')\n    assert response.status_code == status.HTTP_200_OK\n\n\n# Test get_notes_by_user\n@pytest.mark.django_db\ndef test_get_notes_by_user(api_client):\n    user_id = 1\n    url = reverse('get_notes_by_user', args=[user_id])\n    response = api_client.get(url)\n\n    assert response.status_code == status.HTTP_200_OK\n\n\n# Test get_notes_by_tag\n@pytest.mark.django_db\ndef test_get_notes_by_tag(api_client):\n    url = reverse('get_notes_by_tag', args=['test-tag'])\n    response = api_client.get(url)\n    assert response.status_code == status.HTTP_200_OK\n\n\n# Test get_all_tags\n@pytest.mark.django_db\ndef test_get_all_tags(api_client):\n    user_id = 1\n    url = reverse('get_all_tags', args=[user_id])\n    response = api_client.get(url)\n    assert response.status_code == status.HTTP_200_OK\n\n\n# Test get_user_by_username\n@pytest.mark.django_db\ndef test_get_user_by_username(api_client):\n    User.objects.create_user(username='testuser', password='testpass123')\n    url = reverse('get_user_by_username', args=['testuser'])\n    response = api_client.get(url)\n    assert response.status_code == status.HTTP_200_OK\n"
                    }
                },
                {
                    "id": 6,
                    "instruction": "Now go to your terminal and run the tests using the following commands.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Django-Rest-Api\nsource venv/bin/activate\n\npytest",
                        "CopyCode": "cd Django-Rest-Api\nsource venv/bin/activate\n\npytest"
                    }
                },
                {
                    "id": 7,
                    "instruction": "You can generate an HTML report for your pytests using this command.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "pytest --html=report.html",
                        "CopyCode": "pytest --html=report.html"
                    }
                },
                {
                    "id": 8,
                    "instruction": "Open the link next to the text \"Generated html report:\" in your broswer to see the results. I put an example link below so you know what to look for in the output.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "Example Link",
                        "FormatCode": "file:///Users/johndoe/Django-Rest-Api/report.html",
                        "CopyCode": "file:///Users/johndoe/Django-Rest-Api/report.html"
                    }
                },
                {
                    "id": 9,
                    "instruction": "Now push your changes to Github. Deactivate will deactivate your virtual environment.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "deactivate\n\ngit add .\ngit commit -m \"Added tests\"\ngit push",
                        "CopyCode": "deactivate\n\ngit add .\ngit commit -m \"Added tests\"\ngit push"
                    }
                },
                {
                    "id": 10,
                    "instruction": "Congratulations! You have now successfully added testing to your Django project!"
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "Angular Website Folder Setup Explanation",
                    "desc": "Explanation of the folders that will be used for your frontend code."
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "<u><b>src/api</u></b> - Functions used to call and interact with your backend Rest API endpoints. It's a similar concept to the repository functions interacting with the database."
                },
                {
                    "id": 2,
                    "instruction": "<u><b>src/assets</u></b> - Where you'll put things like your pictures, data, etc."
                },
                {
                    "id": 3,
                    "instruction": "<u><b>src/components</u></b> - Components that you can use in your views. An example would a Note card."
                },
                {
                    "id": 4,
                    "instruction": "<u><b>src/lib</u></b> - Where you'll put the link to where your backend Rest API is being hosted. For this project it should probably be something like \"http://127.0.0.1:5000\" in development."
                },
                {
                    "id": 5,
                    "instruction": "<u><b>src/router</u></b> - The paths of your application. Used to navigate between pages in your application."
                },
                {
                    "id": 6,
                    "instruction": "<u><b>src/services</u></b> - Business logic for your api functions."
                },
                {
                    "id": 7,
                    "instruction": "<u><b>src/stores</u></b> - A management system you can use to store data and methods you can use to modify and interact with it. It's pretty similar to a class."
                },
                {
                    "id": 8,
                    "instruction": "<u><b>src/utils</u></b> - Common functions that are used across various views."
                },
                {
                    "id": 9,
                    "instruction": "<u><b>src/views</u></b> - The pages of your application. The components will be used in these views."
                },
                {
                    "id": 10,
                    "instruction": "<u><b>public</u></b> - Where to store things like videos and files that the user can download"
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "Create your Angular Website",
                    "desc": "Explains how to create your Angular Website and connect it to your Django Rest API."
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "Download the Angular CLI tool using npm. Then verify it's installed using the version command.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "npm install -g @angular/cli\nng version",
                        "CopyCode": "npm install -g @angular/cli\nng version"
                    }
                },
                {
                    "id": 2,
                    "instruction": "If you get an error that says your node version is out of date and doesn't work with Angular, run the following commands. Then rerun the two commands in step 1. If \"ng version\" outputs the version it means you're good.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Commands",
                        "FormatCode": "curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.2/install.sh | bash\nsource ~/.nvm/nvm.sh\nnvm install --lts\nnvm use --lts\nnvm alias default lts/*\n\nnpm install -g @angular/cli\nng version",
                        "CopyCode": "curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.2/install.sh | bash\nsource ~/.nvm/nvm.sh\nnvm install --lts\nnvm use --lts\nnvm alias default lts/*\n\nnpm install -g @angular/cli\nng version"
                    }
                },
                {
                    "id": 3,
                    "instruction": "Once you have ng installed, let's create a new project. We'll start by creating a new Angular project using the following command.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "ng new Angular-Frontend",
                        "CopyCode": "ng new Angular-Frontend"
                    }
                },
                {
                    "id": 4,
                    "instruction": "You will be prompted to answer questions after you run the command from the previous step. You can use \"command + k\" to clear your terminal after you're done.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "Questions",
                        "FormatCode": "Which stylesheet format would you like to use...? CSS  [ https://developer.mozilla.org/docs/Web/CSS ] \nDo you want to enable Server-Side Rendering (SSR) and...? y\n\n* Give the packages sometime to install *",
                        "CopyCode": "Which stylesheet format would you like to use...? CSS  [ https://developer.mozilla.org/docs/Web/CSS ] \nDo you want to enable Server-Side Rendering (SSR) and...? y\n\n* Give the packages sometime to install *"
                    }
                },
                {
                    "id": 5,
                    "instruction": "Go back to your empty Angular-Frontend repository on [github.com](https://github.com/) and copy the green HTTPS (or SSH) link. Add the remote git repository to your project using the following commands.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Angular-Frontend\nrm -rf .git\ngit init\ngit add .\ngit commit -m \"Initial Commit\"\ngit branch -M main\ngit remote add origin YOUR-HTTPS-LINK\ngit push -u origin main",
                        "CopyCode": "cd Angular-Frontend\nrm -rf .git\ngit init\ngit add .\ngit commit -m \"Initial Commit\"\ngit branch -M main\ngit remote add origin YOUR-HTTPS-LINK\ngit push -u origin main"
                    }
                },
                {
                    "id": 6,
                    "instruction": "Run your project using the following commands just to ensure everything is working.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Commands",
                        "FormatCode": "cd Angular-Frontend\nng serve\n\n* Open the localhost link in your browser *",
                        "CopyCode": "cd Angular-Frontend\nng serve\n\n* Open the localhost link in your browser *"
                    }
                },
                {
                    "id": 7,
                    "instruction": "After you confirmed that's working we'll setup our file structure.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Commands",
                        "FormatCode": "ng add @angular/material\n\nmkdir api\nmkdir assets\nmkdir components\nmkdir lib\nmkdir router \nmkdir services\nmkdir stores\nmkdir utils\nmkdir views\n\nmv app.routes.ts router\n\nng generate service api/notesAPI\nng generate service api/userAPI\n\nng generate component components/NoteCard\nng generate component components/NavBar\nng generate component components/LogoutAlert\n\nng generate service lib/axios\n\nng generate service services/notes\nng generate service services/user\n\n\nng generate service stores/auth\nng generate service stores/starred\n\nng generate service utils/DateFormat\n\nng generate component views/MainPage\nng generate component views/SignIn\nng generate component views/SignUp\nng generate component views/Starred",
                        "CopyCode": "ng add @angular/material\n\nmkdir api\nmkdir assets\nmkdir components\nmkdir lib\nmkdir router \nmkdir services\nmkdir stores\nmkdir utils\nmkdir views\n\nmv app.routes.ts router\n\nng generate service api/notesAPI\nng generate service api/userAPI\n\nng generate component components/NoteCard\nng generate component components/NavBar\nng generate component components/LogoutAlert\n\nng generate service lib/axios\n\nng generate service services/notes\nng generate service services/user\n\n\nng generate service stores/auth\nng generate service stores/starred\n\nng generate service utils/DateFormat\n\nng generate component views/MainPage\nng generate component views/SignIn\nng generate component views/SignUp\nng generate component views/Starred"
                    }
                },
                {
                    "id": 8,
                    "instruction": "Download the follow package.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "Command and Questions",
                        "FormatCode": "cd Angular-Frontend\n\nng add @angular/material\n\nChoose a prebuilt theme name, or \"custom\" for a custom theme:\nAzure/Blue\n\n\nSet up global Angular Material typography styles?\nn (no)\n\nInclude the Angular animations module?\nDo not include",
                        "CopyCode": "cd Angular-Frontend\n\nng add @angular/material\n\nChoose a prebuilt theme name, or \"custom\" for a custom theme:\nAzure/Blue\n\n\nSet up global Angular Material typography styles?\nn (no)\n\nInclude the Angular animations module?\nDo not include"
                    }
                },
                {
                    "id": 9,
                    "instruction": "Now commit your new files to github.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd ~\ncd Angular-Frontend\ngit add .\ngit commit -m \"Added service and component templates\"\ngit push\n",
                        "CopyCode": "cd ~\ncd Angular-Frontend\ngit add .\ngit commit -m \"Added service and component templates\"\ngit push\n"
                    }
                },
                {
                    "id": 10,
                    "instruction": "Go to src -> app and open the \"app.config.ts\" file. Delete the files contents and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "TypeScript",
                        "FormatCode": "import { ApplicationConfig, provideZoneChangeDetection } from '@angular/core';\nimport { provideRouter } from '@angular/router';\n\nimport { routes } from './router/app.routes';\nimport { provideClientHydration } from '@angular/platform-browser';\nimport { provideHttpClient, withFetch } from '@angular/common/http';\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideZoneChangeDetection({ eventCoalescing: true }), \n    provideRouter(routes), \n    provideClientHydration(),\n    provideHttpClient(withFetch()),\n  ],\n};\n",
                        "CopyCode": "import { ApplicationConfig, provideZoneChangeDetection } from '@angular/core';\nimport { provideRouter } from '@angular/router';\n\nimport { routes } from './router/app.routes';\nimport { provideClientHydration } from '@angular/platform-browser';\nimport { provideHttpClient, withFetch } from '@angular/common/http';\n\nexport const appConfig: ApplicationConfig = {\n  providers: [\n    provideZoneChangeDetection({ eventCoalescing: true }), \n    provideRouter(routes), \n    provideClientHydration(),\n    provideHttpClient(withFetch()),\n  ],\n};\n"
                    }
                },
                {
                    "id": 11,
                    "instruction": "Go to src and open the \"styles.css\" file. Delete the files contents (if there are any) and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Javascript",
                        "DisplayLang": "CSS",
                        "FormatCode": "* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\nhtml, body {\n  background-color: lightblue;\n}",
                        "CopyCode": "* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\nhtml, body {\n  background-color: lightblue;\n}"
                    }
                },
                {
                    "id": 12,
                    "instruction": "Go to src and open the \"main.server.ts\" file. Delete the files contents and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "TypeScript",
                        "FormatCode": "import { bootstrapApplication } from '@angular/platform-browser';\nimport { AppComponent } from './app/app.component';\nimport { config } from './app/app.config.server';\nimport 'localstorage-polyfill'\n\nglobal['localStorage'] = localStorage;\n\nconst bootstrap = () => bootstrapApplication(AppComponent, config);\n\nexport default bootstrap;",
                        "CopyCode": "import { bootstrapApplication } from '@angular/platform-browser';\nimport { AppComponent } from './app/app.component';\nimport { config } from './app/app.config.server';\nimport 'localstorage-polyfill'\n\nglobal['localStorage'] = localStorage;\n\nconst bootstrap = () => bootstrapApplication(AppComponent, config);\n\nexport default bootstrap;"
                    }
                },
                {
                    "id": 13,
                    "instruction": "Go to src -> app -> router and open the \"app.routes.ts\" file. Delete its contents and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "TypeScript",
                        "FormatCode": "import { Routes } from '@angular/router';\nimport { SignInComponent } from '../views/sign-in/sign-in.component';\nimport { SignUpComponent } from '../views/sign-up/sign-up.component';\nimport { MainPageComponent } from '../views/main-page/main-page.component';\nimport { StarredComponent } from '../views/starred/starred.component';\n\nexport const routes: Routes = [\n  { path: '', component: SignInComponent },\n  { path: 'Register', component: SignUpComponent },\n  { path: 'Dashboard', component: MainPageComponent },\n  { path: 'Starred', component: StarredComponent },\n];",
                        "CopyCode": "import { Routes } from '@angular/router';\nimport { SignInComponent } from '../views/sign-in/sign-in.component';\nimport { SignUpComponent } from '../views/sign-up/sign-up.component';\nimport { MainPageComponent } from '../views/main-page/main-page.component';\nimport { StarredComponent } from '../views/starred/starred.component';\n\nexport const routes: Routes = [\n  { path: '', component: SignInComponent },\n  { path: 'Register', component: SignUpComponent },\n  { path: 'Dashboard', component: MainPageComponent },\n  { path: 'Starred', component: StarredComponent },\n];"
                    }
                },
                {
                    "id": 14,
                    "instruction": "Go to src -> app -> utils. Open the \"date-format.service.ts\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "TypeScript",
                        "FormatCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DateFormatService {\n\n  constructor() { }\n\n  formatDate(dateString: string): string {\n    const options: Intl.DateTimeFormatOptions = {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    };\n    \n    return new Date(dateString).toLocaleDateString(undefined, options);\n  }\n}\n",
                        "CopyCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DateFormatService {\n\n  constructor() { }\n\n  formatDate(dateString: string): string {\n    const options: Intl.DateTimeFormatOptions = {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    };\n    \n    return new Date(dateString).toLocaleDateString(undefined, options);\n  }\n}\n"
                    }
                },
                {
                    "id": 15,
                    "instruction": "Go to src -> app -> lib. Open the \"axios.service.ts\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "TypeScript",
                        "FormatCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError, catchError, switchMap } from 'rxjs';\nimport { tap } from 'rxjs';\nimport { AuthService } from '../stores/auth.service';\nimport { map } from 'rxjs/operators';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AxiosService {\n  private baseURL = \"http://127.0.0.1:8000\";\n\n  constructor(private http: HttpClient, private authService: AuthService) {}\n\n  private getHeaders(): HttpHeaders {\n    const accessToken = this.authService.getAccessToken();\n\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n\n    if (accessToken) {\n      headers = headers.set('Authorization', `Bearer ${accessToken}`);\n    }\n\n    return headers;\n  }\n\n  private handleError<T>(error: HttpErrorResponse, method: string, url: string): Observable<never | T> {\n    if (error.status === 401 && error.error.message === 'Token expired') {\n\n      return this.refreshAccessToken().pipe(\n        switchMap(() => {\n          const headers = this.getHeaders();\n\n          return this.http.request<T>(method, url, { headers }).pipe(\n            catchError((err) => this.handleError<T>(err, method, url))\n          );\n        })\n      );\n    } else {\n      console.error('API call error:', error);\n      return throwError(() => new Error(error.message || 'Server error'));\n    }\n  }\n\n  private refreshAccessToken(): Observable<void> {\n    const refreshToken = this.authService.getRefreshToken();\n\n    if (!refreshToken) {\n      return throwError(() => new Error('No refresh token available'));\n    }\n  \n    return this.http\n      .post<{ access: string }>(`${this.baseURL}auth/refresh`, { refresh: refreshToken })\n      .pipe(\n        tap((response) => {\n          this.authService.saveAccessToken(response.access);\n        }),\n        map(() => void 0),\n        catchError((error) => {\n          this.authService.logout();\n          return throwError(() => new Error('Failed to refresh token'));\n        })\n      );\n  }\n\n  public get<T>(endpoint: string): Observable<T> {\n    const url = `${this.baseURL}${endpoint}`;\n    return this.http.get<T>(url, { headers: this.getHeaders() })\n      .pipe(catchError((error) => this.handleError<T>(error, 'GET', url)));\n  }\n  \n  public post<T>(endpoint: string, body: any): Observable<T> {\n    const url = `${this.baseURL}${endpoint}`;\n    return this.http.post<T>(url, body, { headers: this.getHeaders() })\n      .pipe(catchError((error) => this.handleError<T>(error, 'POST', url)));\n  }\n\n}\n",
                        "CopyCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError, catchError, switchMap } from 'rxjs';\nimport { tap } from 'rxjs';\nimport { AuthService } from '../stores/auth.service';\nimport { map } from 'rxjs/operators';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AxiosService {\n  private baseURL = \"http://127.0.0.1:8000\";\n\n  constructor(private http: HttpClient, private authService: AuthService) {}\n\n  private getHeaders(): HttpHeaders {\n    const accessToken = this.authService.getAccessToken();\n\n    let headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n\n    if (accessToken) {\n      headers = headers.set('Authorization', `Bearer ${accessToken}`);\n    }\n\n    return headers;\n  }\n\n  private handleError<T>(error: HttpErrorResponse, method: string, url: string): Observable<never | T> {\n    if (error.status === 401 && error.error.message === 'Token expired') {\n\n      return this.refreshAccessToken().pipe(\n        switchMap(() => {\n          const headers = this.getHeaders();\n\n          return this.http.request<T>(method, url, { headers }).pipe(\n            catchError((err) => this.handleError<T>(err, method, url))\n          );\n        })\n      );\n    } else {\n      console.error('API call error:', error);\n      return throwError(() => new Error(error.message || 'Server error'));\n    }\n  }\n\n  private refreshAccessToken(): Observable<void> {\n    const refreshToken = this.authService.getRefreshToken();\n\n    if (!refreshToken) {\n      return throwError(() => new Error('No refresh token available'));\n    }\n  \n    return this.http\n      .post<{ access: string }>(`${this.baseURL}auth/refresh`, { refresh: refreshToken })\n      .pipe(\n        tap((response) => {\n          this.authService.saveAccessToken(response.access);\n        }),\n        map(() => void 0),\n        catchError((error) => {\n          this.authService.logout();\n          return throwError(() => new Error('Failed to refresh token'));\n        })\n      );\n  }\n\n  public get<T>(endpoint: string): Observable<T> {\n    const url = `${this.baseURL}${endpoint}`;\n    return this.http.get<T>(url, { headers: this.getHeaders() })\n      .pipe(catchError((error) => this.handleError<T>(error, 'GET', url)));\n  }\n  \n  public post<T>(endpoint: string, body: any): Observable<T> {\n    const url = `${this.baseURL}${endpoint}`;\n    return this.http.post<T>(url, body, { headers: this.getHeaders() })\n      .pipe(catchError((error) => this.handleError<T>(error, 'POST', url)));\n  }\n\n}\n"
                    }
                },
                {
                    "id": 16,
                    "instruction": "Go to src -> app -> api. Open the \"notes-api.service.ts\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "TypeScript",
                        "FormatCode": "import { Injectable } from '@angular/core';\nimport { AxiosService } from '../lib/axios.service';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotesAPIService {\n  constructor(private apiService: AxiosService) {}\n\n  public getUserNotes(userId: number): Observable<any> {\n    return this.apiService.get(`/notes/users/${userId}/notes/`);\n  }\n\n  public getNotesByTag(tagName: string): Observable<any> {\n    return this.apiService.get(`/notes/tag/${tagName}/`);\n  }\n\n  public getAllTags(userId: number): Observable<any> {\n    return this.apiService.get(`/notes/users/${userId}/tag/`);\n  }\n\n}\n",
                        "CopyCode": "import { Injectable } from '@angular/core';\nimport { AxiosService } from '../lib/axios.service';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotesAPIService {\n  constructor(private apiService: AxiosService) {}\n\n  public getUserNotes(userId: number): Observable<any> {\n    return this.apiService.get(`/notes/users/${userId}/notes/`);\n  }\n\n  public getNotesByTag(tagName: string): Observable<any> {\n    return this.apiService.get(`/notes/tag/${tagName}/`);\n  }\n\n  public getAllTags(userId: number): Observable<any> {\n    return this.apiService.get(`/notes/users/${userId}/tag/`);\n  }\n\n}\n"
                    }
                },
                {
                    "id": 17,
                    "instruction": "In the same folder, open the \"user-api.service.ts\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "TypeScript",
                        "FormatCode": "import { Injectable } from '@angular/core';\nimport { AxiosService } from '../lib/axios.service';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserAPIService {\n  constructor(private apiService: AxiosService) {}\n\n  public registerUser(userData: any): Observable<any> {\n    return this.apiService.post('/users/register/', userData);\n  }\n\n  public loginUser(userData: any): Observable<any> {\n    return this.apiService.post('/users/login/', userData);\n  }\n\n  public getUserByUsername(username: string): Observable<any> {\n    return this.apiService.get(`/users/${username}/`);\n  }\n}\n",
                        "CopyCode": "import { Injectable } from '@angular/core';\nimport { AxiosService } from '../lib/axios.service';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserAPIService {\n  constructor(private apiService: AxiosService) {}\n\n  public registerUser(userData: any): Observable<any> {\n    return this.apiService.post('/users/register/', userData);\n  }\n\n  public loginUser(userData: any): Observable<any> {\n    return this.apiService.post('/users/login/', userData);\n  }\n\n  public getUserByUsername(username: string): Observable<any> {\n    return this.apiService.get(`/users/${username}/`);\n  }\n}\n"
                    }
                },
                {
                    "id": 18,
                    "instruction": "Go to src -> app -> services. Open the \"user.service.ts\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "TypeScript",
                        "FormatCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { UserAPIService } from '../api/user-api.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  constructor(private userApiService: UserAPIService) {}\n\n  public createNewUser(userData: any): Observable<any> {\n    return this.userApiService.registerUser(userData);\n  }\n\n  public loginExistingUser(userData: any): Observable<any> {\n    return this.userApiService.loginUser(userData);\n  }\n\n  public getUser(username: string): Observable<any> {\n    return this.userApiService.getUserByUsername(username);\n  }\n}\n",
                        "CopyCode": "import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { UserAPIService } from '../api/user-api.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  constructor(private userApiService: UserAPIService) {}\n\n  public createNewUser(userData: any): Observable<any> {\n    return this.userApiService.registerUser(userData);\n  }\n\n  public loginExistingUser(userData: any): Observable<any> {\n    return this.userApiService.loginUser(userData);\n  }\n\n  public getUser(username: string): Observable<any> {\n    return this.userApiService.getUserByUsername(username);\n  }\n}\n"
                    }
                },
                {
                    "id": 19,
                    "instruction": "In the same folder, open the \"notes.service.ts\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "TypeScript",
                        "FormatCode": "import { Injectable } from '@angular/core';\nimport { from, Observable } from 'rxjs';\nimport { NotesAPIService } from '../api/notes-api.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotesService {\n\n  constructor(private notesApiService: NotesAPIService) {}\n  \n  public getAllUserNotes(userId: number): Observable<any> {\n    return from(this.notesApiService.getUserNotes(userId));\n  }\n\n  public getNotesByTagName(tagName: string): Observable<any> {\n    return from(this.notesApiService.getNotesByTag(tagName));\n  }\n\n  public getAllUserTags(userId: number): Observable<any> {\n    return from(this.notesApiService.getAllTags(userId));\n  }\n}",
                        "CopyCode": "import { Injectable } from '@angular/core';\nimport { from, Observable } from 'rxjs';\nimport { NotesAPIService } from '../api/notes-api.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotesService {\n\n  constructor(private notesApiService: NotesAPIService) {}\n  \n  public getAllUserNotes(userId: number): Observable<any> {\n    return from(this.notesApiService.getUserNotes(userId));\n  }\n\n  public getNotesByTagName(tagName: string): Observable<any> {\n    return from(this.notesApiService.getNotesByTag(tagName));\n  }\n\n  public getAllUserTags(userId: number): Observable<any> {\n    return from(this.notesApiService.getAllTags(userId));\n  }\n}"
                    }
                },
                {
                    "id": 20,
                    "instruction": "Commit your changes to Github.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Commands",
                        "FormatCode": "cd Angular-Frontend\ngit add .\ngit commit -m \"api and service functions\"\ngit push",
                        "CopyCode": "cd Angular-Frontend\ngit add .\ngit commit -m \"api and service functions\"\ngit push"
                    }
                },
                {
                    "id": 21,
                    "instruction": "Go to src -> app -> stores. Open the \"auth.service.ts\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "TypeScript",
                        "FormatCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { StarredService } from './starred.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n\n  private userSubject = new BehaviorSubject<any>({\n    username: localStorage.getItem('username') || null,\n    email: localStorage.getItem('email') || null,\n    userId: localStorage.getItem('userId') || null,\n    notes: JSON.parse(localStorage.getItem('notes') || '[]'),\n    tags: localStorage.getItem('tags') ? localStorage.getItem('tags')!.split(',') : [],\n    accessToken: localStorage.getItem('accessToken'),\n    refreshToken: localStorage.getItem('refreshToken'),\n  });\n\n  user$ = this.userSubject.asObservable();\n\n  constructor(private starredService: StarredService) {}\n\n  login(userData: any): boolean {\n    localStorage.setItem('username', userData.user.username);\n    localStorage.setItem('email', userData.user.email);\n    localStorage.setItem('userId', userData.user.id);\n    localStorage.setItem('accessToken', userData.access);\n    localStorage.setItem('refreshToken', userData.refresh);\n  \n    this.userSubject.next({\n      username: userData.user.username,\n    });\n  \n    return true;\n  }\n  \n\n  logout() {\n    const resetUser = { \n      username: null, \n      email: null, \n      userId: null, \n      notes: [], \n      tags: [], \n      accessToken: null, \n      refreshToken: null \n    };\n    \n    this.userSubject.next(resetUser);\n\n    this.starredService.clearAllStarredNotes();\n    \n    localStorage.removeItem('username');\n    localStorage.removeItem('email');\n    localStorage.removeItem('userId');\n    localStorage.removeItem('notes');\n    localStorage.removeItem('tags');\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n  }\n\n  getCurrentUser() {\n    return this.userSubject.value;\n  }\n\n  getUsername() {\n    return this.userSubject.value.username || localStorage.getItem('username');\n  }\n\n  getEmail() {\n    return this.userSubject.value.email || localStorage.getItem('email');\n  }\n\n  setUserId(id: string) {\n    const updatedUser = { ...this.userSubject.value, userId: id };\n    this.userSubject.next(updatedUser);\n    localStorage.setItem('userId', id);\n  }\n\n  getUserId(): number{\n    return Number(localStorage.getItem('userId')!);\n  }\n\n  setNotes(notes: any[]) {\n    const updatedUser = { ...this.userSubject.value, notes };\n    this.userSubject.next(updatedUser);\n    localStorage.setItem('notes', JSON.stringify(notes));\n  }\n\n  getNotes() {\n    return JSON.parse(localStorage.getItem('notes') || '[]');\n  }\n\n  setTags(tags: string[]) {\n    const updatedUser = { ...this.userSubject.value, tags };\n    this.userSubject.next(updatedUser);\n    localStorage.setItem('tags', tags.join(','));\n  }\n\n  getTags() {\n    return localStorage.getItem('tags') ? localStorage.getItem('tags')!.split(',') : [];\n  }\n\n  getAccessToken() {\n    return this.userSubject.value.accessToken || localStorage.getItem('accessToken');\n  }\n\n  getRefreshToken() {\n    return this.userSubject.value.refreshToken || localStorage.getItem('refreshToken');\n  }\n\n  saveAccessToken(token: string) {\n    localStorage.setItem('accessToken', token);\n  }\n\n}\n",
                        "CopyCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { StarredService } from './starred.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n\n  private userSubject = new BehaviorSubject<any>({\n    username: localStorage.getItem('username') || null,\n    email: localStorage.getItem('email') || null,\n    userId: localStorage.getItem('userId') || null,\n    notes: JSON.parse(localStorage.getItem('notes') || '[]'),\n    tags: localStorage.getItem('tags') ? localStorage.getItem('tags')!.split(',') : [],\n    accessToken: localStorage.getItem('accessToken'),\n    refreshToken: localStorage.getItem('refreshToken'),\n  });\n\n  user$ = this.userSubject.asObservable();\n\n  constructor(private starredService: StarredService) {}\n\n  login(userData: any): boolean {\n    localStorage.setItem('username', userData.user.username);\n    localStorage.setItem('email', userData.user.email);\n    localStorage.setItem('userId', userData.user.id);\n    localStorage.setItem('accessToken', userData.access);\n    localStorage.setItem('refreshToken', userData.refresh);\n  \n    this.userSubject.next({\n      username: userData.user.username,\n    });\n  \n    return true;\n  }\n  \n\n  logout() {\n    const resetUser = { \n      username: null, \n      email: null, \n      userId: null, \n      notes: [], \n      tags: [], \n      accessToken: null, \n      refreshToken: null \n    };\n    \n    this.userSubject.next(resetUser);\n\n    this.starredService.clearAllStarredNotes();\n    \n    localStorage.removeItem('username');\n    localStorage.removeItem('email');\n    localStorage.removeItem('userId');\n    localStorage.removeItem('notes');\n    localStorage.removeItem('tags');\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n  }\n\n  getCurrentUser() {\n    return this.userSubject.value;\n  }\n\n  getUsername() {\n    return this.userSubject.value.username || localStorage.getItem('username');\n  }\n\n  getEmail() {\n    return this.userSubject.value.email || localStorage.getItem('email');\n  }\n\n  setUserId(id: string) {\n    const updatedUser = { ...this.userSubject.value, userId: id };\n    this.userSubject.next(updatedUser);\n    localStorage.setItem('userId', id);\n  }\n\n  getUserId(): number{\n    return Number(localStorage.getItem('userId')!);\n  }\n\n  setNotes(notes: any[]) {\n    const updatedUser = { ...this.userSubject.value, notes };\n    this.userSubject.next(updatedUser);\n    localStorage.setItem('notes', JSON.stringify(notes));\n  }\n\n  getNotes() {\n    return JSON.parse(localStorage.getItem('notes') || '[]');\n  }\n\n  setTags(tags: string[]) {\n    const updatedUser = { ...this.userSubject.value, tags };\n    this.userSubject.next(updatedUser);\n    localStorage.setItem('tags', tags.join(','));\n  }\n\n  getTags() {\n    return localStorage.getItem('tags') ? localStorage.getItem('tags')!.split(',') : [];\n  }\n\n  getAccessToken() {\n    return this.userSubject.value.accessToken || localStorage.getItem('accessToken');\n  }\n\n  getRefreshToken() {\n    return this.userSubject.value.refreshToken || localStorage.getItem('refreshToken');\n  }\n\n  saveAccessToken(token: string) {\n    localStorage.setItem('accessToken', token);\n  }\n\n}\n"
                    }
                },
                {
                    "id": 22,
                    "instruction": "In the same folder, open the \"starred.service.ts\" file and paste in the following code. Make sure it's NOT the \"starred.component.ts\" file.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "TypeScript",
                        "FormatCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StarredService {\n\n  private notesSubject = new BehaviorSubject<any[]>(this.loadNotesFromLocalStorage());\n  private starredStatusChangedSubject = new BehaviorSubject<void>(undefined);\n\n  notes$ = this.notesSubject.asObservable();\n  starredStatusChanged$ = this.starredStatusChangedSubject.asObservable();\n\n  constructor() {\n    this.notesSubject.subscribe(notes => this.saveNotesToLocalStorage(notes));\n  }\n\n  private loadNotesFromLocalStorage(): any[] {\n    const storedNotes = localStorage.getItem('notes');\n    return storedNotes ? JSON.parse(storedNotes) : [];\n  }\n\n  private saveNotesToLocalStorage(notes: any[]): void {\n    localStorage.setItem('notes', JSON.stringify(notes));\n  }\n\n  initializeNotes(notes: any[]): void {\n    const currentNotes = this.notesSubject.value;\n\n    const mergedNotes = notes.map(note => {\n      const existingNote = currentNotes.find(n => n.id === note.id);\n      return existingNote ? existingNote : note;\n    });\n\n    this.notesSubject.next(mergedNotes);\n  }\n\n  addNote(note: Omit<any, 'starred'>): void {\n    const notes = this.notesSubject.value;\n    notes.push({ ...note, starred: true });\n    this.notesSubject.next(notes);\n  }\n\n  removeNote(noteId: string): void {\n    const notes = this.notesSubject.value.filter(note => note.id !== noteId);\n    this.notesSubject.next(notes);\n  }\n\n  starNote(noteId: string): void {\n\n    const notes = this.notesSubject.value.map(note =>\n      note.id === noteId ? { ...note, starred: true } : note\n    );\n\n    this.notesSubject.next(notes);\n    this.starredStatusChangedSubject.next();\n    \n    console.log(`Note with ID ${noteId} starred.`);\n  }\n\n  unstarNote(noteId: string): void {\n    const notes = this.notesSubject.value.map(note =>\n      note.id === noteId ? { ...note, starred: false } : note\n    );\n\n    this.notesSubject.next(notes);\n    this.starredStatusChangedSubject.next();\n\n    console.log(`Note with ID ${noteId} unstarred.`);\n  }\n\n  getStarredNotes(): any[] {\n    return this.notesSubject.value.filter(note => note.starred);\n  }\n\n  getNumberOfStoredNotes(): number {\n    return this.notesSubject.value.length;\n  }\n\n  isNoteStarred(note: any): boolean {\n    const foundNote = this.notesSubject.value.find(n => n.id === note.id);\n    return foundNote ? foundNote.starred : false;\n  }\n\n  clearAllStarredNotes(): void {\n    const notes = this.notesSubject.value.map(note => ({ ...note, starred: false }));\n    \n    this.notesSubject.next(notes);\n    this.starredStatusChangedSubject.next();\n  }\n  \n}\n",
                        "CopyCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StarredService {\n\n  private notesSubject = new BehaviorSubject<any[]>(this.loadNotesFromLocalStorage());\n  private starredStatusChangedSubject = new BehaviorSubject<void>(undefined);\n\n  notes$ = this.notesSubject.asObservable();\n  starredStatusChanged$ = this.starredStatusChangedSubject.asObservable();\n\n  constructor() {\n    this.notesSubject.subscribe(notes => this.saveNotesToLocalStorage(notes));\n  }\n\n  private loadNotesFromLocalStorage(): any[] {\n    const storedNotes = localStorage.getItem('notes');\n    return storedNotes ? JSON.parse(storedNotes) : [];\n  }\n\n  private saveNotesToLocalStorage(notes: any[]): void {\n    localStorage.setItem('notes', JSON.stringify(notes));\n  }\n\n  initializeNotes(notes: any[]): void {\n    const currentNotes = this.notesSubject.value;\n\n    const mergedNotes = notes.map(note => {\n      const existingNote = currentNotes.find(n => n.id === note.id);\n      return existingNote ? existingNote : note;\n    });\n\n    this.notesSubject.next(mergedNotes);\n  }\n\n  addNote(note: Omit<any, 'starred'>): void {\n    const notes = this.notesSubject.value;\n    notes.push({ ...note, starred: true });\n    this.notesSubject.next(notes);\n  }\n\n  removeNote(noteId: string): void {\n    const notes = this.notesSubject.value.filter(note => note.id !== noteId);\n    this.notesSubject.next(notes);\n  }\n\n  starNote(noteId: string): void {\n\n    const notes = this.notesSubject.value.map(note =>\n      note.id === noteId ? { ...note, starred: true } : note\n    );\n\n    this.notesSubject.next(notes);\n    this.starredStatusChangedSubject.next();\n    \n    console.log(`Note with ID ${noteId} starred.`);\n  }\n\n  unstarNote(noteId: string): void {\n    const notes = this.notesSubject.value.map(note =>\n      note.id === noteId ? { ...note, starred: false } : note\n    );\n\n    this.notesSubject.next(notes);\n    this.starredStatusChangedSubject.next();\n\n    console.log(`Note with ID ${noteId} unstarred.`);\n  }\n\n  getStarredNotes(): any[] {\n    return this.notesSubject.value.filter(note => note.starred);\n  }\n\n  getNumberOfStoredNotes(): number {\n    return this.notesSubject.value.length;\n  }\n\n  isNoteStarred(note: any): boolean {\n    const foundNote = this.notesSubject.value.find(n => n.id === note.id);\n    return foundNote ? foundNote.starred : false;\n  }\n\n  clearAllStarredNotes(): void {\n    const notes = this.notesSubject.value.map(note => ({ ...note, starred: false }));\n    \n    this.notesSubject.next(notes);\n    this.starredStatusChangedSubject.next();\n  }\n  \n}\n"
                    }
                },
                {
                    "id": 23,
                    "instruction": "Commit your changes to Github.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Commands",
                        "FormatCode": "cd Angular-Frontend\ngit add .\ngit commit -m \"stores\"\ngit push",
                        "CopyCode": "cd Angular-Frontend\ngit add .\ngit commit -m \"stores\"\ngit push"
                    }
                },
                {
                    "id": 24,
                    "instruction": "Go to src -> app -> views -> sign-in folder. Open the \"sign-in.component.html\" file and paste in the following code. ",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "Angular",
                        "FormatCode": "<div class=\"sign-in-container\">\n  <h1>Sign In</h1>\n  <form (ngSubmit)=\"handleSignIn()\">\n    <div class=\"input-group\">\n      <label for=\"username\">Username:</label>\n      <input type=\"text\" [(ngModel)]=\"username\" name=\"username\" id=\"username\" required />\n    </div>\n    <div class=\"input-group\">\n      <label for=\"password\">Password:</label>\n      <input type=\"password\" [(ngModel)]=\"password\" name=\"password\" id=\"password\" required />\n    </div>\n    <button type=\"submit\">Sign In</button>\n  </form>\n  <a routerLink=\"/Register\" class=\"register-link\">Don't Have an Account? Sign up</a>\n\n  <p *ngIf=\"errorMessage\">{{ errorMessage }}</p>\n</div>",
                        "CopyCode": "<div class=\"sign-in-container\">\n  <h1>Sign In</h1>\n  <form (ngSubmit)=\"handleSignIn()\">\n    <div class=\"input-group\">\n      <label for=\"username\">Username:</label>\n      <input type=\"text\" [(ngModel)]=\"username\" name=\"username\" id=\"username\" required />\n    </div>\n    <div class=\"input-group\">\n      <label for=\"password\">Password:</label>\n      <input type=\"password\" [(ngModel)]=\"password\" name=\"password\" id=\"password\" required />\n    </div>\n    <button type=\"submit\">Sign In</button>\n  </form>\n  <a routerLink=\"/Register\" class=\"register-link\">Don't Have an Account? Sign up</a>\n\n  <p *ngIf=\"errorMessage\">{{ errorMessage }}</p>\n</div>"
                    }
                },
                {
                    "id": 25,
                    "instruction": "In the same folder, open the \"sign-in.component.ts\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "Angular",
                        "FormatCode": "import { Component, OnInit } from '@angular/core';\nimport { Router, RouterModule } from '@angular/router';\nimport { UserService } from '../../services/user.service';\nimport { AuthService } from '../../stores/auth.service';\nimport { firstValueFrom } from 'rxjs';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-sign-in',\n  templateUrl: './sign-in.component.html',\n  styleUrls: ['./sign-in.component.css'],\n  standalone: true,\n  imports: [FormsModule, CommonModule, RouterModule], \n})\nexport class SignInComponent implements OnInit {\n  username: string = '';\n  password: string = '';\n  errorMessage: string = '';\n\n  constructor(\n    private router: Router,\n    private userService: UserService,\n    private authStore: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.authStore.logout();\n  }\n\n  async handleSignIn(): Promise<void> {\n    try {\n      const userData = { username: this.username, password: this.password };\n      const response = await firstValueFrom(this.userService.loginExistingUser(userData));\n\n      if (response && response.user) {\n        this.authStore.logout();\n        this.authStore.login(response);\n        this.router.navigate(['/Dashboard']);\n      } else {\n        this.errorMessage = \"Invalid username or password\";\n      }\n    } catch (error) {\n      console.error(error);\n      this.errorMessage = \"An error occurred during sign-in\";\n    }\n  }\n\n}\n",
                        "CopyCode": "import { Component, OnInit } from '@angular/core';\nimport { Router, RouterModule } from '@angular/router';\nimport { UserService } from '../../services/user.service';\nimport { AuthService } from '../../stores/auth.service';\nimport { firstValueFrom } from 'rxjs';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-sign-in',\n  templateUrl: './sign-in.component.html',\n  styleUrls: ['./sign-in.component.css'],\n  standalone: true,\n  imports: [FormsModule, CommonModule, RouterModule], \n})\nexport class SignInComponent implements OnInit {\n  username: string = '';\n  password: string = '';\n  errorMessage: string = '';\n\n  constructor(\n    private router: Router,\n    private userService: UserService,\n    private authStore: AuthService\n  ) {}\n\n  ngOnInit(): void {\n    this.authStore.logout();\n  }\n\n  async handleSignIn(): Promise<void> {\n    try {\n      const userData = { username: this.username, password: this.password };\n      const response = await firstValueFrom(this.userService.loginExistingUser(userData));\n\n      if (response && response.user) {\n        this.authStore.logout();\n        this.authStore.login(response);\n        this.router.navigate(['/Dashboard']);\n      } else {\n        this.errorMessage = \"Invalid username or password\";\n      }\n    } catch (error) {\n      console.error(error);\n      this.errorMessage = \"An error occurred during sign-in\";\n    }\n  }\n\n}\n"
                    }
                },
                {
                    "id": 26,
                    "instruction": "In the same folder, open the \"sign-in.component.css\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "CSS",
                        "FormatCode": ".sign-in-container {\n  max-width: 400px;\n  margin: 70px auto;\n  padding: 20px;\n  border: 1px solid white;\n  border-radius: 5px;\n  text-align: center;\n}\n\n.input-group {\n  margin-bottom: 15px;\n  text-align: left;\n}\n\nlabel {\n  display: block;\n  margin-bottom: 5px;\n}\n\ninput[type=\"text\"],\ninput[type=\"password\"] {\n  width: 100%;\n  padding: 8px;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n}\n\nbutton {\n  width: 100%;\n  padding: 10px;\n  background-color: #007BFF;\n  color: white;\n  border: none;\n  border-radius: 3px;\n  cursor: pointer;\n}\n\nbutton:hover {\n  background-color: #0056b3;\n}\n\n.register-link {\n  display: block;\n  margin-top: 20px;\n  color: #007BFF;\n  text-decoration: none;\n}\n\n.register-link:hover {\n  color: #0056b3;\n}\n",
                        "CopyCode": ".sign-in-container {\n  max-width: 400px;\n  margin: 70px auto;\n  padding: 20px;\n  border: 1px solid white;\n  border-radius: 5px;\n  text-align: center;\n}\n\n.input-group {\n  margin-bottom: 15px;\n  text-align: left;\n}\n\nlabel {\n  display: block;\n  margin-bottom: 5px;\n}\n\ninput[type=\"text\"],\ninput[type=\"password\"] {\n  width: 100%;\n  padding: 8px;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n}\n\nbutton {\n  width: 100%;\n  padding: 10px;\n  background-color: #007BFF;\n  color: white;\n  border: none;\n  border-radius: 3px;\n  cursor: pointer;\n}\n\nbutton:hover {\n  background-color: #0056b3;\n}\n\n.register-link {\n  display: block;\n  margin-top: 20px;\n  color: #007BFF;\n  text-decoration: none;\n}\n\n.register-link:hover {\n  color: #0056b3;\n}\n"
                    }
                },
                {
                    "id": 27,
                    "instruction": "Go to src -> app -> views -> sign-up folder. Open the \"sign-up.component.html\" file and paste in the following code. ",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "Angular",
                        "FormatCode": "<div class=\"register-container\">\n    <h1>Register</h1>\n    <form (ngSubmit)=\"handleRegister()\">\n      <div class=\"input-group\">\n        <label for=\"name\">Name:</label>\n        <input type=\"text\" [(ngModel)]=\"name\" name=\"name\" id=\"name\" required />\n      </div>\n      <div class=\"input-group\">\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" [(ngModel)]=\"email\" name=\"email\" id=\"email\" required />\n      </div>\n      <div class=\"input-group\">\n        <label for=\"password\">Password:</label>\n        <input type=\"password\" [(ngModel)]=\"password\" name=\"password\" id=\"password\" required />\n      </div>\n      <button type=\"submit\">Register</button>\n    </form>\n    <a routerLink=\"/\" class=\"sign-in-link\">Already Have an Account? Sign In</a>\n  \n    <p *ngIf=\"errorMessage\">{{ errorMessage }}</p>\n</div>\n",
                        "CopyCode": "<div class=\"register-container\">\n    <h1>Register</h1>\n    <form (ngSubmit)=\"handleRegister()\">\n      <div class=\"input-group\">\n        <label for=\"name\">Name:</label>\n        <input type=\"text\" [(ngModel)]=\"name\" name=\"name\" id=\"name\" required />\n      </div>\n      <div class=\"input-group\">\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" [(ngModel)]=\"email\" name=\"email\" id=\"email\" required />\n      </div>\n      <div class=\"input-group\">\n        <label for=\"password\">Password:</label>\n        <input type=\"password\" [(ngModel)]=\"password\" name=\"password\" id=\"password\" required />\n      </div>\n      <button type=\"submit\">Register</button>\n    </form>\n    <a routerLink=\"/\" class=\"sign-in-link\">Already Have an Account? Sign In</a>\n  \n    <p *ngIf=\"errorMessage\">{{ errorMessage }}</p>\n</div>\n"
                    }
                },
                {
                    "id": 28,
                    "instruction": "In the same folder, open the \"sign-up.component.ts\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "Angular",
                        "FormatCode": "import { Component } from '@angular/core';\nimport { Router, RouterModule } from '@angular/router';\nimport { AuthService } from '../../stores/auth.service';\nimport { UserService } from '../../services/user.service';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { firstValueFrom } from 'rxjs';\n\n@Component({\n  selector: 'app-sign-up',\n  standalone: true,\n  imports: [FormsModule, CommonModule, RouterModule],\n  templateUrl: './sign-up.component.html',\n  styleUrl: './sign-up.component.css'\n})\nexport class SignUpComponent {\n  name: string = '';\n  email: string = '';\n  password: string = '';\n  errorMessage: string = '';\n\n  constructor(\n    private userService: UserService,\n    private authService: AuthService,\n    private router: Router\n  ) {}\n\n  async handleRegister() {\n    try {\n      const userData = { username: this.name, email: this.email, password: this.password };\n      const response = await firstValueFrom(this.userService.createNewUser(userData));\n\n      if (response && response.user) {\n        this.authService.logout();\n        const loginResponse = await this.authService.login(response);\n\n        if (loginResponse) {\n          this.router.navigate(['/Dashboard']);\n        } else {\n          this.errorMessage = \"Failed to log in after registration\";\n        }\n      } else {\n        this.errorMessage = response.error || \"Registration failed\";\n      }\n    } catch (error) {\n      console.error(error);\n      this.errorMessage = \"An error occurred during registration\";\n    }\n  }\n}",
                        "CopyCode": "import { Component } from '@angular/core';\nimport { Router, RouterModule } from '@angular/router';\nimport { AuthService } from '../../stores/auth.service';\nimport { UserService } from '../../services/user.service';\nimport { FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { firstValueFrom } from 'rxjs';\n\n@Component({\n  selector: 'app-sign-up',\n  standalone: true,\n  imports: [FormsModule, CommonModule, RouterModule],\n  templateUrl: './sign-up.component.html',\n  styleUrl: './sign-up.component.css'\n})\nexport class SignUpComponent {\n  name: string = '';\n  email: string = '';\n  password: string = '';\n  errorMessage: string = '';\n\n  constructor(\n    private userService: UserService,\n    private authService: AuthService,\n    private router: Router\n  ) {}\n\n  async handleRegister() {\n    try {\n      const userData = { username: this.name, email: this.email, password: this.password };\n      const response = await firstValueFrom(this.userService.createNewUser(userData));\n\n      if (response && response.user) {\n        this.authService.logout();\n        const loginResponse = await this.authService.login(response);\n\n        if (loginResponse) {\n          this.router.navigate(['/Dashboard']);\n        } else {\n          this.errorMessage = \"Failed to log in after registration\";\n        }\n      } else {\n        this.errorMessage = response.error || \"Registration failed\";\n      }\n    } catch (error) {\n      console.error(error);\n      this.errorMessage = \"An error occurred during registration\";\n    }\n  }\n}"
                    }
                },
                {
                    "id": 29,
                    "instruction": "In the same folder, open the \"sign-up.component.css\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "CSS",
                        "FormatCode": ".register-container {\n  max-width: 400px;\n  margin: 70px auto;\n  padding: 20px;\n  border: 1px solid white;\n  border-radius: 5px;\n  text-align: center;\n}\n\n.input-group {\n  margin-bottom: 15px;\n  text-align: left;\n}\n  \nlabel {\n  display: block;\n  margin-bottom: 5px;\n}\n\ninput[type=\"text\"],\ninput[type=\"email\"],\ninput[type=\"password\"] {\n  width: 100%;\n  padding: 8px;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n}\n\nbutton {\n  width: 100%;\n  padding: 10px;\n  background-color: #007BFF;\n  color: white;\n  border: none;\n  border-radius: 3px;\n  cursor: pointer;\n}\n\nbutton:hover {\n  background-color: #0056b3;\n}\n\n.sign-in-link {\n  display: block;\n  margin-top: 20px;\n  color: #007BFF;\n  text-decoration: none;\n}\n\n.sign-in-link:hover {\n  color: #0056b3;\n}\n",
                        "CopyCode": ".register-container {\n  max-width: 400px;\n  margin: 70px auto;\n  padding: 20px;\n  border: 1px solid white;\n  border-radius: 5px;\n  text-align: center;\n}\n\n.input-group {\n  margin-bottom: 15px;\n  text-align: left;\n}\n  \nlabel {\n  display: block;\n  margin-bottom: 5px;\n}\n\ninput[type=\"text\"],\ninput[type=\"email\"],\ninput[type=\"password\"] {\n  width: 100%;\n  padding: 8px;\n  border: 1px solid #ccc;\n  border-radius: 3px;\n}\n\nbutton {\n  width: 100%;\n  padding: 10px;\n  background-color: #007BFF;\n  color: white;\n  border: none;\n  border-radius: 3px;\n  cursor: pointer;\n}\n\nbutton:hover {\n  background-color: #0056b3;\n}\n\n.sign-in-link {\n  display: block;\n  margin-top: 20px;\n  color: #007BFF;\n  text-decoration: none;\n}\n\n.sign-in-link:hover {\n  color: #0056b3;\n}\n"
                    }
                },
                {
                    "id": 30,
                    "instruction": "Commit your changes to Github.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Commands",
                        "FormatCode": "cd Angular-Frontend\ngit add .\ngit commit -m \"Sign in and up\"\ngit push",
                        "CopyCode": "cd Angular-Frontend\ngit add .\ngit commit -m \"Sign in and up\"\ngit push"
                    }
                },
                {
                    "id": 31,
                    "instruction": "Go to src -> app -> components -> note-card. Open the \"note-card.component.html\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "Angular",
                        "FormatCode": "<div class=\"note-view\">\n  <div class=\"note-header\">\n    <h2>{{ note.title }}</h2>\n    <span \n      class=\"star-icon\" \n      [class.starred]=\"isStarred\"\n      (click)=\"toggleStar()\"\n    >\n      ★\n    </span>\n  </div>\n  <p>{{ note.content }}</p>\n  <p><strong>Created At:</strong> {{ formatDate(note.created_at) }}</p>\n  <p><strong>Updated At:</strong> {{ formatDate(note.updated_at) }}</p>\n</div>",
                        "CopyCode": "<div class=\"note-view\">\n  <div class=\"note-header\">\n    <h2>{{ note.title }}</h2>\n    <span \n      class=\"star-icon\" \n      [class.starred]=\"isStarred\"\n      (click)=\"toggleStar()\"\n    >\n      ★\n    </span>\n  </div>\n  <p>{{ note.content }}</p>\n  <p><strong>Created At:</strong> {{ formatDate(note.created_at) }}</p>\n  <p><strong>Updated At:</strong> {{ formatDate(note.updated_at) }}</p>\n</div>"
                    }
                },
                {
                    "id": 32,
                    "instruction": "In the same folder, open the \"note-card.component.ts\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "Angular",
                        "FormatCode": "import { Component, Input, OnInit, OnDestroy, Output, EventEmitter } from '@angular/core';\nimport { StarredService } from '../../stores/starred.service';\nimport { DateFormatService } from '../../utils/date-format.service';\nimport { Subscription } from 'rxjs';\n\n\n@Component({\n  selector: 'app-note-card',\n  standalone: true,\n  templateUrl: './note-card.component.html',\n  styleUrls: ['./note-card.component.css']\n})\nexport class NoteCardComponent implements OnInit, OnDestroy {\n  @Input() note: any;\n  @Output() starStatusChanged = new EventEmitter<string>();\n  \n  isStarred: boolean = false;\n  private starredStatusSubscription!: Subscription;\n\n  constructor(\n    private starredNotes: StarredService,\n    private dateFormatService: DateFormatService\n  ) {}\n\n  ngOnInit(): void {\n    const savedStarredState = localStorage.getItem(`note-${this.note.id}-starred`);\n    this.isStarred = savedStarredState ? savedStarredState === 'true' : this.note.starred;\n\n    this.starredStatusSubscription = this.starredNotes.starredStatusChanged$.subscribe(() => {\n      this.isStarred = this.starredNotes.isNoteStarred(this.note);\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.starredStatusSubscription?.unsubscribe();\n  }\n\n  toggleStar(): void {\n    this.isStarred = !this.isStarred;\n\n    if (this.isStarred) {\n      this.starredNotes.starNote(this.note.id);\n    } else {\n      this.starredNotes.unstarNote(this.note.id);\n      this.starStatusChanged.emit(this.note.id);\n    }\n\n    localStorage.setItem(`note-${this.note.id}-starred`, String(this.isStarred));\n  }\n\n  formatDate(date: string): string {\n    return this.dateFormatService.formatDate(date);\n  }\n\n}\n",
                        "CopyCode": "import { Component, Input, OnInit, OnDestroy, Output, EventEmitter } from '@angular/core';\nimport { StarredService } from '../../stores/starred.service';\nimport { DateFormatService } from '../../utils/date-format.service';\nimport { Subscription } from 'rxjs';\n\n\n@Component({\n  selector: 'app-note-card',\n  standalone: true,\n  templateUrl: './note-card.component.html',\n  styleUrls: ['./note-card.component.css']\n})\nexport class NoteCardComponent implements OnInit, OnDestroy {\n  @Input() note: any;\n  @Output() starStatusChanged = new EventEmitter<string>();\n  \n  isStarred: boolean = false;\n  private starredStatusSubscription!: Subscription;\n\n  constructor(\n    private starredNotes: StarredService,\n    private dateFormatService: DateFormatService\n  ) {}\n\n  ngOnInit(): void {\n    const savedStarredState = localStorage.getItem(`note-${this.note.id}-starred`);\n    this.isStarred = savedStarredState ? savedStarredState === 'true' : this.note.starred;\n\n    this.starredStatusSubscription = this.starredNotes.starredStatusChanged$.subscribe(() => {\n      this.isStarred = this.starredNotes.isNoteStarred(this.note);\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.starredStatusSubscription?.unsubscribe();\n  }\n\n  toggleStar(): void {\n    this.isStarred = !this.isStarred;\n\n    if (this.isStarred) {\n      this.starredNotes.starNote(this.note.id);\n    } else {\n      this.starredNotes.unstarNote(this.note.id);\n      this.starStatusChanged.emit(this.note.id);\n    }\n\n    localStorage.setItem(`note-${this.note.id}-starred`, String(this.isStarred));\n  }\n\n  formatDate(date: string): string {\n    return this.dateFormatService.formatDate(date);\n  }\n\n}\n"
                    }
                },
                {
                    "id": 33,
                    "instruction": "In the same folder, open the \"note-card.component.css\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "CSS",
                        "FormatCode": ".note-view {\n  border: 1px solid #ddd;\n  padding: 16px;\n  border-radius: 8px;\n  background-color: #f9f9f9;\n  width: 500px;\n}\n\n.note-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nh2 {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\np {\n  margin: 4px 0;\n}\n\n.star-icon {\n  cursor: pointer;\n  font-size: 24px;\n  color: gray;\n  transition: color 0.3s;\n}\n\n.star-icon.starred {\n  color: orange;\n}\n",
                        "CopyCode": ".note-view {\n  border: 1px solid #ddd;\n  padding: 16px;\n  border-radius: 8px;\n  background-color: #f9f9f9;\n  width: 500px;\n}\n\n.note-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nh2 {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\np {\n  margin: 4px 0;\n}\n\n.star-icon {\n  cursor: pointer;\n  font-size: 24px;\n  color: gray;\n  transition: color 0.3s;\n}\n\n.star-icon.starred {\n  color: orange;\n}\n"
                    }
                },
                {
                    "id": 34,
                    "instruction": "Go to src -> app -> components -> note-card. Open the \"nav-bar.component.html\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "Angular",
                        "FormatCode": "<nav class=\"navbar\">\n  <div class=\"navbar-left\">\n    <span class=\"username\">{{ username }}</span>\n  </div>\n  <div class=\"navbar-right\">\n    <a routerLink=\"/Dashboard\" class=\"nav-link\">Dashboard</a>\n    <a routerLink=\"/Starred\" class=\"nav-link\">Starred</a>\n    <a (click)=\"logout()\" class=\"nav-link\">Logout</a>\n  </div>\n</nav>",
                        "CopyCode": "<nav class=\"navbar\">\n  <div class=\"navbar-left\">\n    <span class=\"username\">{{ username }}</span>\n  </div>\n  <div class=\"navbar-right\">\n    <a routerLink=\"/Dashboard\" class=\"nav-link\">Dashboard</a>\n    <a routerLink=\"/Starred\" class=\"nav-link\">Starred</a>\n    <a (click)=\"logout()\" class=\"nav-link\">Logout</a>\n  </div>\n</nav>"
                    }
                },
                {
                    "id": 35,
                    "instruction": "In the same folder, open the \"nav-bar.component.ts\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "Angular",
                        "FormatCode": "import { Component, Input } from '@angular/core';\nimport { Router, RouterModule } from '@angular/router';\nimport { AuthService } from '../../stores/auth.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { LogoutAlertComponent } from '../logout-alert/logout-alert.component';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-navbar',\n  standalone: true,\n  imports: [CommonModule, RouterModule], \n  templateUrl: './nav-bar.component.html',\n  styleUrls: ['./nav-bar.component.css']\n})\nexport class NavBarComponent {\n  @Input() username: string = '';\n\n  constructor(\n    private router: Router,\n    private authService: AuthService,\n    private dialog: MatDialog\n  ) {}\n\n  \n  logout(): void {\n    const dialogRef = this.dialog.open(LogoutAlertComponent);\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.authService.logout();\n        this.router.navigate(['/']);\n      }\n    });\n  }\n\n}\n",
                        "CopyCode": "import { Component, Input } from '@angular/core';\nimport { Router, RouterModule } from '@angular/router';\nimport { AuthService } from '../../stores/auth.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { LogoutAlertComponent } from '../logout-alert/logout-alert.component';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-navbar',\n  standalone: true,\n  imports: [CommonModule, RouterModule], \n  templateUrl: './nav-bar.component.html',\n  styleUrls: ['./nav-bar.component.css']\n})\nexport class NavBarComponent {\n  @Input() username: string = '';\n\n  constructor(\n    private router: Router,\n    private authService: AuthService,\n    private dialog: MatDialog\n  ) {}\n\n  \n  logout(): void {\n    const dialogRef = this.dialog.open(LogoutAlertComponent);\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result) {\n        this.authService.logout();\n        this.router.navigate(['/']);\n      }\n    });\n  }\n\n}\n"
                    }
                },
                {
                    "id": 36,
                    "instruction": "In the same folder, open the \"nav-bar.component.css\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "CSS",
                        "FormatCode": ".navbar {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 14px 30px;\n  background-color: navy;\n  color: #fff;\n  width: 100%;\n  box-sizing: border-box;\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 1001;\n  height: 70px;\n}\n\n.navbar-left .username {\n  font-size: 23px;\n  font-weight: bold;\n}\n\n.navbar-right {\n  display: flex;\n  gap: 16px;\n}\n\n.nav-link {\n  color: #fff;\n  text-decoration: none;\n  font-size: 21px;\n  padding: 12px;\n  border-radius: 4px;\n  transition: background-color 0.3s, color 0.3s;\n}\n\n.nav-link:hover {\n  background-color: rgba(255, 255, 255, 0.2);\n  color: #fff;\n  cursor: pointer;\n}\n",
                        "CopyCode": ".navbar {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 14px 30px;\n  background-color: navy;\n  color: #fff;\n  width: 100%;\n  box-sizing: border-box;\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 1001;\n  height: 70px;\n}\n\n.navbar-left .username {\n  font-size: 23px;\n  font-weight: bold;\n}\n\n.navbar-right {\n  display: flex;\n  gap: 16px;\n}\n\n.nav-link {\n  color: #fff;\n  text-decoration: none;\n  font-size: 21px;\n  padding: 12px;\n  border-radius: 4px;\n  transition: background-color 0.3s, color 0.3s;\n}\n\n.nav-link:hover {\n  background-color: rgba(255, 255, 255, 0.2);\n  color: #fff;\n  cursor: pointer;\n}\n"
                    }
                },
                {
                    "id": 37,
                    "instruction": "Go to src -> app -> components -> note-card. Open the \"logout-alert.component.html\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "Angular",
                        "FormatCode": "<h2 mat-dialog-title>Log out?</h2>\n<mat-dialog-content>Are you sure you want to sign out?</mat-dialog-content>\n<mat-dialog-actions align=\"end\">\n  <button mat-button (click)=\"onCancel()\">Cancel</button>\n  <button mat-button color=\"warn\" (click)=\"onLogout()\">Log out</button>\n</mat-dialog-actions>",
                        "CopyCode": "<h2 mat-dialog-title>Log out?</h2>\n<mat-dialog-content>Are you sure you want to sign out?</mat-dialog-content>\n<mat-dialog-actions align=\"end\">\n  <button mat-button (click)=\"onCancel()\">Cancel</button>\n  <button mat-button color=\"warn\" (click)=\"onLogout()\">Log out</button>\n</mat-dialog-actions>"
                    }
                },
                {
                    "id": 38,
                    "instruction": "In the same folder, open the \"logout-alert.component.ts\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "Angular",
                        "FormatCode": "import { Component } from '@angular/core';\nimport { MatDialogRef, MatDialogModule } from '@angular/material/dialog';\nimport { MatButtonModule } from '@angular/material/button';\n\n@Component({\n  selector: 'app-logout-alert',\n  standalone: true,\n  imports: [MatDialogModule, MatButtonModule],\n  templateUrl: './logout-alert.component.html'\n})\nexport class LogoutAlertComponent {\n  \n  constructor(private dialogRef: MatDialogRef<LogoutAlertComponent>) {}\n\n  onCancel(): void {\n    this.dialogRef.close(false); \n  }\n\n  onLogout(): void {\n    this.dialogRef.close(true);\n  }\n\n}",
                        "CopyCode": "import { Component } from '@angular/core';\nimport { MatDialogRef, MatDialogModule } from '@angular/material/dialog';\nimport { MatButtonModule } from '@angular/material/button';\n\n@Component({\n  selector: 'app-logout-alert',\n  standalone: true,\n  imports: [MatDialogModule, MatButtonModule],\n  templateUrl: './logout-alert.component.html'\n})\nexport class LogoutAlertComponent {\n  \n  constructor(private dialogRef: MatDialogRef<LogoutAlertComponent>) {}\n\n  onCancel(): void {\n    this.dialogRef.close(false); \n  }\n\n  onLogout(): void {\n    this.dialogRef.close(true);\n  }\n\n}"
                    }
                },
                {
                    "id": 39,
                    "instruction": "In src -> app, open the \"app.component.html\" file. Delete it's contents and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "Angular",
                        "FormatCode": "<app-navbar *ngIf=\"showNavBar\" [username]=\"userName\"></app-navbar>\n<router-outlet></router-outlet>",
                        "CopyCode": "<app-navbar *ngIf=\"showNavBar\" [username]=\"userName\"></app-navbar>\n<router-outlet></router-outlet>"
                    }
                },
                {
                    "id": 40,
                    "instruction": "In src -> app, open the \"app.component.ts\" file. Delete it's contents and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "Angular",
                        "FormatCode": "import { Component, OnInit } from '@angular/core';\nimport { Router, NavigationEnd, Event } from '@angular/router';\nimport { filter } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\nimport { RouterOutlet } from '@angular/router';\nimport { NavBarComponent } from './components/nav-bar/nav-bar.component';\nimport { AuthService } from './stores/auth.service';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [CommonModule, RouterOutlet, NavBarComponent],\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent implements OnInit {\n  title = 'Angular-Frontend';\n  userName: string = 'Guest';\n  showNavBar: boolean = true;\n\n  constructor(private router: Router, private authService: AuthService) {}\n\n  ngOnInit() {\n    this.router.events\n      .pipe(filter((event: Event): event is NavigationEnd => event instanceof NavigationEnd))\n      .subscribe((event: NavigationEnd) => {\n        this.showNavBar = !['/', '/Register'].includes(event.urlAfterRedirects);\n      });\n\n    this.authService.user$.subscribe(user => {\n      this.userName = user.username || '';\n    });\n  }\n  \n}\n",
                        "CopyCode": "import { Component, OnInit } from '@angular/core';\nimport { Router, NavigationEnd, Event } from '@angular/router';\nimport { filter } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\nimport { RouterOutlet } from '@angular/router';\nimport { NavBarComponent } from './components/nav-bar/nav-bar.component';\nimport { AuthService } from './stores/auth.service';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [CommonModule, RouterOutlet, NavBarComponent],\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent implements OnInit {\n  title = 'Angular-Frontend';\n  userName: string = 'Guest';\n  showNavBar: boolean = true;\n\n  constructor(private router: Router, private authService: AuthService) {}\n\n  ngOnInit() {\n    this.router.events\n      .pipe(filter((event: Event): event is NavigationEnd => event instanceof NavigationEnd))\n      .subscribe((event: NavigationEnd) => {\n        this.showNavBar = !['/', '/Register'].includes(event.urlAfterRedirects);\n      });\n\n    this.authService.user$.subscribe(user => {\n      this.userName = user.username || '';\n    });\n  }\n  \n}\n"
                    }
                },
                {
                    "id": 41,
                    "instruction": "Commit your changes to Github.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Commands",
                        "FormatCode": "cd Angular-Frontend\ngit add .\ngit commit -m \"components\"\ngit push",
                        "CopyCode": "cd Angular-Frontend\ngit add .\ngit commit -m \"components\"\ngit push"
                    }
                },
                {
                    "id": 42,
                    "instruction": "Go to src -> app -> views -> main-page and open the \"main-page.component.html\" file.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "Angular",
                        "FormatCode": "<div class=\"notes-container\">\n  <app-note-card \n    *ngFor=\"let note of userNotes; trackBy: trackByNoteId\" \n    [note]=\"note\">\n  </app-note-card>\n</div>",
                        "CopyCode": "<div class=\"notes-container\">\n  <app-note-card \n    *ngFor=\"let note of userNotes; trackBy: trackByNoteId\" \n    [note]=\"note\">\n  </app-note-card>\n</div>"
                    }
                },
                {
                    "id": 43,
                    "instruction": "In the same folder, open the \"main-page.component.ts\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "Angular",
                        "FormatCode": "import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../../stores/auth.service';\nimport { NoteCardComponent } from '../../components/note-card/note-card.component';\nimport { NotesService } from '../../services/notes.service';\nimport { CommonModule } from '@angular/common';\nimport { StarredService } from '../../stores/starred.service';\n\n@Component({\n  selector: 'app-main-page',\n  standalone: true,\n  imports: [NoteCardComponent, CommonModule],\n  templateUrl: './main-page.component.html',\n  styleUrls: ['./main-page.component.css']\n})\nexport class MainPageComponent implements OnInit {\n  userNotes: any[] = [];\n  userId!: number;\n\n  constructor(\n    private authStore: AuthService, \n    private notesService: NotesService, \n    private starredService: StarredService\n  ) {}\n  \n  ngOnInit(): void {\n    this.userId = this.authStore.getUserId();\n    this.fetchUserNotes();\n  }\n  \n  trackByNoteId(index: number, note: any): string {\n    return note.id;\n  }\n  \n  private fetchUserNotes(): void {\n    this.notesService.getAllUserNotes(this.userId).subscribe((notes: any[]) => {\n      this.userNotes = notes;\n      this.authStore.setNotes(this.userNotes);\n      this.starredService.initializeNotes(notes);\n    });\n  }\n\n}",
                        "CopyCode": "import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../../stores/auth.service';\nimport { NoteCardComponent } from '../../components/note-card/note-card.component';\nimport { NotesService } from '../../services/notes.service';\nimport { CommonModule } from '@angular/common';\nimport { StarredService } from '../../stores/starred.service';\n\n@Component({\n  selector: 'app-main-page',\n  standalone: true,\n  imports: [NoteCardComponent, CommonModule],\n  templateUrl: './main-page.component.html',\n  styleUrls: ['./main-page.component.css']\n})\nexport class MainPageComponent implements OnInit {\n  userNotes: any[] = [];\n  userId!: number;\n\n  constructor(\n    private authStore: AuthService, \n    private notesService: NotesService, \n    private starredService: StarredService\n  ) {}\n  \n  ngOnInit(): void {\n    this.userId = this.authStore.getUserId();\n    this.fetchUserNotes();\n  }\n  \n  trackByNoteId(index: number, note: any): string {\n    return note.id;\n  }\n  \n  private fetchUserNotes(): void {\n    this.notesService.getAllUserNotes(this.userId).subscribe((notes: any[]) => {\n      this.userNotes = notes;\n      this.authStore.setNotes(this.userNotes);\n      this.starredService.initializeNotes(notes);\n    });\n  }\n\n}"
                    }
                },
                {
                    "id": 44,
                    "instruction": "In the same folder, open the \"main-page.component.css\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "CSS",
                        "FormatCode": ".notes-container {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  gap: 20px;\n  padding: 20px;\n  margin-top: 80px;\n  max-width: 800px;\n  margin: 0 auto;\n  justify-content: center;\n  margin-top: 70px;\n}\n\napp-note-card {\n  border: 1px solid #ccc;\n  border-radius: 8px;\n  padding: 15px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  background-color: #fff;\n}",
                        "CopyCode": ".notes-container {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  gap: 20px;\n  padding: 20px;\n  margin-top: 80px;\n  max-width: 800px;\n  margin: 0 auto;\n  justify-content: center;\n  margin-top: 70px;\n}\n\napp-note-card {\n  border: 1px solid #ccc;\n  border-radius: 8px;\n  padding: 15px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  background-color: #fff;\n}"
                    }
                },
                {
                    "id": 45,
                    "instruction": "Go to src -> app -> views -> starred and open the \"starred.component.html\" file.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "Angular",
                        "FormatCode": "<div class=\"starred-notes-container\">\n  <h2 class=\"title\">Starred Notes</h2>\n    <div *ngFor=\"let note of starredNotes\" class=\"note-card\">\n      <app-note-card \n        [note]=\"note\" \n        (starStatusChanged)=\"onStarStatusChanged($event)\">\n      </app-note-card>\n  </div>\n</div>",
                        "CopyCode": "<div class=\"starred-notes-container\">\n  <h2 class=\"title\">Starred Notes</h2>\n    <div *ngFor=\"let note of starredNotes\" class=\"note-card\">\n      <app-note-card \n        [note]=\"note\" \n        (starStatusChanged)=\"onStarStatusChanged($event)\">\n      </app-note-card>\n  </div>\n</div>"
                    }
                },
                {
                    "id": 46,
                    "instruction": "In the same folder, open the \"starred.component.ts\" file and paste in the following code. Make sure it's NOT the \"starred.component.ts\" file.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "Angular",
                        "FormatCode": "import { Component, OnInit } from '@angular/core';\nimport { NoteCardComponent } from '../../components/note-card/note-card.component';\nimport { StarredService } from '../../stores/starred.service';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-starred',\n  standalone: true,\n  imports: [CommonModule, NoteCardComponent],\n  templateUrl: './starred.component.html',\n  styleUrls: ['./starred.component.css']\n})\nexport class StarredComponent implements OnInit {\n  starredNotes: any[] = [];\n\n  constructor(private starredService: StarredService) {}\n\n  ngOnInit(): void {\n    this.starredNotes = this.starredService.getStarredNotes();\n  }\n\n  onStarStatusChanged(noteId: string): void {\n    this.starredNotes = this.starredNotes.filter(note => note.id !== noteId);\n  }\n  \n}",
                        "CopyCode": "import { Component, OnInit } from '@angular/core';\nimport { NoteCardComponent } from '../../components/note-card/note-card.component';\nimport { StarredService } from '../../stores/starred.service';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-starred',\n  standalone: true,\n  imports: [CommonModule, NoteCardComponent],\n  templateUrl: './starred.component.html',\n  styleUrls: ['./starred.component.css']\n})\nexport class StarredComponent implements OnInit {\n  starredNotes: any[] = [];\n\n  constructor(private starredService: StarredService) {}\n\n  ngOnInit(): void {\n    this.starredNotes = this.starredService.getStarredNotes();\n  }\n\n  onStarStatusChanged(noteId: string): void {\n    this.starredNotes = this.starredNotes.filter(note => note.id !== noteId);\n  }\n  \n}"
                    }
                },
                {
                    "id": 47,
                    "instruction": "In the same folder, open the \"starred.component.css\" file and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "Angular",
                        "FormatCode": ".starred-notes-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-top: 85px;\n}\n\n.title {\n  font-size: 26px;\n  font-weight: bold;\n  text-decoration: underline;\n  justify-content: center;\n  margin-bottom: 18px;\n}\n\n.note-card {\n  display: flex;\n  justify-content: center;\n  width: 100%;\n  max-width: 800px;\n  margin-bottom: 20px;\n}",
                        "CopyCode": ".starred-notes-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-top: 85px;\n}\n\n.title {\n  font-size: 26px;\n  font-weight: bold;\n  text-decoration: underline;\n  justify-content: center;\n  margin-bottom: 18px;\n}\n\n.note-card {\n  display: flex;\n  justify-content: center;\n  width: 100%;\n  max-width: 800px;\n  margin-bottom: 20px;\n}"
                    }
                },
                {
                    "id": 48,
                    "instruction": "Commit your changes to Github.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Commands",
                        "FormatCode": "cd Angular-Frontend\ngit add .\ngit commit -m \"Views complete\"\ngit push",
                        "CopyCode": "cd Angular-Frontend\ngit add .\ngit commit -m \"Views complete\"\ngit push"
                    }
                },
                {
                    "id": 49,
                    "instruction": "To run and test your website, open two terminals. In the first terminal start your Rest Api using the following commands.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Commands",
                        "FormatCode": "cd Django-Rest-Api\nsource venv/bin/activate\npython3 manage.py runserver",
                        "CopyCode": "cd Django-Rest-Api\nsource venv/bin/activate\npython3 manage.py runserver"
                    }
                },
                {
                    "id": 50,
                    "instruction": "In the second terminal run your frontend. Open the link in your browser.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Commands",
                        "FormatCode": "cd Angular-Frontend\nng serve",
                        "CopyCode": "cd Angular-Frontend\nng serve"
                    }
                },
                {
                    "id": 51,
                    "instruction": "",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "",
                        "FormatCode": "",
                        "CopyCode": ""
                    }
                },
                {
                    "id": 52,
                    "instruction": "",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "",
                        "FormatCode": "",
                        "CopyCode": ""
                    }
                },
                {
                    "id": 53,
                    "instruction": "",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "",
                        "FormatCode": "",
                        "CopyCode": ""
                    }
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "Add Testing to your Frontend UI",
                    "desc": "Explains how to write tests using the Jest framework for your front end."
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "Angular comes with the built-in Jasmine and Karma testing frameworks. They're super convenient and they're what we'll use for our unit testing in this project."
                },
                {
                    "id": 2,
                    "instruction": "If you were to run the tests right now you'd get these error for some of the tests.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "Testing Errors",
                        "FormatCode": "NullInjectorError: No provider for HttpClient!\n\nNullInjectorError: No provider for ActivatedRoute!\n\nNullInjectorError: No provider for MatDialogRef!",
                        "CopyCode": "NullInjectorError: No provider for HttpClient!\n\nNullInjectorError: No provider for ActivatedRoute!\n\nNullInjectorError: No provider for MatDialogRef!"
                    }
                },
                {
                    "id": 3,
                    "instruction": "To resolve these errors, we'll have to change some of the spec testing files."
                },
                {
                    "id": 4,
                    "instruction": "Open your \"Angular-Frontend\" project in VSCode. Go to src -> app -> api and open the \"notes-api.service.spec.ts\" file. Delete it's contents and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "Angular",
                        "FormatCode": "import { TestBed } from '@angular/core/testing';\nimport { HttpTestingController, provideHttpClientTesting } from '@angular/common/http/testing';\nimport { NotesAPIService } from './notes-api.service';\nimport { provideHttpClient } from '@angular/common/http';\n\ndescribe('NotesAPIService', () => {\n  let httpTestingController: HttpTestingController;\n  let service: NotesAPIService;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers: [\n        NotesAPIService,\n        provideHttpClient(),\n        provideHttpClientTesting(),\n      ],\n    });\n    httpTestingController = TestBed.inject(HttpTestingController);\n    service = TestBed.inject(NotesAPIService);\n  });\n\n  afterEach(() => {\n    httpTestingController.verify();\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n});\n",
                        "CopyCode": "import { TestBed } from '@angular/core/testing';\nimport { HttpTestingController, provideHttpClientTesting } from '@angular/common/http/testing';\nimport { NotesAPIService } from './notes-api.service';\nimport { provideHttpClient } from '@angular/common/http';\n\ndescribe('NotesAPIService', () => {\n  let httpTestingController: HttpTestingController;\n  let service: NotesAPIService;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers: [\n        NotesAPIService,\n        provideHttpClient(),\n        provideHttpClientTesting(),\n      ],\n    });\n    httpTestingController = TestBed.inject(HttpTestingController);\n    service = TestBed.inject(NotesAPIService);\n  });\n\n  afterEach(() => {\n    httpTestingController.verify();\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n});\n"
                    }
                },
                {
                    "id": 5,
                    "instruction": "Go to src -> app -> api and open the \"user-api.service.spec.ts\" file. Delete it's contents and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "Angular",
                        "FormatCode": "import { TestBed } from '@angular/core/testing';\n\nimport { UserAPIService } from './user-api.service';\nimport { HttpTestingController, provideHttpClientTesting } from '@angular/common/http/testing';\nimport { provideHttpClient } from '@angular/common/http';\n\ndescribe('UserAPIService', () => {\n  let httpTestingController: HttpTestingController;\n  let service: UserAPIService;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers: [\n        UserAPIService,\n        provideHttpClient(),\n        provideHttpClientTesting(),\n      ],\n    });\n    httpTestingController = TestBed.inject(HttpTestingController);\n    service = TestBed.inject(UserAPIService);\n  });\n\n  afterEach(() => {\n    httpTestingController.verify();\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n});\n",
                        "CopyCode": "import { TestBed } from '@angular/core/testing';\n\nimport { UserAPIService } from './user-api.service';\nimport { HttpTestingController, provideHttpClientTesting } from '@angular/common/http/testing';\nimport { provideHttpClient } from '@angular/common/http';\n\ndescribe('UserAPIService', () => {\n  let httpTestingController: HttpTestingController;\n  let service: UserAPIService;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers: [\n        UserAPIService,\n        provideHttpClient(),\n        provideHttpClientTesting(),\n      ],\n    });\n    httpTestingController = TestBed.inject(HttpTestingController);\n    service = TestBed.inject(UserAPIService);\n  });\n\n  afterEach(() => {\n    httpTestingController.verify();\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n});\n"
                    }
                },
                {
                    "id": 6,
                    "instruction": "Go to src -> app and open the \"app.component.spec.ts\" file. Delete it's contents and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "Angular",
                        "FormatCode": "import { TestBed } from '@angular/core/testing';\nimport { AppComponent } from './app.component';\nimport { ActivatedRoute } from '@angular/router';\nimport { of } from 'rxjs';\n\ndescribe('AppComponent', () => {\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [AppComponent],\n      providers: [\n        {\n          provide: ActivatedRoute,\n          useValue: {\n            snapshot: { params: {} },\n            params: of({}),\n          },\n        },\n      ],\n    }).compileComponents();\n  });\n\n  it('should create the app', () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    const app = fixture.componentInstance;\n    expect(app).toBeTruthy();\n  });\n\n  it(`should have the 'Angular-Frontend' title`, () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    const app = fixture.componentInstance;\n    expect(app.title).toEqual('Angular-Frontend');\n  });\n\n  it('should render app-navbar and router-outlet', () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    const app = fixture.componentInstance;\n    app.showNavBar = true;\n    fixture.detectChanges();\n  \n    const compiled = fixture.nativeElement as HTMLElement;\n  \n    expect(compiled.querySelector('app-navbar')).toBeTruthy();\n    expect(compiled.querySelector('app-navbar')?.getAttribute('username')).toEqual(null);\n\n    expect(compiled.querySelector('router-outlet')).toBeTruthy();\n  });\n  \n});\n",
                        "CopyCode": "import { TestBed } from '@angular/core/testing';\nimport { AppComponent } from './app.component';\nimport { ActivatedRoute } from '@angular/router';\nimport { of } from 'rxjs';\n\ndescribe('AppComponent', () => {\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [AppComponent],\n      providers: [\n        {\n          provide: ActivatedRoute,\n          useValue: {\n            snapshot: { params: {} },\n            params: of({}),\n          },\n        },\n      ],\n    }).compileComponents();\n  });\n\n  it('should create the app', () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    const app = fixture.componentInstance;\n    expect(app).toBeTruthy();\n  });\n\n  it(`should have the 'Angular-Frontend' title`, () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    const app = fixture.componentInstance;\n    expect(app.title).toEqual('Angular-Frontend');\n  });\n\n  it('should render app-navbar and router-outlet', () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    const app = fixture.componentInstance;\n    app.showNavBar = true;\n    fixture.detectChanges();\n  \n    const compiled = fixture.nativeElement as HTMLElement;\n  \n    expect(compiled.querySelector('app-navbar')).toBeTruthy();\n    expect(compiled.querySelector('app-navbar')?.getAttribute('username')).toEqual(null);\n\n    expect(compiled.querySelector('router-outlet')).toBeTruthy();\n  });\n  \n});\n"
                    }
                },
                {
                    "id": 7,
                    "instruction": "Go to src -> app -> components -> note-card and open the \"note-card.component.spec.ts\" file. Delete it's contents and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "Angular",
                        "FormatCode": "import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { NoteCardComponent } from './note-card.component';\nimport { StarredService } from '../../stores/starred.service';\nimport { DateFormatService } from '../../utils/date-format.service';\nimport { of } from 'rxjs';\n\ndescribe('NoteCardComponent', () => {\n  let component: NoteCardComponent;\n  let fixture: ComponentFixture<NoteCardComponent>;\n  let starredServiceMock: jasmine.SpyObj<StarredService>;\n  let dateFormatServiceMock: jasmine.SpyObj<DateFormatService>;\n\n  beforeEach(async () => {\n\n    starredServiceMock = jasmine.createSpyObj('StarredService', ['isNoteStarred', 'starNote', 'unstarNote'], {\n      starredStatusChanged$: of()\n    });\n\n    dateFormatServiceMock = jasmine.createSpyObj('DateFormatService', ['formatDate']);\n\n    await TestBed.configureTestingModule({\n      imports: [NoteCardComponent],\n      providers: [\n        { provide: StarredService, useValue: starredServiceMock },\n        { provide: DateFormatService, useValue: dateFormatServiceMock },\n      ]\n    })\n    .compileComponents();\n\n    fixture = TestBed.createComponent(NoteCardComponent);\n    component = fixture.componentInstance;\n\n    component.note = { id: '1', starred: false };\n\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should initialize isStarred based on localStorage or note property', () => {\n    const getItemSpy = spyOn(localStorage, 'getItem');\n  \n    getItemSpy.and.returnValue(null);\n    component.ngOnInit();\n\n    expect(component.isStarred).toBe(false);\n  \n    \n    getItemSpy.and.returnValue('true');\n    component.ngOnInit();\n\n    expect(component.isStarred).toBe(true);\n\n  });\n  \n\n  it('should toggle isStarred and call appropriate starred service methods', () => {\n    component.isStarred = false;\n    component.toggleStar();\n\n    expect(component.isStarred).toBe(true);\n    expect(starredServiceMock.starNote).toHaveBeenCalledWith('1');\n\n    component.toggleStar();\n    expect(component.isStarred).toBe(false);\n    expect(starredServiceMock.unstarNote).toHaveBeenCalledWith('1');\n  });\n\n  it('should format date using DateFormatService', () => {\n    dateFormatServiceMock.formatDate.and.returnValue('Formatted Date');\n    const result = component.formatDate('2024-10-28');\n    expect(result).toBe('Formatted Date');\n    expect(dateFormatServiceMock.formatDate).toHaveBeenCalledWith('2024-10-28');\n  });\n});\n",
                        "CopyCode": "import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { NoteCardComponent } from './note-card.component';\nimport { StarredService } from '../../stores/starred.service';\nimport { DateFormatService } from '../../utils/date-format.service';\nimport { of } from 'rxjs';\n\ndescribe('NoteCardComponent', () => {\n  let component: NoteCardComponent;\n  let fixture: ComponentFixture<NoteCardComponent>;\n  let starredServiceMock: jasmine.SpyObj<StarredService>;\n  let dateFormatServiceMock: jasmine.SpyObj<DateFormatService>;\n\n  beforeEach(async () => {\n\n    starredServiceMock = jasmine.createSpyObj('StarredService', ['isNoteStarred', 'starNote', 'unstarNote'], {\n      starredStatusChanged$: of()\n    });\n\n    dateFormatServiceMock = jasmine.createSpyObj('DateFormatService', ['formatDate']);\n\n    await TestBed.configureTestingModule({\n      imports: [NoteCardComponent],\n      providers: [\n        { provide: StarredService, useValue: starredServiceMock },\n        { provide: DateFormatService, useValue: dateFormatServiceMock },\n      ]\n    })\n    .compileComponents();\n\n    fixture = TestBed.createComponent(NoteCardComponent);\n    component = fixture.componentInstance;\n\n    component.note = { id: '1', starred: false };\n\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should initialize isStarred based on localStorage or note property', () => {\n    const getItemSpy = spyOn(localStorage, 'getItem');\n  \n    getItemSpy.and.returnValue(null);\n    component.ngOnInit();\n\n    expect(component.isStarred).toBe(false);\n  \n    \n    getItemSpy.and.returnValue('true');\n    component.ngOnInit();\n\n    expect(component.isStarred).toBe(true);\n\n  });\n  \n\n  it('should toggle isStarred and call appropriate starred service methods', () => {\n    component.isStarred = false;\n    component.toggleStar();\n\n    expect(component.isStarred).toBe(true);\n    expect(starredServiceMock.starNote).toHaveBeenCalledWith('1');\n\n    component.toggleStar();\n    expect(component.isStarred).toBe(false);\n    expect(starredServiceMock.unstarNote).toHaveBeenCalledWith('1');\n  });\n\n  it('should format date using DateFormatService', () => {\n    dateFormatServiceMock.formatDate.and.returnValue('Formatted Date');\n    const result = component.formatDate('2024-10-28');\n    expect(result).toBe('Formatted Date');\n    expect(dateFormatServiceMock.formatDate).toHaveBeenCalledWith('2024-10-28');\n  });\n});\n"
                    }
                },
                {
                    "id": 8,
                    "instruction": "Go to src -> app -> components -> logout-alert and open the \"logout-alert.component.spec.ts\" file. Delete it's contents and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "Angular",
                        "FormatCode": "import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { LogoutAlertComponent } from './logout-alert.component';\n\ndescribe('LogoutAlertComponent', () => {\n  let component: LogoutAlertComponent;\n  let fixture: ComponentFixture<LogoutAlertComponent>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [LogoutAlertComponent],\n      providers: [\n        { provide: MatDialogRef, useValue: {} }\n      ]\n    })\n    .compileComponents();\n\n    fixture = TestBed.createComponent(LogoutAlertComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  \n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n});\n",
                        "CopyCode": "import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { LogoutAlertComponent } from './logout-alert.component';\n\ndescribe('LogoutAlertComponent', () => {\n  let component: LogoutAlertComponent;\n  let fixture: ComponentFixture<LogoutAlertComponent>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [LogoutAlertComponent],\n      providers: [\n        { provide: MatDialogRef, useValue: {} }\n      ]\n    })\n    .compileComponents();\n\n    fixture = TestBed.createComponent(LogoutAlertComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  \n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n});\n"
                    }
                },
                {
                    "id": 9,
                    "instruction": "Go to src -> app -> components -> nav-bar and open the \"nav-bar.component.spec.ts\" file. Delete it's contents and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "Angular",
                        "FormatCode": "import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { ActivatedRoute } from '@angular/router';\nimport { NavBarComponent } from './nav-bar.component';\n\ndescribe('NavBarComponent', () => {\n  let component: NavBarComponent;\n  let fixture: ComponentFixture<NavBarComponent>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [NavBarComponent],\n      providers: [\n        {\n          provide: ActivatedRoute,\n          useValue: { snapshot: { paramMap: { get: () => 'mockParam' } } }\n        }\n      ]\n    })\n    .compileComponents();\n\n    fixture = TestBed.createComponent(NavBarComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n});\n",
                        "CopyCode": "import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { ActivatedRoute } from '@angular/router';\nimport { NavBarComponent } from './nav-bar.component';\n\ndescribe('NavBarComponent', () => {\n  let component: NavBarComponent;\n  let fixture: ComponentFixture<NavBarComponent>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [NavBarComponent],\n      providers: [\n        {\n          provide: ActivatedRoute,\n          useValue: { snapshot: { paramMap: { get: () => 'mockParam' } } }\n        }\n      ]\n    })\n    .compileComponents();\n\n    fixture = TestBed.createComponent(NavBarComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n});\n"
                    }
                },
                {
                    "id": 10,
                    "instruction": "Go to src -> app -> views -> main-page and open the \"main-page.component.spec.ts\" file. Delete it's contents and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "Angular",
                        "FormatCode": "import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { MainPageComponent } from './main-page.component';\nimport { provideHttpClient, withInterceptorsFromDi } from '@angular/common/http';\n\ndescribe('MainPageComponent', () => {\n  let component: MainPageComponent;\n  let fixture: ComponentFixture<MainPageComponent>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      providers: [\n        provideHttpClient(withInterceptorsFromDi())\n      ],\n      imports: [MainPageComponent]\n    })\n    .compileComponents();\n\n    fixture = TestBed.createComponent(MainPageComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  \n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n});\n",
                        "CopyCode": "import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { MainPageComponent } from './main-page.component';\nimport { provideHttpClient, withInterceptorsFromDi } from '@angular/common/http';\n\ndescribe('MainPageComponent', () => {\n  let component: MainPageComponent;\n  let fixture: ComponentFixture<MainPageComponent>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      providers: [\n        provideHttpClient(withInterceptorsFromDi())\n      ],\n      imports: [MainPageComponent]\n    })\n    .compileComponents();\n\n    fixture = TestBed.createComponent(MainPageComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  \n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n});\n"
                    }
                },
                {
                    "id": 11,
                    "instruction": "Go to src -> app -> views -> sign-in and open the \"sign-in.component.spec.ts\" file. Delete it's contents and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "Angular",
                        "FormatCode": "import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { SignInComponent } from './sign-in.component';\nimport { provideHttpClient, withInterceptorsFromDi } from '@angular/common/http';\nimport { ActivatedRoute } from '@angular/router';\n\ndescribe('SignInComponent', () => {\n  let component: SignInComponent;\n  let fixture: ComponentFixture<SignInComponent>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      providers: [\n        provideHttpClient(withInterceptorsFromDi()),\n        { provide: ActivatedRoute, useValue: {} }\n      ],\n      imports: [SignInComponent]\n    })\n    .compileComponents();\n\n    fixture = TestBed.createComponent(SignInComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  \n});\n",
                        "CopyCode": "import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { SignInComponent } from './sign-in.component';\nimport { provideHttpClient, withInterceptorsFromDi } from '@angular/common/http';\nimport { ActivatedRoute } from '@angular/router';\n\ndescribe('SignInComponent', () => {\n  let component: SignInComponent;\n  let fixture: ComponentFixture<SignInComponent>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      providers: [\n        provideHttpClient(withInterceptorsFromDi()),\n        { provide: ActivatedRoute, useValue: {} }\n      ],\n      imports: [SignInComponent]\n    })\n    .compileComponents();\n\n    fixture = TestBed.createComponent(SignInComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  \n});\n"
                    }
                },
                {
                    "id": 12,
                    "instruction": "Go to src -> app -> views -> sign-up and open the \"sign-up.component.spec.ts\" file. Delete it's contents and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "Angular",
                        "FormatCode": "import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { SignUpComponent } from './sign-up.component';\nimport { provideHttpClient, withInterceptorsFromDi } from '@angular/common/http';\nimport { ActivatedRoute } from '@angular/router';\n\ndescribe('SignUpComponent', () => {\n  let component: SignUpComponent;\n  let fixture: ComponentFixture<SignUpComponent>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      providers: [\n        provideHttpClient(withInterceptorsFromDi()),\n        { provide: ActivatedRoute, useValue: {} }\n      ],\n      imports: [SignUpComponent]\n    })\n    .compileComponents();\n\n    fixture = TestBed.createComponent(SignUpComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  \n});\n",
                        "CopyCode": "import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { SignUpComponent } from './sign-up.component';\nimport { provideHttpClient, withInterceptorsFromDi } from '@angular/common/http';\nimport { ActivatedRoute } from '@angular/router';\n\ndescribe('SignUpComponent', () => {\n  let component: SignUpComponent;\n  let fixture: ComponentFixture<SignUpComponent>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      providers: [\n        provideHttpClient(withInterceptorsFromDi()),\n        { provide: ActivatedRoute, useValue: {} }\n      ],\n      imports: [SignUpComponent]\n    })\n    .compileComponents();\n\n    fixture = TestBed.createComponent(SignUpComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  \n});\n"
                    }
                },
                {
                    "id": 13,
                    "instruction": "Go to src -> app -> lib and open the \"axios.service.spec.ts\" file. Delete it's contents and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "Angular",
                        "FormatCode": "import { TestBed } from '@angular/core/testing';\nimport { AxiosService } from './axios.service';\nimport { provideHttpClient, withInterceptorsFromDi } from '@angular/common/http';\n\ndescribe('AxiosService', () => {\n  let service: AxiosService;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers: [\n        provideHttpClient(withInterceptorsFromDi())\n      ]\n    });\n    service = TestBed.inject(AxiosService);\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n});\n",
                        "CopyCode": "import { TestBed } from '@angular/core/testing';\nimport { AxiosService } from './axios.service';\nimport { provideHttpClient, withInterceptorsFromDi } from '@angular/common/http';\n\ndescribe('AxiosService', () => {\n  let service: AxiosService;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers: [\n        provideHttpClient(withInterceptorsFromDi())\n      ]\n    });\n    service = TestBed.inject(AxiosService);\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n});\n"
                    }
                },
                {
                    "id": 14,
                    "instruction": "Go to src -> app -> services and open the \"user.service.spec.ts\" file. Delete it's contents and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "Angular",
                        "FormatCode": "import { TestBed } from '@angular/core/testing';\nimport { UserService } from './user.service';\nimport { provideHttpClient, withInterceptorsFromDi } from '@angular/common/http';\n\ndescribe('UserService', () => {\n  let service: UserService;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers: [\n        provideHttpClient(withInterceptorsFromDi())\n      ]\n    });\n    service = TestBed.inject(UserService);\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n  \n});\n",
                        "CopyCode": "import { TestBed } from '@angular/core/testing';\nimport { UserService } from './user.service';\nimport { provideHttpClient, withInterceptorsFromDi } from '@angular/common/http';\n\ndescribe('UserService', () => {\n  let service: UserService;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers: [\n        provideHttpClient(withInterceptorsFromDi())\n      ]\n    });\n    service = TestBed.inject(UserService);\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n  \n});\n"
                    }
                },
                {
                    "id": 15,
                    "instruction": "Go to src -> app -> services and open the \"notes.service.spec.ts\" file. Delete it's contents and paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "JavaScript",
                        "DisplayLang": "Angular",
                        "FormatCode": "import { TestBed } from '@angular/core/testing';\nimport { NotesService } from './notes.service';\nimport { provideHttpClient, withInterceptorsFromDi } from '@angular/common/http';\n\ndescribe('NotesService', () => {\n  let service: NotesService;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers: [\n        provideHttpClient(withInterceptorsFromDi())\n      ]\n    });\n    service = TestBed.inject(NotesService);\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n});\n",
                        "CopyCode": "import { TestBed } from '@angular/core/testing';\nimport { NotesService } from './notes.service';\nimport { provideHttpClient, withInterceptorsFromDi } from '@angular/common/http';\n\ndescribe('NotesService', () => {\n  let service: NotesService;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      providers: [\n        provideHttpClient(withInterceptorsFromDi())\n      ]\n    });\n    service = TestBed.inject(NotesService);\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n});\n"
                    }
                },
                {
                    "id": 16,
                    "instruction": "Run your tests using the following commands. After run the two commands, wait a second and your test results should open in your browser. Your terminal will also show the output. All 21 tests should pass.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Commands",
                        "FormatCode": "cd Angular-Frontend\nng test",
                        "CopyCode": "cd Angular-Frontend\nng test"
                    }
                },
                {
                    "id": 17,
                    "instruction": "After you've confirmed that all 21 tests passed, you can commit your code to Github using the following commands.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Commands",
                        "FormatCode": "cd Angular-Frontend\ngit add .\ngit commit -m \"Added tests\"\ngit push",
                        "CopyCode": "cd Angular-Frontend\ngit add .\ngit commit -m \"Added tests\"\ngit push"
                    }
                },
                {
                    "id": 18,
                    "instruction": "Congratulations! You've added testing to this project."
                }
            ]
        }
    ]
}