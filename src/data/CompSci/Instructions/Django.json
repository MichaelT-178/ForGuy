{
    "MultiSet": [
        {
            "Info": [
                {
                    "title": "How to Make a Complex Rest API using Angular, Django and PostgreSQL",
                    "desc": "Explains the process of setting up an Angular frontend with a Django Rest API backend.",
                    "ref": "django-PostgreSQL"
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "We'll build a full-stack web application step-by-step using Angular, Python, Django, and Postgres."
                },
                {
                    "id": 2,
                    "instruction": "A full video demo of this app can be found on my YouTube channel [here](FILL THIS IN)."
                },
                {
                    "id": 3,
                    "instruction": "Let's get started!"
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "Technologies We'll Use",
                    "desc": "This is the techstack we'll use to make this project"
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "<u><b>Angular</u></b> - The JavaScript Framework we'll use to build our user interface."
                },
                {
                    "id": 2,
                    "instruction": "<u><b>JavaScript</u></b> - The scripting language we'll use to add logic to our frontend."
                },
                {
                    "id": 3,
                    "instruction": "<u><b>Django</u></b> - The Python web framework we'll use to help build our Rest Api."
                },
                {
                    "id": 4,
                    "instruction": "<u><b>Python</u></b> - The programming language we'll use to develop our Rest Api."
                },
                {
                    "id": 5,
                    "instruction": "<u><b>SQL</u></b> - The language we'll use to help build and query our database."
                },
                {
                    "id": 6,
                    "instruction": "<u><b>PostgreSQL</u></b> - The database we'll use to store user information."
                },
                {
                    "id": 7,
                    "instruction": "<u><b>Visual Studio Code</u></b> - The code editor we'll use to help us build our project."
                },
                {
                    "id": 8,
                    "instruction": "<u><b>PyTest</u></b> - The Python testing framework we'll use to test our Rest Api."
                },
                {
                    "id": 9,
                    "instruction": "<u><b>Jasmine</u></b> - The built-in Angular testing framework we'll use to test our frontend code."
                },
                {
                    "id": 10,
                    "instruction": "<u><b>Github</u></b> - The platform we'll use for version control and collaborative software development."
                },
                {
                    "id": 11,
                    "instruction": "<u><b>Git</u></b> - The distributed version control system we'll use to track changes to our projects."
                },
                {
                    "id": 12,
                    "instruction": "<u><b>Homebrew</u></b> - MacOS package manager we'll use to install software. Optional to use."
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "Setup Technologies",
                    "desc": "Explanation of how to setup and verify all technologies."
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "Verify you have visual studio Code installed by running the following command in a terminal. If it outputs a version number you should have it installed.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "code --version",
                        "CopyCode": "code --version"
                    }
                },
                {
                    "id": 2,
                    "instruction": "If you haven't already download Visual Studio Code [Here](https://code.visualstudio.com/download). Download the version that matches your operating system."
                },
                {
                    "id": 3,
                    "instruction": "Verify that you have Homebrew installed on your computer by running this command in your terminal. If it outputs a version you should have it installed.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "brew --version",
                        "CopyCode": "brew --version"
                    }
                },
                {
                    "id": 4,
                    "instruction": "If you don't already have homebrew installed, install it using the following command.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"",
                        "CopyCode": "/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\""
                    }
                },
                {
                    "id": 5,
                    "instruction": "Verify that you have node and npm installed by running the following commands. If they output a version you should be good.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "node -v\nnpm -v",
                        "CopyCode": "node -v\nnpm -v"
                    }
                },
                {
                    "id": 6,
                    "instruction": "If node and npm didn't output a version, download them using homebrew. It's just one command.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "brew install node",
                        "CopyCode": "brew install node"
                    }
                },
                {
                    "id": 7,
                    "instruction": "Verify that you have Python3 installed.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "python3 --version",
                        "CopyCode": "python3 --version"
                    }
                },
                {
                    "id": 8,
                    "instruction": "If you don't have Python3 installed, download it [here](https://www.python.org/downloads/)"
                },
                {
                    "id": 9,
                    "instruction": "Install the following Python libraries",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "pip3 install django\npip3 install pytest\npip3 install pytest-html",
                        "CopyCode": "pip3 install django\npip3 install pytest\npip3 install pytest-html"
                    }
                },
                {
                    "id": 10,
                    "instruction": "Verify you have the Python packages installed by running the following commands. If it doesn't produce a \"WARNING: Package(s) not found\" error, you should be good.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "pip3 show django\npip3 show pytest",
                        "CopyCode": "pip3 show django\npip3 show pytest"
                    }
                },
                {
                    "id": 11,
                    "instruction": "Go to [github.com](https://github.com/) to see if you have an account. If you don't press the \"Sign Up\" button in the top-right and follow the prompts."
                },
                {
                    "id": 12,
                    "instruction": "Verify that git is installed by running the following command in a terminal. If it outputs a version you're good.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "git --version",
                        "CopyCode": "git --version"
                    }
                },
                {
                    "id": 13,
                    "instruction": "If you don't have git setup follow this instruction set (here)[/CompSci/GitHub#createGHAccount]."
                },
                {
                    "id": 14,
                    "instruction": "Verify that you have PostgreSQL installed by running the following command.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "psql --version",
                        "CopyCode": "psql --version"
                    }
                },
                {
                    "id": 15,
                    "instruction": "If the command in step 17 didn't output the version, see the next steps titled \"How to Install PostgreSQL\". Follow the instruction set that corresponds to your operating system."
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "How to Install PostgreSQL",
                    "desc": "Explains how to install PostgreSQL on MacOS."
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "Go [here](https://www.postgresql.org/download/) to see the instructions for how to download PostgreSQL. Press on the card that has the logo of your operating system. For mac you would just install it using the following commands. Make sure to upgrade brew first.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "brew install pkg-config\nbrew upgrade gh\nbrew upgrade\nbrew install postgresql@15",
                        "CopyCode": "brew install pkg-config\nbrew upgrade gh\nbrew upgrade\nbrew install postgresql@15"
                    }
                },
                {
                    "id": 2,
                    "instruction": "If you get an error that says \"error: externally-managed-environment\" when you try to run pip3 after upgrading brew, I'd honestly just recommend downloading the latest version of python [here](https://www.python.org/downloads/). Ignore the suggested fixes."
                },
                {
                    "id": 3,
                    "instruction": "Add PostgreSQL to your PATH",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "echo 'export PATH=\"/usr/local/opt/postgresql@15/bin:$PATH\"' >> ~/.zshrc\nsource ~/.zshrc",
                        "CopyCode": "echo 'export PATH=\"/usr/local/opt/postgresql@15/bin:$PATH\"' >> ~/.zshrc\nsource ~/.zshrc"
                    }
                },
                {
                    "id": 4,
                    "instruction": "Verify that you have PostgreSQL installed by running the following command.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "psql --version",
                        "CopyCode": "psql --version"
                    }
                },
                {
                    "id": 5,
                    "instruction": "If step 21 didn't work your path might be wrong. Run the following command and look for the echo command in the output.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "brew reinstall postgresql@15",
                        "CopyCode": "brew reinstall postgresql@15"
                    }
                },
                {
                    "id": 6,
                    "instruction": "If step 21 didn't work, open your ~/.zshrc file by running the following command and then delete the old path. Then press control + o, return/enter, control + x to save your changes",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "nano ~/.zshrc",
                        "CopyCode": "nano ~/.zshrc"
                    }
                },
                {
                    "id": 7,
                    "instruction": "If step 21 didn't work, run the following command to source your file. Then check that psql is installed.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "source ~/.zshrc\npsql --version",
                        "CopyCode": "source ~/.zshrc\npsql --version"
                    }
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "Design Your Database Schema",
                    "desc": "The first thing we'll do is design our database ER and Schema diagrams."
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "We'll be creating a notes app. We'll have users that each have their own set of notes. Each note will have it's individual attributes."
                },
                {
                    "id": 2,
                    "instruction": "To design our diagrams we'll use [erdplus.com](https://erdplus.com/). We used this tool in CSC 455 (now CSC 355) so you should be able to login using your UNCW credentials. Go to the \"Documents\" tab to create your diagram."
                },
                {
                    "id": 3,
                    "instruction": "This will be our &Schema Diagram&(/download/NotesSchema.png). Go to the \"Documents\" tab to create your diagram. Then name your diagram and select \"Relational Schema\". When you finished press \"Menu\" in the top-left. Select \"High Resolution (4x normal size)\" and then press Save. NOTE: I'm not 100% sure if this diagram is completely accurate."
                },
                {
                    "id": 4,
                    "instruction": "This will be our &ER Diagram&(/download/NotesSchema.png). Go to the \"Documents\" tab to create your diagram. Then name your diagram and select \"ER Diagram\". When you finished press \"Menu\" in the top-left. Select \"High Resolution (4x normal size)\" and then press Save. NOTE: I'm not 100% sure if this diagram is completely accurate."
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "Setup PostgreSQL Database",
                    "desc": "We'll Setup our PostgreSQL database for our project on MacOS."
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "Each user in your group will have to setup PostgreSQL on their own computer."
                },
                {
                    "id": 2,
                    "instruction": "Make sure every user has Postgres installed using the following command to confirm it's installed. If they don't have it installed, follow instructions in the \"How to Install PostgreSQL\" section",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "psql --version",
                        "CopyCode": "psql --version"
                    }
                },
                {
                    "id": 3,
                    "instruction": "Now you'll start your Postgres server. First list your brew services. If the status of Postgres is \"None\" than means your server is NOT running. Copy and record the name of your postgresql database. Mine was \"postgresql@15\".",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "brew services list",
                        "CopyCode": "brew services list"
                    }
                },
                {
                    "id": 4,
                    "instruction": "If your server isn't running, start it using the following command. Replace \"postgresql@15\" with the name from the previous command if it's different.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "brew services start postgresql@15",
                        "CopyCode": "brew services start postgresql@15"
                    }
                },
                {
                    "id": 5,
                    "instruction": "Initialize the database cluster using the following command.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "initdb /usr/local/var/postgres",
                        "CopyCode": "initdb /usr/local/var/postgres"
                    }
                },
                {
                    "id": 6,
                    "instruction": "Run the following command to confirm your cluster started. If the \"status\" says running you should be good.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "brew services list",
                        "CopyCode": "brew services list"
                    }
                },
                {
                    "id": 7,
                    "instruction": "Login as superuser. You don't have to change any part of the command.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "psql -U $(whoami) -d postgres",
                        "CopyCode": "psql -U $(whoami) -d postgres"
                    }
                },
                {
                    "id": 8,
                    "instruction": "Run the following command to see your username.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customsql",
                        "DisplayLang": "SQL",
                        "FormatCode": "SELECT current_user;",
                        "CopyCode": "SELECT current_user;"
                    }
                },
                {
                    "id": 9,
                    "instruction": "Run the following command to your list of roles and permissions. Press 'q' to exit.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "\\du",
                        "CopyCode": "\\du"
                    }
                },
                {
                    "id": 10,
                    "instruction": "Create your databases. There will be a production database and a test database. Press 'q' to exit.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customsql",
                        "DisplayLang": "SQL",
                        "FormatCode": "CREATE DATABASE notesapp_db;\nCREATE DATABASE notesapp_test_db;",
                        "CopyCode": "CREATE DATABASE notesapp_db;\nCREATE DATABASE notesapp_test_db;"
                    }
                },
                {
                    "id": 11,
                    "instruction": "List your current databases. You should see \"notesapp_db\" and \"notesapp_test_db\" in the table.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "\\l",
                        "CopyCode": "\\l"
                    }
                },
                {
                    "id": 12,
                    "instruction": "Now create your users. You will have a super user named \"postgres\" and a regular user and test user. You can change the usernames and passwords as you wish.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customsql",
                        "DisplayLang": "SQL",
                        "FormatCode": "CREATE ROLE postgres WITH SUPERUSER CREATEDB CREATEROLE LOGIN PASSWORD 'notes_super_password_123';\nCREATE ROLE notes_app_user WITH SUPERUSER CREATEDB CREATEROLE LOGIN PASSWORD 'notes_team_user_123';\nCREATE ROLE notes_app_test_user WITH SUPERUSER CREATEDB CREATEROLE LOGIN PASSWORD 'notes_test_user1';",
                        "CopyCode": "CREATE ROLE postgres WITH SUPERUSER CREATEDB CREATEROLE LOGIN PASSWORD 'notes_super_password_123';\nCREATE ROLE notes_app_user WITH SUPERUSER CREATEDB CREATEROLE LOGIN PASSWORD 'notes_team_user_123';\nCREATE ROLE notes_app_test_user WITH SUPERUSER CREATEDB CREATEROLE LOGIN PASSWORD 'notes_test_user1';"
                    }
                },
                {
                    "id": 13,
                    "instruction": "Now run the following command. You should see your new user in your database.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "\\du",
                        "CopyCode": "\\du"
                    }
                },
                {
                    "id": 14,
                    "instruction": "Now exit your Postgres session.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "exit",
                        "CopyCode": "exit"
                    }
                },
                {
                    "id": 15,
                    "instruction": "Now test that your URI is working. This isn't a command but this is what it should look like.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "Link",
                        "FormatCode": "postgresql://notes_app_user:notes_team_user_123@localhost/notesapp_test_db",
                        "CopyCode": "postgresql://notes_app_user:notes_team_user_123@localhost/notesapp_test_db"
                    }
                },
                {
                    "id": 16,
                    "instruction": "Now run the following command in your terminal to test your endpoint.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "psql postgresql://notes_app_user:notes_team_user_123@localhost/notesapp_db -c \"SELECT * FROM Users;\"",
                        "CopyCode": "psql postgresql://notes_app_user:notes_team_user_123@localhost/notesapp_db -c \"SELECT * FROM Users;\""
                    }
                },
                {
                    "id": 17,
                    "instruction": "Now ping your test database.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "psql postgresql://notes_app_test_user:notes_test_user1@localhost/notesapp_test_db -c \"SELECT * FROM Users;\"",
                        "CopyCode": "psql postgresql://notes_app_test_user:notes_test_user1@localhost/notesapp_test_db -c \"SELECT * FROM Users;\""
                    }
                },
                {
                    "id": 18,
                    "instruction": "Again make sure every member of your group does this instruction set."
                },
                {
                    "id": 19,
                    "instruction": "To recap, this is how you sign into your database",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "psql -U postgres",
                        "CopyCode": "psql -U postgres"
                    }
                },
                {
                    "id": 20,
                    "instruction": "This is how you sign into your regular database",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "\\c notesapp_db notes_app_user",
                        "CopyCode": "\\c notesapp_db notes_app_user"
                    }
                },
                {
                    "id": 21,
                    "instruction": "This is how you sign into your test database",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "\\c notesapp_test_db notes_app_test_user",
                        "CopyCode": "\\c notesapp_test_db notes_app_test_user"
                    }
                },
                {
                    "id": 22,
                    "instruction": "See all values in a table. Remember the colon at the end.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "customsql",
                        "DisplayLang": "SQL",
                        "FormatCode": "SELECT * FROM Users;",
                        "CopyCode": "SELECT * FROM Users;"
                    }
                },
                {
                    "id": 23,
                    "instruction": "These are commonly used PostgreSQL commands.",
                    "Table": [
                        {
                            "Command": "\\dt",
                            "Description": "List all tables",
                            "Example": "\\dt"
                        },
                        {
                            "Command": "\\q",
                            "Description": "Quit/exit your database",
                            "Example": "\\q"
                        },
                        {
                            "Command": "\\du",
                            "Description": "list all users and roles",
                            "Example": "\\du"
                        },
                        {
                            "Command": "\\l",
                            "Description": "list all your databases",
                            "Example": "\\l"
                        }
                    ]
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "Setup your Git Repositories",
                    "desc": "Setup Your GitHub Repositories"
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "First make sure everyone in your group has a git setup on their computer. Also make sure everyone has a GitHub account.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "git --version",
                        "CopyCode": "git --version"
                    }
                },
                {
                    "id": 2,
                    "instruction": "If you don't have GitHub setup, go (here)[/CompSci/GitHub#createGHAccount] for instructions."
                },
                {
                    "id": 3,
                    "instruction": "Go to [github.com](https://github.com/) and sign in. Then click on the green \"New\" button. In the \"Create a new repository\" form enter the following values.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "Values",
                        "FormatCode": "Repository name: Notes-Rest-Api\nDescription: Notes-Rest-Api using Flask and Postgres.\n\n* Do NOT check \\\"Add a README file\\\" *\n\n* Press the green \\\"Create repository\\\" button *\n",
                        "CopyCode": "Repository name: Notes-Rest-Api\nDescription: Notes-Rest-Api using Flask and Postgres.\n\n* Do NOT check \\\"Add a README file\\\" *\n\n* Press the green \\\"Create repository\\\" button *\n"
                    }
                },
                {
                    "id": 4,
                    "instruction": "You should be taken to a new page. In the \"Quick setup — if you've done this kind of thing before\" section you should see the https link. Copy and record this link. Then go to your terminal and run the following command.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "git clone YOUR-HTTPS-LINK",
                        "CopyCode": "git clone YOUR-HTTPS-LINK"
                    }
                },
                {
                    "id": 5,
                    "instruction": "After you've done that go back to [github.com](https://github.com/). Click the green \"New\" button. In the \"Create a new repository\" form enter the following values.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "Values",
                        "FormatCode": "Repository name: Notes-Frontend\nDescription: Notes app frontend that uses vue.\n\n* Do NOT check \\\"Add a README file\\\" *\n\n* Press the green \\\"Create repository\\\" button *",
                        "CopyCode": "Repository name: Notes-Frontend\nDescription: Notes app frontend that uses vue.\n\n* Do NOT check \\\"Add a README file\\\" *\n\n* Press the green \\\"Create repository\\\" button *"
                    }
                },
                {
                    "id": 6,
                    "instruction": "You should be taken to a new page. In the \"Quick setup — if you've done this kind of thing before\" section you should see the https link. Copy and record this link. Then go to your terminal and run the following command.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "git clone YOUR-HTTPS-LINK",
                        "CopyCode": "git clone YOUR-HTTPS-LINK"
                    }
                },
                {
                    "id": 7,
                    "instruction": "Now just add a readme file to both folders and push your changes as a test.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Notes-Rest-Api\ntouch README.md\ngit add .\ngit commit -m \"Added Readme\"\ngit push",
                        "CopyCode": "cd Notes-Rest-Api\ntouch README.md\ngit add .\ngit commit -m \"Added Readme\"\ngit push"
                    }
                },
                {
                    "id": 8,
                    "instruction": "Now do the same for the frontend folder.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Notes-Frontend\ntouch README.md\ngit add .\ngit commit -m \"Added Readme\"\ngit push",
                        "CopyCode": "cd Notes-Frontend\ntouch README.md\ngit add .\ngit commit -m \"Added Readme\"\ngit push"
                    }
                },
                {
                    "id": 9,
                    "instruction": "If steps 7 and 8 worked, you should be good."
                },
                {
                    "id": 10,
                    "instruction": "Now go back to [github.com](https://github.com/) and open your \"Notes-Rest-Api\" repository. You're going to add your team-members as collaborators."
                },
                {
                    "id": 11,
                    "instruction": "Click on the \"Settings\" tab on the right with the gear icon next to it."
                },
                {
                    "id": 12,
                    "instruction": "On the left-hand bar press on \"Collaborators\". Then press the green \"Add people\" tab. In the search bar look up the Github usernames of each of your team members. After you find them press the green \"Add *username* to this repository\"."
                },
                {
                    "id": 13,
                    "instruction": "After you send the invite tell your team members to check their email. Press the \"View invitation\" link in the email, then accept on GitHub."
                },
                {
                    "id": 14,
                    "instruction": "Add them for both your Rest api and frontend repositories."
                },
                {
                    "id": 15,
                    "instruction": "After that you should be good"
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "Django Rest API Folder Setup Explanation",
                    "desc": "Explains the purpose of the various folders and what code they should contain."
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "<u><b>api/errors</u></b> - Where the custom exceptions for your project will be kept."
                },
                {
                    "id": 2,
                    "instruction": "<u><b>api/models</u></b> - Python classes that represent the objects in your database."
                },
                {
                    "id": 3,
                    "instruction": "<u><b>api/repositories</u></b> - All functions that will be used to query and \"talk to\" your database. These should just be your simple sql queries. Your business logic will be applied in the \"services\" folder."
                },
                {
                    "id": 4,
                    "instruction": "<u><b>api/routes</u></b> - Where your endpoints will be stored. All data returned from this Rest API will happen in this folder. The logic and functions you use to \"talk to\" your database should be in your \"services\" and \"repositories\" folder. Keep your endpoint functions short and clean."
                },
                {
                    "id": 5,
                    "instruction": "<u><b>api/schemas</u></b> - Serializes and deserializes JSON data using the python \"Marshmellow\" library. Basically it will take a JSON object response and convert it into a Python model object. It will also do the opposite and convert a Python model object into a JSON object."
                },
                {
                    "id": 6,
                    "instruction": "<u><b>api/services</u></b> - Functions that use your repository functions to create business logic in your application."
                },
                {
                    "id": 7,
                    "instruction": "<u><b>api/utils</u></b> - Common functions that are reused in various parts of your Rest API."
                },
                {
                    "id": 8,
                    "instruction": "<u><b>tests/db_testing</u></b> - Where you'll test your database connection."
                },
                {
                    "id": 9,
                    "instruction": "<u><b>tests/endpoint_testing</u></b> - Test your endpoints."
                },
                {
                    "id": 10,
                    "instruction": "<u><b>tests/services_testing</u></b> - Test your service functions."
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "Create your Flask Rest API",
                    "desc": "Explains how to create your Flask Rest API and connect it to your PostgreSQL database."
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "Change into your Notes-Rest-Api folder and create the following folders and files. The [Git Repository](https://github.com/MichaelT-W23/Notes-Rest-Api) for this code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Notes-Rest-Api\n\nmkdir api\nmkdir api/errors\nmkdir api/models\nmkdir api/repositories\nmkdir api/routes\nmkdir api/schemas\nmkdir api/services\nmkdir api/utils\n\nmkdir tests\nmkdir tests/db_testing\nmkdir tests/endpoint_testing\nmkdir tests/services_testing\n\ncd api\ntouch errors/custom_exceptions.py\ntouch models/db_models.py\ntouch repositories/note_repository.py\ntouch repositories/user_repository.py\ntouch routes/endpoints.py\ntouch schemas/user_schema.py\ntouch services/note_service.py\ntouch services/user_service.py\ntouch utils/note_verification.py\n\ncd ../tests\ntouch conftest.py\ntouch endpoint_testing/test_note_endpoints.py\ntouch endpoint_testing/test_user_endpoints.py\ntouch services_testing/test_services.py\ntouch db_testing/test_db_connection.py\n\ncd ..\ntouch .gitignore\ntouch app.py \ntouch db.py\ntouch config.py",
                        "CopyCode": "cd Notes-Rest-Api\n\nmkdir api\nmkdir api/errors\nmkdir api/models\nmkdir api/repositories\nmkdir api/routes\nmkdir api/schemas\nmkdir api/services\nmkdir api/utils\n\nmkdir tests\nmkdir tests/db_testing\nmkdir tests/endpoint_testing\nmkdir tests/services_testing\n\ncd api\ntouch errors/custom_exceptions.py\ntouch models/db_models.py\ntouch repositories/note_repository.py\ntouch repositories/user_repository.py\ntouch routes/endpoints.py\ntouch schemas/user_schema.py\ntouch services/note_service.py\ntouch services/user_service.py\ntouch utils/note_verification.py\n\ncd ../tests\ntouch conftest.py\ntouch endpoint_testing/test_note_endpoints.py\ntouch endpoint_testing/test_user_endpoints.py\ntouch services_testing/test_services.py\ntouch db_testing/test_db_connection.py\n\ncd ..\ntouch .gitignore\ntouch app.py \ntouch db.py\ntouch config.py"
                    }
                },
                {
                    "id": 2,
                    "instruction": "Push your folder structure to GitHub.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "git add .\ngit commit -m \"Setup Structure\"\ngit push",
                        "CopyCode": "git add .\ngit commit -m \"Setup Structure\"\ngit push"
                    }
                },
                {
                    "id": 3,
                    "instruction": "Now create a .env file in your folder.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Notes-Rest-Api\ntouch .env",
                        "CopyCode": "cd Notes-Rest-Api\ntouch .env"
                    }
                },
                {
                    "id": 4,
                    "instruction": "If you initially created a .env file in your first commit, run the following commands so that git won't track it. If you didn't commit a .env file in your first commit, ignore this step.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "git rm .env --cached\ngit commit -m \"Stopped tracking .env File\"\ngit push",
                        "CopyCode": "git rm .env --cached\ngit commit -m \"Stopped tracking .env File\"\ngit push"
                    }
                },
                {
                    "id": 5,
                    "instruction": "Open the \".gitignore\" file in the top-most directory. Paste in the following values.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": ".gitignore values",
                        "FormatCode": ".env",
                        "CopyCode": ".env"
                    }
                },
                {
                    "id": 6,
                    "instruction": "Now open the \".env\" file. Paste in the following values.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "fxml",
                        "DisplayLang": "Env",
                        "FormatCode": "FLASK_ENV=development\n\nDEV_DATABASE_URI=postgresql://notes_app_user:notes_team_user_123@localhost/notesapp_db\n\nTEST_DATABASE_URI=postgresql://notes_app_test_user:notes_test_user1@localhost/notesapp_test_db\n\nPROD_DATABASE_URI=SETUP_THIS_UP_LATER",
                        "CopyCode": "FLASK_ENV=development\n\nDEV_DATABASE_URI=postgresql://notes_app_user:notes_team_user_123@localhost/notesapp_db\n\nTEST_DATABASE_URI=postgresql://notes_app_test_user:notes_test_user1@localhost/notesapp_test_db\n\nPROD_DATABASE_URI=SETUP_THIS_UP_LATER"
                    }
                },
                {
                    "id": 7,
                    "instruction": "Create and start a virtualenv.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Notes-Rest-Api\npip3 install virtualenv\nvirtualenv venv\nsource venv/bin/activate",
                        "CopyCode": "cd Notes-Rest-Api\npip3 install virtualenv\nvirtualenv venv\nsource venv/bin/activate"
                    }
                },
                {
                    "id": 8,
                    "instruction": "Install the necessary libraries. Make sure you've activated your venv in the last step.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "pip3 install Flask\npip3 install Flask-SQLAlchemy\npip3 install Flask-CORS\npip3 install python-dotenv\npip3 install marshmallow\npip3 install marshmallow-sqlalchemy\npip3 install psycopg2\npip3 install psycopg2-binary\npip3 install werkzeug\npip3 install pytest \npip3 install pytest-flask\npip3 install pytest-order\npip3 install pytest-html\n",
                        "CopyCode": "pip3 install Flask\npip3 install Flask-SQLAlchemy\npip3 install Flask-CORS\npip3 install python-dotenv\npip3 install marshmallow\npip3 install marshmallow-sqlalchemy\npip3 install psycopg2\npip3 install psycopg2-binary\npip3 install werkzeug\npip3 install pytest \npip3 install pytest-flask\npip3 install pytest-order\npip3 install pytest-html\n"
                    }
                },
                {
                    "id": 9,
                    "instruction": "Go to your \"app.py\" file. Paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "import os\nfrom flask import Flask\nfrom flask_cors import CORS\nfrom api.routes.endpoints import routes_blueprint\nfrom db import db, init_app\n\ndef create_app(config=None):\n    app = Flask(__name__)\n\n    if config is None:\n        config = os.getenv(\"FLASK_ENV\")\n\n    if config == \"development\":\n        app.config.from_object(\"config.DevelopmentConfig\")\n    elif config == \"testing\":\n        app.config.from_object(\"config.TestingConfig\")\n    else:\n        app.config.from_object(\"config.ProductionConfig\")\n\n    CORS(app, resources={r'/*': {'origins': '*'}})\n\n    db.init_app(app)\n\n    app.register_blueprint(routes_blueprint)\n    return app\n\n\nif __name__ == '__main__':\n    app = create_app()\n    app.run()",
                        "CopyCode": "import os\nfrom flask import Flask\nfrom flask_cors import CORS\nfrom api.routes.endpoints import routes_blueprint\nfrom db import db, init_app\n\ndef create_app(config=None):\n    app = Flask(__name__)\n\n    if config is None:\n        config = os.getenv(\"FLASK_ENV\")\n\n    if config == \"development\":\n        app.config.from_object(\"config.DevelopmentConfig\")\n    elif config == \"testing\":\n        app.config.from_object(\"config.TestingConfig\")\n    else:\n        app.config.from_object(\"config.ProductionConfig\")\n\n    CORS(app, resources={r'/*': {'origins': '*'}})\n\n    db.init_app(app)\n\n    app.register_blueprint(routes_blueprint)\n    return app\n\n\nif __name__ == '__main__':\n    app = create_app()\n    app.run()"
                    }
                },
                {
                    "id": 10,
                    "instruction": "Go to your \"config.py\" file. Paste in the following code.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "import os\n\nclass Config(object):\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n    DEBUG = False\n\n\nclass DevelopmentConfig(Config):\n    DEBUG = True\n    SQLALCHEMY_DATABASE_URI = os.getenv('DEV_DATABASE_URI')\n\n\nclass TestingConfig(Config):\n    DEBUG = True\n    TESTING = True\n\n    SQLALCHEMY_DATABASE_URI = os.getenv('TEST_DATABASE_URI')\n    PRESERVE_CONTEXT_ON_EXCEPTION = False\n\n\nclass ProductionConfig(Config):\n    DEBUG = False\n    SQLALCHEMY_DATABASE_URI = os.getenv('PROD_DATABASE_URI')",
                        "CopyCode": "import os\n\nclass Config(object):\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n    DEBUG = False\n\n\nclass DevelopmentConfig(Config):\n    DEBUG = True\n    SQLALCHEMY_DATABASE_URI = os.getenv('DEV_DATABASE_URI')\n\n\nclass TestingConfig(Config):\n    DEBUG = True\n    TESTING = True\n\n    SQLALCHEMY_DATABASE_URI = os.getenv('TEST_DATABASE_URI')\n    PRESERVE_CONTEXT_ON_EXCEPTION = False\n\n\nclass ProductionConfig(Config):\n    DEBUG = False\n    SQLALCHEMY_DATABASE_URI = os.getenv('PROD_DATABASE_URI')"
                    }
                },
                {
                    "id": 11,
                    "instruction": "Go to your \"db.py\" file. Paste in the following code. ",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "from flask_sqlalchemy import SQLAlchemy \n\ndb = SQLAlchemy()\n\ndef init_app(app):\n    db.init_app(app)",
                        "CopyCode": "from flask_sqlalchemy import SQLAlchemy \n\ndb = SQLAlchemy()\n\ndef init_app(app):\n    db.init_app(app)"
                    }
                },
                {
                    "id": 12,
                    "instruction": "Now go to your api folder. In \"errors\" paste the following code into the \"custom_exceptions.py\" file.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "class NoNotesFoundError(Exception):\n\n    def __init__(self, message=\"No Notes found\"):\n        self.message = message\n        super().__init__(self.message)\n\n\nclass InvalidCredentialsError(Exception):\n    \n    def __init__(self, message=\"Invalid username or password\"):\n        self.message = message\n        super().__init__(self.message)",
                        "CopyCode": "class NoNotesFoundError(Exception):\n\n    def __init__(self, message=\"No Notes found\"):\n        self.message = message\n        super().__init__(self.message)\n\n\nclass InvalidCredentialsError(Exception):\n    \n    def __init__(self, message=\"Invalid username or password\"):\n        self.message = message\n        super().__init__(self.message)"
                    }
                },
                {
                    "id": 13,
                    "instruction": "In the \"models\" folder paste the following code into the \"db_models.py\" file.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "from sqlalchemy import Column, ForeignKey, func\nfrom sqlalchemy.orm import relationship, Mapped, mapped_column\nfrom datetime import datetime\nfrom db import db\n\n# Association table for the many-to-many relationship between Notes and Tags\nnote_tags_association_table = db.Table(\n    'note_tags', db.Model.metadata,\n    Column('note_id', db.Integer, ForeignKey('notes.note_id', ondelete='CASCADE'), primary_key=True),\n    Column('tag_id', db.Integer, ForeignKey('tags.tag_id', ondelete='CASCADE'), primary_key=True)\n)\n\n\nclass User(db.Model):\n    \"\"\"\n    User model for the database interactions.\n    \"\"\"\n    __tablename__ = 'users'\n\n    user_id: Mapped[int] = mapped_column(db.Integer, primary_key=True)\n    username: Mapped[str] = mapped_column(db.String(80), unique=True, nullable=False)\n    email: Mapped[str] = mapped_column(db.String(120), unique=True, nullable=False)\n    password_hash: Mapped[str] = mapped_column(db.String(255), nullable=False)\n    created_at: Mapped[datetime] = mapped_column(db.DateTime, nullable=False, default=func.now())\n\n    # One-to-many relationship with Note model\n    notes = relationship('Note', back_populates='user', cascade=\"all, delete-orphan\")\n\n    def to_dict(self):\n        \"\"\"Convert the user object to a dictionary, excluding sensitive data.\"\"\"\n        return {\n            \"user_id\": self.user_id,\n            \"username\": self.username,\n            \"email\": self.email,\n            \"created_at\": self.created_at.isoformat()\n        }\n\n\nclass Note(db.Model):\n    \"\"\"\n    Note model for the database interactions.\n    \"\"\"\n    __tablename__ = 'notes'\n\n    note_id: Mapped[int] = mapped_column(db.Integer, primary_key=True)\n    title: Mapped[str] = mapped_column(db.String(200))\n    content: Mapped[str] = mapped_column(db.Text)\n    created_at: Mapped[datetime] = mapped_column(db.DateTime, default=func.now())\n    updated_at: Mapped[datetime] = mapped_column(db.DateTime, default=func.now(), onupdate=func.now())\n    user_id: Mapped[int] = mapped_column(db.Integer, ForeignKey('users.user_id', ondelete='CASCADE'), nullable=False)\n\n    # Many-to-one relationship with User model\n    user = relationship('User', back_populates='notes')\n\n    # Many-to-many relationship with Tag model using note_tags_association_table\n    tags = relationship('Tag', secondary=note_tags_association_table, back_populates='notes')\n\n    def to_dict(self):\n        return {\n            \"note_id\": self.note_id,\n            \"title\": self.title,\n            \"content\": self.content,\n            \"created_at\": self.created_at.isoformat(),\n            \"updated_at\": self.updated_at.isoformat(),\n            \"user_id\": self.user_id,\n            \"tags\": [tag.to_dict() for tag in self.tags]\n        }\n\n\nclass Tag(db.Model):\n    __tablename__ = 'tags'\n\n    tag_id: Mapped[int] = mapped_column(db.Integer, primary_key=True)\n    name: Mapped[str] = mapped_column(db.String(50), unique=True, nullable=False)\n\n    # Many-to-many relationship with Note model using note_tags_association_table\n    notes = relationship('Note', secondary=note_tags_association_table, back_populates='tags')\n\n    def to_dict(self):\n        return {\n            \"tag_id\": self.tag_id,\n            \"name\": self.name,\n            \"notes\": [note.note_id for note in self.notes]\n        }\n",
                        "CopyCode": "from sqlalchemy import Column, ForeignKey, func\nfrom sqlalchemy.orm import relationship, Mapped, mapped_column\nfrom datetime import datetime\nfrom db import db\n\n# Association table for the many-to-many relationship between Notes and Tags\nnote_tags_association_table = db.Table(\n    'note_tags', db.Model.metadata,\n    Column('note_id', db.Integer, ForeignKey('notes.note_id', ondelete='CASCADE'), primary_key=True),\n    Column('tag_id', db.Integer, ForeignKey('tags.tag_id', ondelete='CASCADE'), primary_key=True)\n)\n\n\nclass User(db.Model):\n    \"\"\"\n    User model for the database interactions.\n    \"\"\"\n    __tablename__ = 'users'\n\n    user_id: Mapped[int] = mapped_column(db.Integer, primary_key=True)\n    username: Mapped[str] = mapped_column(db.String(80), unique=True, nullable=False)\n    email: Mapped[str] = mapped_column(db.String(120), unique=True, nullable=False)\n    password_hash: Mapped[str] = mapped_column(db.String(255), nullable=False)\n    created_at: Mapped[datetime] = mapped_column(db.DateTime, nullable=False, default=func.now())\n\n    # One-to-many relationship with Note model\n    notes = relationship('Note', back_populates='user', cascade=\"all, delete-orphan\")\n\n    def to_dict(self):\n        \"\"\"Convert the user object to a dictionary, excluding sensitive data.\"\"\"\n        return {\n            \"user_id\": self.user_id,\n            \"username\": self.username,\n            \"email\": self.email,\n            \"created_at\": self.created_at.isoformat()\n        }\n\n\nclass Note(db.Model):\n    \"\"\"\n    Note model for the database interactions.\n    \"\"\"\n    __tablename__ = 'notes'\n\n    note_id: Mapped[int] = mapped_column(db.Integer, primary_key=True)\n    title: Mapped[str] = mapped_column(db.String(200))\n    content: Mapped[str] = mapped_column(db.Text)\n    created_at: Mapped[datetime] = mapped_column(db.DateTime, default=func.now())\n    updated_at: Mapped[datetime] = mapped_column(db.DateTime, default=func.now(), onupdate=func.now())\n    user_id: Mapped[int] = mapped_column(db.Integer, ForeignKey('users.user_id', ondelete='CASCADE'), nullable=False)\n\n    # Many-to-one relationship with User model\n    user = relationship('User', back_populates='notes')\n\n    # Many-to-many relationship with Tag model using note_tags_association_table\n    tags = relationship('Tag', secondary=note_tags_association_table, back_populates='notes')\n\n    def to_dict(self):\n        return {\n            \"note_id\": self.note_id,\n            \"title\": self.title,\n            \"content\": self.content,\n            \"created_at\": self.created_at.isoformat(),\n            \"updated_at\": self.updated_at.isoformat(),\n            \"user_id\": self.user_id,\n            \"tags\": [tag.to_dict() for tag in self.tags]\n        }\n\n\nclass Tag(db.Model):\n    __tablename__ = 'tags'\n\n    tag_id: Mapped[int] = mapped_column(db.Integer, primary_key=True)\n    name: Mapped[str] = mapped_column(db.String(50), unique=True, nullable=False)\n\n    # Many-to-many relationship with Note model using note_tags_association_table\n    notes = relationship('Note', secondary=note_tags_association_table, back_populates='tags')\n\n    def to_dict(self):\n        return {\n            \"tag_id\": self.tag_id,\n            \"name\": self.name,\n            \"notes\": [note.note_id for note in self.notes]\n        }\n"
                    }
                },
                {
                    "id": 14,
                    "instruction": "In the \"repositories\" folder paste the following code into the \"note_repository.py\" file.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "from api.models.db_models import Note, Tag\n\ndef get_notes_by_user(user_id: int) -> list:\n    return Note.query.filter_by(user_id=user_id).all()\n\ndef get_notes_by_tag(tag_name: str) -> list:\n    tag = Tag.query.filter_by(name=tag_name).first()\n    if tag:\n        return tag.notes\n    return []",
                        "CopyCode": "from api.models.db_models import Note, Tag\n\ndef get_notes_by_user(user_id: int) -> list:\n    return Note.query.filter_by(user_id=user_id).all()\n\ndef get_notes_by_tag(tag_name: str) -> list:\n    tag = Tag.query.filter_by(name=tag_name).first()\n    if tag:\n        return tag.notes\n    return []"
                    }
                },
                {
                    "id": 15,
                    "instruction": "In the \"repositories\" folder paste the following code into the \"user_repository.py\" file.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "from api.models.db_models import User\nfrom db import db\n\ndef create_user(username: str, email: str, password_hash: str) -> User:\n    new_user = User(username=username, email=email, password_hash=password_hash)\n    db.session.add(new_user)\n    db.session.commit()\n    return new_user\n\ndef get_user_by_username(username: str) -> User:\n    return User.query.filter_by(username=username).first()\n\ndef get_all_db_users():\n    try:\n        users = User.query.all()\n        return [user.to_dict() for user in users]\n    except Exception as e:\n        db.session.rollback()\n        raise e",
                        "CopyCode": "from api.models.db_models import User\nfrom db import db\n\ndef create_user(username: str, email: str, password_hash: str) -> User:\n    new_user = User(username=username, email=email, password_hash=password_hash)\n    db.session.add(new_user)\n    db.session.commit()\n    return new_user\n\ndef get_user_by_username(username: str) -> User:\n    return User.query.filter_by(username=username).first()\n\ndef get_all_db_users():\n    try:\n        users = User.query.all()\n        return [user.to_dict() for user in users]\n    except Exception as e:\n        db.session.rollback()\n        raise e"
                    }
                },
                {
                    "id": 16,
                    "instruction": "In the \"routes\" folder paste the following code into the \"endpoints.py\" file.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "from flask import Blueprint, jsonify, request\nfrom api.repositories.user_repository import get_all_db_users\nfrom sqlalchemy import text\n\nfrom api.schemas.user_schema import UserLoginSchema, UserSchema\nfrom api.services.note_service import fetch_notes_by_tag, fetch_notes_by_user, get_all_tags_from_users_notes\nfrom api.services.user_service import add_user, sign_in_user, get_user\nfrom db import db\n\n\nroutes_blueprint = Blueprint('routes', __name__)\n\n@routes_blueprint.route('/', methods=['GET'])\ndef homePage():\n    return jsonify('Returned from your Rest API!!!')\n\n\n@routes_blueprint.route('/test_connection')\ndef test_connection():\n    try:\n        db.session.execute(text('SELECT 1'))\n        db_uri = db.engine.url\n        \n        return f'Connection successful! Database URI: {db_uri}'\n    except Exception as e:\n        return f'Error: {str(e)}'\n    \n\n@routes_blueprint.route('/get_users', methods=['GET'])\ndef get_all_users():\n    try:\n        users_list = get_all_db_users()\n        return jsonify(users_list), 200\n    except Exception as e:\n        return jsonify({\"error\": str(e)}), 500\n\n\n@routes_blueprint.route('/users', methods=['POST'])\ndef register_user():\n    try:\n        user_data = UserSchema().load(request.json)\n\n        user = add_user(user_data['username'], user_data['email'], user_data['password'])\n\n        if 'error' in user:\n            return jsonify(user), 400\n\n        return jsonify(user), 201\n    except Exception as e:\n        return jsonify({\"error\": str(e)}), 500\n    \n\n@routes_blueprint.route('/users/login', methods=['POST'])\ndef login_user():\n    try:\n\n        login_data = UserLoginSchema().load(request.json)\n\n        user = sign_in_user(login_data['username'], login_data['password'])\n\n        if 'error' in user:\n            return jsonify(user), 400\n\n        return jsonify(user), 200\n    except Exception as e:\n        return jsonify({\"error\": str(e)}), 500\n    \n\n@routes_blueprint.route('/users/<int:user_id>/notes', methods=['GET'])\ndef get_notes_by_user(user_id):\n    try:\n        notes = fetch_notes_by_user(user_id)\n        return jsonify(notes), 200\n    except Exception as e:\n        return jsonify({\"error\": str(e)}), 500\n\n\n@routes_blueprint.route('/notes/tag/<string:tag_name>', methods=['GET'])\ndef get_notes_by_tag(tag_name):\n    try:\n        notes = fetch_notes_by_tag(tag_name)\n        return jsonify(notes), 200\n    except Exception as e:\n        return jsonify({\"error\": str(e)}), 500\n\n\n@routes_blueprint.route('/users/<int:user_id>/tags', methods=['GET'])\ndef get_all_tags(user_id):\n    try:\n        tags = get_all_tags_from_users_notes(user_id)\n        return jsonify(tags), 200\n    except Exception as e:\n        return jsonify({\"error\": str(e)}), 500\n\n\n@routes_blueprint.route('/users/<string:username>', methods=['GET'])\ndef get_user_by_username(username):\n    try:\n        user = get_user(username)\n        return jsonify(user), 200\n    except Exception as e:\n        return jsonify({\"error\": str(e)}), 500\n",
                        "CopyCode": "from flask import Blueprint, jsonify, request\nfrom api.repositories.user_repository import get_all_db_users\nfrom sqlalchemy import text\n\nfrom api.schemas.user_schema import UserLoginSchema, UserSchema\nfrom api.services.note_service import fetch_notes_by_tag, fetch_notes_by_user, get_all_tags_from_users_notes\nfrom api.services.user_service import add_user, sign_in_user, get_user\nfrom db import db\n\n\nroutes_blueprint = Blueprint('routes', __name__)\n\n@routes_blueprint.route('/', methods=['GET'])\ndef homePage():\n    return jsonify('Returned from your Rest API!!!')\n\n\n@routes_blueprint.route('/test_connection')\ndef test_connection():\n    try:\n        db.session.execute(text('SELECT 1'))\n        db_uri = db.engine.url\n        \n        return f'Connection successful! Database URI: {db_uri}'\n    except Exception as e:\n        return f'Error: {str(e)}'\n    \n\n@routes_blueprint.route('/get_users', methods=['GET'])\ndef get_all_users():\n    try:\n        users_list = get_all_db_users()\n        return jsonify(users_list), 200\n    except Exception as e:\n        return jsonify({\"error\": str(e)}), 500\n\n\n@routes_blueprint.route('/users', methods=['POST'])\ndef register_user():\n    try:\n        user_data = UserSchema().load(request.json)\n\n        user = add_user(user_data['username'], user_data['email'], user_data['password'])\n\n        if 'error' in user:\n            return jsonify(user), 400\n\n        return jsonify(user), 201\n    except Exception as e:\n        return jsonify({\"error\": str(e)}), 500\n    \n\n@routes_blueprint.route('/users/login', methods=['POST'])\ndef login_user():\n    try:\n\n        login_data = UserLoginSchema().load(request.json)\n\n        user = sign_in_user(login_data['username'], login_data['password'])\n\n        if 'error' in user:\n            return jsonify(user), 400\n\n        return jsonify(user), 200\n    except Exception as e:\n        return jsonify({\"error\": str(e)}), 500\n    \n\n@routes_blueprint.route('/users/<int:user_id>/notes', methods=['GET'])\ndef get_notes_by_user(user_id):\n    try:\n        notes = fetch_notes_by_user(user_id)\n        return jsonify(notes), 200\n    except Exception as e:\n        return jsonify({\"error\": str(e)}), 500\n\n\n@routes_blueprint.route('/notes/tag/<string:tag_name>', methods=['GET'])\ndef get_notes_by_tag(tag_name):\n    try:\n        notes = fetch_notes_by_tag(tag_name)\n        return jsonify(notes), 200\n    except Exception as e:\n        return jsonify({\"error\": str(e)}), 500\n\n\n@routes_blueprint.route('/users/<int:user_id>/tags', methods=['GET'])\ndef get_all_tags(user_id):\n    try:\n        tags = get_all_tags_from_users_notes(user_id)\n        return jsonify(tags), 200\n    except Exception as e:\n        return jsonify({\"error\": str(e)}), 500\n\n\n@routes_blueprint.route('/users/<string:username>', methods=['GET'])\ndef get_user_by_username(username):\n    try:\n        user = get_user(username)\n        return jsonify(user), 200\n    except Exception as e:\n        return jsonify({\"error\": str(e)}), 500\n"
                    }
                },
                {
                    "id": 17,
                    "instruction": "In the \"schemas\" folder paste the following code into the \"user_schema.py\" file.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "from marshmallow import Schema, fields, validate\n\nclass UserSchema(Schema):\n    username = fields.Str(required=True, validate=validate.Length(min=1, max=80))\n    email = fields.Email(required=True, validate=validate.Length(max=120))\n    password = fields.Str(required=True, validate=validate.Length(min=6))\n\n\nclass UserLoginSchema(Schema):\n    username = fields.Str(required=True, validate=validate.Length(min=1, max=80))\n    password = fields.Str(required=True, validate=validate.Length(min=6))\n",
                        "CopyCode": "from marshmallow import Schema, fields, validate\n\nclass UserSchema(Schema):\n    username = fields.Str(required=True, validate=validate.Length(min=1, max=80))\n    email = fields.Email(required=True, validate=validate.Length(max=120))\n    password = fields.Str(required=True, validate=validate.Length(min=6))\n\n\nclass UserLoginSchema(Schema):\n    username = fields.Str(required=True, validate=validate.Length(min=1, max=80))\n    password = fields.Str(required=True, validate=validate.Length(min=6))\n"
                    }
                },
                {
                    "id": 18,
                    "instruction": "In the \"services\" folder paste the following code into the \"note_service.py\" file.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "from api.repositories.note_repository import get_notes_by_tag, get_notes_by_user\n\ndef fetch_notes_by_user(user_id: int) -> list:\n    notes = get_notes_by_user(user_id)\n    return [note.to_dict() for note in notes]\n\n\ndef fetch_notes_by_tag(tag_name: str) -> list:\n    notes = get_notes_by_tag(tag_name)\n    return [note.to_dict() for note in notes]\n\n\ndef get_all_tags_from_users_notes(user_id: int) -> list:\n\n    notes = get_notes_by_user(user_id)\n\n    tags = set()\n\n    for note in notes:\n        for tag in note.tags:\n            tags.add(tag.name)\n            \n    return list(tags)",
                        "CopyCode": "from api.repositories.note_repository import get_notes_by_tag, get_notes_by_user\n\ndef fetch_notes_by_user(user_id: int) -> list:\n    notes = get_notes_by_user(user_id)\n    return [note.to_dict() for note in notes]\n\n\ndef fetch_notes_by_tag(tag_name: str) -> list:\n    notes = get_notes_by_tag(tag_name)\n    return [note.to_dict() for note in notes]\n\n\ndef get_all_tags_from_users_notes(user_id: int) -> list:\n\n    notes = get_notes_by_user(user_id)\n\n    tags = set()\n\n    for note in notes:\n        for tag in note.tags:\n            tags.add(tag.name)\n            \n    return list(tags)"
                    }
                },
                {
                    "id": 19,
                    "instruction": "In the \"services\" folder paste the following code into the \"user_service.py\" file.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "from api.errors.custom_exceptions import InvalidCredentialsError\nfrom api.repositories.user_repository import create_user, get_user_by_username\nfrom werkzeug.security import check_password_hash, generate_password_hash\n\n\ndef add_user(username: str, email: str, password: str) -> dict:\n\n    password_hash = generate_password_hash(password)\n    \n    if get_user_by_username(username):\n        return {\"error\": \"Username already exists\"}\n    \n    user = create_user(username, email, password_hash)\n    \n    return user.to_dict()\n\n\ndef sign_in_user(username: str, password: str) -> dict:\n    user = get_user_by_username(username)\n\n    if user and check_password_hash(user.password_hash, password):\n        return {\"message\": \"User signed in successfully\", \"user\": user.to_dict()}\n    else:\n        raise InvalidCredentialsError()\n    \ndef get_user(username: str) -> dict:\n    try: \n        user = get_user_by_username(username)\n        return user.to_dict()\n    except Exception:\n        raise InvalidCredentialsError()\n",
                        "CopyCode": "from api.errors.custom_exceptions import InvalidCredentialsError\nfrom api.repositories.user_repository import create_user, get_user_by_username\nfrom werkzeug.security import check_password_hash, generate_password_hash\n\n\ndef add_user(username: str, email: str, password: str) -> dict:\n\n    password_hash = generate_password_hash(password)\n    \n    if get_user_by_username(username):\n        return {\"error\": \"Username already exists\"}\n    \n    user = create_user(username, email, password_hash)\n    \n    return user.to_dict()\n\n\ndef sign_in_user(username: str, password: str) -> dict:\n    user = get_user_by_username(username)\n\n    if user and check_password_hash(user.password_hash, password):\n        return {\"message\": \"User signed in successfully\", \"user\": user.to_dict()}\n    else:\n        raise InvalidCredentialsError()\n    \ndef get_user(username: str) -> dict:\n    try: \n        user = get_user_by_username(username)\n        return user.to_dict()\n    except Exception:\n        raise InvalidCredentialsError()\n"
                    }
                },
                {
                    "id": 20,
                    "instruction": "In the \"utils\" folder paste the following code into the \"note_verification.py\" file.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "from api.models.db_models import Note\n\ndef verify_note_belongs_to_user(note_id: int, user_id: int) -> bool:\n    note = Note.query.filter_by(note_id=note_id, user_id=user_id).first()\n    return note is not None\n",
                        "CopyCode": "from api.models.db_models import Note\n\ndef verify_note_belongs_to_user(note_id: int, user_id: int) -> bool:\n    note = Note.query.filter_by(note_id=note_id, user_id=user_id).first()\n    return note is not None\n"
                    }
                },
                {
                    "id": 21,
                    "instruction": "To run your Rest API run the following commands.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "",
                        "FormatCode": "cd Notes-Rest-Api\nsource venv/bin/activate\nflask run\ndeactivate\n",
                        "CopyCode": "cd Notes-Rest-Api\nsource venv/bin/activate\nflask run\ndeactivate\n"
                    }
                },
                {
                    "id": 22,
                    "instruction": "Open your browser to test endpoints. Paste the URI in your browser",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "URI Endpoint",
                        "FormatCode": "http://127.0.0.1:5000/test_connection",
                        "CopyCode": "http://127.0.0.1:5000/test_connection"
                    }
                },
                {
                    "id": 23,
                    "instruction": "Open your browser to test endpoints. Paste the URI in your browser",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "URI Endpoint",
                        "FormatCode": "http://127.0.0.1:5000/get_users",
                        "CopyCode": "http://127.0.0.1:5000/get_users"
                    }
                },
                {
                    "id": 24,
                    "instruction": "You can also open a terminal and use \"curl\" commands.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "DisplayLang": "HTTP Request",
                        "FormatCode": "curl -X GET http://127.0.0.1:5000/get_users",
                        "CopyCode": "curl -X GET http://127.0.0.1:5000/get_users"
                    }
                },
                {
                    "id": 25,
                    "instruction": "Commit your changes to Github. Make sure \".env\" is in the output of \"git clean -ndX\". It's not removing anything it's just showing you what files are being ignored by git.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "deactivate\ngit clean -ndX\ngit add .\ngit commit -m \"Added main logic\"\ngit push",
                        "CopyCode": "deactivate\ngit clean -ndX\ngit add .\ngit commit -m \"Added main logic\"\ngit push"
                    }
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "Add Testing to your Flask Rest Api",
                    "desc": "Explains how to write tests using the pytest framework for your Rest Api."
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "Open your \"Notes-Rest-API\" in VSCode. Go to the \"tests\" folder in the top-most directory. In the \"db_testing\" folder paste the following code into the \"test_db_connection.py\" file.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "from db import db\nimport pytest\nfrom sqlalchemy import text\n\n@pytest.mark.order(5)\ndef test_database_connection(app):\n    with app.app_context():\n        result = db.session.execute(text(\"SELECT * FROM Users LIMIT 1;\"))\n        first_row = result.fetchone()\n        assert first_row is not None, \"Database returned no data!\"\n",
                        "CopyCode": "from db import db\nimport pytest\nfrom sqlalchemy import text\n\n@pytest.mark.order(5)\ndef test_database_connection(app):\n    with app.app_context():\n        result = db.session.execute(text(\"SELECT * FROM Users LIMIT 1;\"))\n        first_row = result.fetchone()\n        assert first_row is not None, \"Database returned no data!\"\n"
                    }
                },
                {
                    "id": 2,
                    "instruction": "In the \"endpoint_testing\" folder paste the following code into the \"test_note_endpoints.py\" file.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Python",
                        "FormatCode": "import json\nimport pytest\n\n@pytest.mark.order(1)\ndef test_get_notes_by_user(client):\n\n    user_data = {\n        \"username\": \"testuser3\",\n        \"email\": \"testuser3@example.com\",\n        \"password\": \"testpassword3\"\n    }\n\n    response = client.post('/users', data=json.dumps(user_data), content_type='application/json')\n    user_id = response.json[\"user_id\"]\n\n    response = client.get(f'/users/{user_id}/notes')\n\n    assert response.status_code == 200\n    assert isinstance(response.json, list)\n\n\n@pytest.mark.order(2)\ndef test_get_notes_by_user_no_notes(client):\n\n    user_data = {\n        \"username\": \"testuser4\",\n        \"email\": \"testuser4@example.com\",\n        \"password\": \"testpassword4\"\n    }\n\n    response = client.post('/users', data=json.dumps(user_data), content_type='application/json')\n    user_id = response.json[\"user_id\"]\n\n\n    response = client.get(f'/users/{user_id}/notes')\n\n    assert response.status_code == 200\n    assert response.json == []\n",
                        "CopyCode": "import json\nimport pytest\n\n@pytest.mark.order(1)\ndef test_get_notes_by_user(client):\n\n    user_data = {\n        \"username\": \"testuser3\",\n        \"email\": \"testuser3@example.com\",\n        \"password\": \"testpassword3\"\n    }\n\n    response = client.post('/users', data=json.dumps(user_data), content_type='application/json')\n    user_id = response.json[\"user_id\"]\n\n    response = client.get(f'/users/{user_id}/notes')\n\n    assert response.status_code == 200\n    assert isinstance(response.json, list)\n\n\n@pytest.mark.order(2)\ndef test_get_notes_by_user_no_notes(client):\n\n    user_data = {\n        \"username\": \"testuser4\",\n        \"email\": \"testuser4@example.com\",\n        \"password\": \"testpassword4\"\n    }\n\n    response = client.post('/users', data=json.dumps(user_data), content_type='application/json')\n    user_id = response.json[\"user_id\"]\n\n\n    response = client.get(f'/users/{user_id}/notes')\n\n    assert response.status_code == 200\n    assert response.json == []\n"
                    }
                },
                {
                    "id": 3,
                    "instruction": "In the \"endpoint_testing\" folder paste the following code into the \"test_user_endpoints.py\" file.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "import json\nimport pytest\n\n@pytest.mark.order(3)\ndef test_register_user(client):\n\n    user_data = {\n        \"username\": \"testuser1\",\n        \"email\": \"testuser1@example.com\",\n        \"password\": \"testpassword1\"\n    }\n\n    response = client.post('/users', data=json.dumps(user_data), content_type='application/json')\n\n    print(f\"Status Code: {response.status_code}\")\n    print(f\"Response Data: {response.get_data(as_text=True)}\")\n\n    assert response.status_code == 201\n    assert response.json[\"username\"] == \"testuser1\"\n    assert \"user_id\" in response.json\n\n\n@pytest.mark.order(4)\ndef test_register_user_existing_username(client):\n\n    user_data = {\n        \"username\": \"testuser2\",\n        \"email\": \"testuser2@example.com\",\n        \"password\": \"testpassword2\"\n    }\n\n    client.post('/users', data=json.dumps(user_data), content_type='application/json')\n\n    response = client.post('/users', data=json.dumps(user_data), content_type='application/json')\n\n    assert response.status_code == 400\n    assert response.json[\"error\"] == \"Username already exists\"\n",
                        "CopyCode": "import json\nimport pytest\n\n@pytest.mark.order(3)\ndef test_register_user(client):\n\n    user_data = {\n        \"username\": \"testuser1\",\n        \"email\": \"testuser1@example.com\",\n        \"password\": \"testpassword1\"\n    }\n\n    response = client.post('/users', data=json.dumps(user_data), content_type='application/json')\n\n    print(f\"Status Code: {response.status_code}\")\n    print(f\"Response Data: {response.get_data(as_text=True)}\")\n\n    assert response.status_code == 201\n    assert response.json[\"username\"] == \"testuser1\"\n    assert \"user_id\" in response.json\n\n\n@pytest.mark.order(4)\ndef test_register_user_existing_username(client):\n\n    user_data = {\n        \"username\": \"testuser2\",\n        \"email\": \"testuser2@example.com\",\n        \"password\": \"testpassword2\"\n    }\n\n    client.post('/users', data=json.dumps(user_data), content_type='application/json')\n\n    response = client.post('/users', data=json.dumps(user_data), content_type='application/json')\n\n    assert response.status_code == 400\n    assert response.json[\"error\"] == \"Username already exists\"\n"
                    }
                },
                {
                    "id": 4,
                    "instruction": "You can test your code by running the following commands.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "cd Notes-Rest-Api\nsource venv/bin/activate\npython3 -m pytest tests/",
                        "CopyCode": "cd Notes-Rest-Api\nsource venv/bin/activate\npython3 -m pytest tests/"
                    }
                },
                {
                    "id": 5,
                    "instruction": "You can add the -s flag to allow print statements and log output.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "python3 -m pytest -s tests/",
                        "CopyCode": "python3 -m pytest -s tests/"
                    }
                },
                {
                    "id": 6,
                    "instruction": "You can generate a UI html file for your test results by using the following command.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "python3 -m pytest --html=report.html tests/",
                        "CopyCode": "python3 -m pytest --html=report.html tests/"
                    }
                },
                {
                    "id": 7,
                    "instruction": "Open the html report in a browser using the following command.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "open report.html",
                        "CopyCode": "open report.html"
                    }
                },
                {
                    "id": 8,
                    "instruction": "Push your changes to Github.",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "Command",
                        "FormatCode": "deactivate\ngit clean -ndX\ngit add .\ngit commit -m \"Added testing\"\ngit push",
                        "CopyCode": "deactivate\ngit clean -ndX\ngit add .\ngit commit -m \"Added testing\"\ngit push"
                    }
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "Vue Website Folder Setup Explanation",
                    "desc": "Explanation of the folders that will be used for your frontend code."
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "<u><b>src/api</u></b> - Functions used to call and interact with your backend Rest API endpoints. It's a similar concept to the repository functions interacting with the database."
                },
                {
                    "id": 2,
                    "instruction": "<u><b>src/assets</u></b> - Where you'll put things like your pictures, data, etc."
                },
                {
                    "id": 3,
                    "instruction": "<u><b>src/components</u></b> - Components that you can use in your views. An example would a Note card."
                },
                {
                    "id": 4,
                    "instruction": "<u><b>src/lib</u></b> - Where you'll put the link to where your backend Rest API is being hosted. For this project it should probably be something like \"http://127.0.0.1:5000\" in development."
                },
                {
                    "id": 5,
                    "instruction": "<u><b>src/router</u></b> - The paths of your application. Used to navigate between pages in your application."
                },
                {
                    "id": 6,
                    "instruction": "<u><b>src/services</u></b> - Business logic for your api functions."
                },
                {
                    "id": 7,
                    "instruction": "<u><b>src/stores</u></b> - A management system you can use to store data and methods you can use to modify and interact with it. It's pretty similar to a class."
                },
                {
                    "id": 8,
                    "instruction": "<u><b>src/utils</u></b> - Common functions that are used across various views."
                },
                {
                    "id": 9,
                    "instruction": "<u><b>src/views</u></b> - The pages of your application. The components will be used in these views."
                },
                {
                    "id": 10,
                    "instruction": "<u><b>public</u></b> - Where to store things like videos and files that the user can download"
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "Create your Vue Website",
                    "desc": "Explains how to create your Vue Website and connect it to your Flask Rest API."
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": "",
                    "Code": {
                        "Name": "",
                        "Description": "",
                        "Language": "",
                        "FormatCode": "",
                        "CopyCode": ""
                    }
                },
                {
                    "id": 2,
                    "instruction": ""
                }
            ]
        },
        {
            "Info": [
                {
                    "title": "Add Testing to your Frontend UI",
                    "desc": "Explains how to write tests using the Jest framework for your front end."
                }
            ],
            "Instructions": [
                {
                    "id": 1,
                    "instruction": ""
                },
                {
                    "id": 2,
                    "instruction": ""
                }
            ]
        }
    ]
}